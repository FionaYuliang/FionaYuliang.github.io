<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Promise 的两个封装实现</title>
    <link href="/2022/09/16/promise%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%81%E8%A3%85%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/09/16/promise%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%81%E8%A3%85%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="使用Promise封装异步图片加载"><a href="#使用Promise封装异步图片加载" class="headerlink" title="使用Promise封装异步图片加载"></a>使用Promise封装异步图片加载</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> load<span class="hljs-constructor">ImageAsync(<span class="hljs-params">url</span>)</span> &#123;<br>  return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Promise(<span class="hljs-params">function</span>(<span class="hljs-params">resolve</span>, <span class="hljs-params">reject</span>)</span> &#123;<br>    const image = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>;<br><br>    image.onload = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br>      resolve(image);<br>    &#125;;<br><br>    image.onerror = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br>      reject(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Error(&#x27;Could <span class="hljs-params">not</span> <span class="hljs-params">load</span> <span class="hljs-params">image</span> <span class="hljs-params">at</span> &#x27; + <span class="hljs-params">url</span>)</span>);<br>    &#125;;<br><br>    image.src = url;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用Promise对象实现AJAX操作"><a href="#使用Promise对象实现AJAX操作" class="headerlink" title="使用Promise对象实现AJAX操作"></a>使用Promise对象实现AJAX操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getJSON = <span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>));<br>      &#125;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    client.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url);<br>    client.<span class="hljs-property">onreadystatechange</span> = handler;<br>    client.<span class="hljs-property">responseType</span> = <span class="hljs-string">&quot;json&quot;</span>;<br>    client.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>    client.<span class="hljs-title function_">send</span>();<br><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> promise;<br>&#125;;<br><br><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/posts.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Contents: &#x27;</span> + json);<br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面代码中，getJSON是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个Promise对象。需要注意的是，在getJSON内部，resolve函数和reject函数调用时，都带有参数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 深入继承的六种方式和优缺点</title>
    <link href="/2022/09/10/JavaScript%20%E6%B7%B1%E5%85%A5%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <url>/2022/09/10/JavaScript%20%E6%B7%B1%E5%85%A5%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="作者按："><a href="#作者按：" class="headerlink" title="作者按："></a>作者按：</h2><p>关于JavaScript 继承的几种方式，网上有很多文章。但其实红宝书里已经讲解的非常透彻，思路清晰。本篇文章更像是学习笔记，第八章常读常新。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywzta6htj30rs0pp7db.jpg" alt="红宝书第八章继承-from 微信读书"></p><hr><h3 id="以下是正文："><a href="#以下是正文：" class="headerlink" title="以下是正文："></a>以下是正文：</h3><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (<span class="hljs-params"></span>) &#123;<br>    this.name = <span class="hljs-string">&#x27;yang&#x27;</span>;<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (<span class="hljs-params"></span>) &#123;<br><br>&#125;<br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.getName()) <span class="hljs-comment">// yang</span><br></code></pre></td></tr></table></figure><p>问题1：引用类型的属性被所有实例共享<br>问题2：在创建 Child实例时，不能像Parent传参</p><h3 id="2-constructor-stealing-（盗用构造函数）"><a href="#2-constructor-stealing-（盗用构造函数）" class="headerlink" title="2. constructor stealing （盗用构造函数）"></a>2. constructor stealing （盗用构造函数）</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (<span class="hljs-params"></span>) &#123;<br>    this.names = [<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;yao&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (<span class="hljs-params"></span>) &#123;<br>    Parent.call(this);<br>&#125;<br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br>child1.names.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;xuezhuo&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.names); <span class="hljs-comment">// [&quot;yang&quot;, &quot;yao&quot;, &quot;xuezhou&quot;]</span><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.names); <span class="hljs-comment">// [&quot;yang&quot;, yao&quot;]</span><br></code></pre></td></tr></table></figure><p>优点：<br>1.避免了引用类型的属性被所有实例共享<br>2.可以在 Child 中向 Parent 传参<br>缺点：<br>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p><h3 id="3-组合继承（经典继承）"><a href="#3-组合继承（经典继承）" class="headerlink" title="3. 组合继承（经典继承）"></a>3. 组合继承（经典继承）</h3><p>原型链继承和经典继承的双剑合璧，基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><p>弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (<span class="hljs-params">name</span>) &#123;<br>    this.name = name;<br>    this.colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br>Parent.prototype.getName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (<span class="hljs-params">name, age</span>) &#123;<br>    Parent.call(this, name);<br>    this.age = age;<br>&#125;<br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br>Child.prototype.constructor = Child;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br>child1.colors.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.name); <span class="hljs-comment">// yang</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.age); <span class="hljs-comment">// 18</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.colors); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;miemie&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.name); <span class="hljs-comment">// miemie</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.age); <span class="hljs-comment">// 20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.colors); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> create<span class="hljs-constructor">Obj(<span class="hljs-params">o</span>)</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-constructor">F()</span>&#123;&#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">F</span>.</span></span>prototype = o;<br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">F()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数是 Douglas Crockford 给出的，适用于在一个对象的基础上在创造一个对象。<br>ECMAScript 5通过增加Object.create()方法将原型式继承的概念规范化了。<br>但是它的缺点还是跟原型链继承一样，属性中包含的引用值还是会在对象中共享。</p><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h3><p>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObj</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">clone</span> = Object.<span class="hljs-title function_ invoke__">create</span>(o);<br>    <span class="hljs-keyword">clone</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">clone</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是它还是有跟构造函数模式一样的缺点</p><h3 id="6-终极法器：寄生组合式继承"><a href="#6-终极法器：寄生组合式继承" class="headerlink" title="6. 终极法器：寄生组合式继承"></a>6. 终极法器：寄生组合式继承</h3><p>先来复习一下组合继承的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (name, age) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1)<br></code></pre></td></tr></table></figure><p>组合继承最大的缺点是会调用两次父构造函数。</p><p>一次是设置子类型实例的原型的时候：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Child</span>.proto<span class="hljs-keyword">type</span> = new <span class="hljs-type">Parent</span>();<br></code></pre></td></tr></table></figure><p>一次在创建子类型实例的时候：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Child</span>(<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br></code></pre></td></tr></table></figure><p>回想下 new 的模拟实现，其实在这句中，我们会执行：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Parent.<span class="hljs-keyword">call</span>(this, <span class="hljs-keyword">name</span>);<br></code></pre></td></tr></table></figure><p>在这里，我们又会调用了一次 Parent 构造函数。</p><p>所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为colors，属性值为[‘red’, ‘blue’, ‘green’]。</p><p>那么我们该如何精益求精，避免这一次重复调用呢？</p><p>如果我们不使用 Child.prototype &#x3D; new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？</p><p>看看如何实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (name, age) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-comment">// 关键的三步</span><br><span class="hljs-keyword">var</span> F = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br><br>F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br><br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1);<br></code></pre></td></tr></table></figure><p>最后我们封装一下这个继承方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">prototype</span>(<span class="hljs-params">child, parent</span>) &#123;<br>    <span class="hljs-keyword">var</span> prototype = <span class="hljs-title function_">object</span>(parent.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    prototype.<span class="hljs-property">constructor</span> = child;<br>    child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype;<br>&#125;<br><br><span class="hljs-comment">// 当我们使用的时候：</span><br><span class="hljs-title function_">prototype</span>(<span class="hljs-title class_">Child</span>, <span class="hljs-title class_">Parent</span>);<br></code></pre></td></tr></table></figure><p>寄生式组合继承可以算是引用类型继承的最佳模式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 原型中的哲学思想</title>
    <link href="/2022/08/03/JavaScript%20%E5%8E%9F%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3/"/>
    <url>/2022/08/03/JavaScript%20%E5%8E%9F%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="作者按："><a href="#作者按：" class="headerlink" title="作者按："></a>作者按：</h2><p>学原型链的时候感觉颇有些哲学思想在里面，于是搜到这样一篇文章，觉得很有意思，记录下来。<br>文章说 Object 和 Function 犹如 JavaScript 世界中的亚当与夏娃，我倒觉得原型家族也是个母系氏族社会呢，Object 为母，Function 为父，比较像我国古代的女娲造人，因为 Function.prototype 也指向 Object.prototype</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yqysoxbmj33402c0b2b.jpg" alt="红宝书第八章原型学习笔记"></p><hr><h3 id="以下是正文："><a href="#以下是正文：" class="headerlink" title="以下是正文："></a>以下是正文：</h3><p>记得当年初试前端的时候，学习 JavaScript 过程中，原型问题一直让我疑惑许久，那时候捧着那本著名的红皮书，看到有关原型的讲解时，总是心存疑虑。<br>当在 JavaScript 世界中走过不少旅程之后，再次萌发起研究这部分知识的欲望，翻阅了不少书籍和资料，才搞懂__proto__ 和 prototype 的概念。<br>故以作此笔记，日后忘了可以回来看看。<br>如果你看的过程中觉得理解有些困难，把例子在代码中跑一跑，亲手试一试也许能解决不少疑惑。</p><h3 id="一切皆为对象"><a href="#一切皆为对象" class="headerlink" title="一切皆为对象"></a>一切皆为对象</h3><blockquote><p>殊不知，JavaScript的世界中的对象，追根溯源来自于一个 null</p></blockquote><p>「一切皆为对象」，这句着实是一手好营销，易记，易上口，印象深刻。<br>万物初生时，一个 null 对象，凭空而生，接着 Object、Function 学着 null 的模样塑造了自己，并且它们彼此之间喜结连理，提供了 prototype 和 constructor，一个给子孙提供了基因，一个则制造万千子子孙孙。<br>在 JavaScript 中，null 也是作为一个对象存在，基于它继承的子子孙孙，当属对象。<br>乍一看，null 像是上帝,而 Object 和 Function 犹如 JavaScript 世界中的<strong>亚当</strong>与<strong>夏娃</strong>。</p><h3 id="原型指针-proto"><a href="#原型指针-proto" class="headerlink" title="原型指针 proto"></a>原型指针 <strong>proto</strong></h3><p>在 JavaScript 中，每个对象都拥有一个原型对象，而指向该原型对象的内部指针则是__proto__,通过它可以从中继承原型对象的属性，原型是 JavaScript 中的基因链接，有了这个，才能知道这个对象的祖祖辈辈。从对象中的__proto__可以访问到他所继承的原型对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a = new Array();<br>a.__proto__ === Array.prototype // true<br></code></pre></td></tr></table></figure><p>上面代码中，创建了一个 Array 的实例 a，该实例的原型指向了 Array.prototype。<br>Array.prototype 本身也是一个对象，也有继承的原型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">a.__proto__.__proto__ === Object.prototype  // true<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 等同于 Array.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype<br>这就说了明了，Array本身也是继承自Object的，那么Object的原型指向的是谁呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">a.__proto__.__proto__.__proto__ === null  // true<br>// 等同于 Object.prototype.__proto__ === null<br></code></pre></td></tr></table></figure><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/F155FDADCE01F99F7E10F5323F7CADEE.png" alt="原型链指向示意图1"></p><p>所以说，JavaScript 中的对象，追根溯源都是来自一个<strong>null</strong>对象。<strong>佛曰：万物皆空，善哉善哉</strong>。</p><p>除了使用.__proto__方式访问对象的原型，还可以通过 <strong>Object.getPrototypeOf</strong> 方法来获取对象的原型，以及通过 <strong>Object.setPrototypeOf</strong> 方法来重写对象的原型<br>。<br>值得注意的是，按照语言标准，__proto__属性只有浏览器才需要部署，其他环境可以没有这个属性，而且前后的两根下划线，表示它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用 Object.getPrototypeof 和 Object.setPrototypeOf ，进行原型对象的读写操作。<br>这里用__proto__属性来描述对象中的原型，是因为这样来得更加形象，且容易理解。</p><h3 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 prototype</h3><p>函数作为 JavaScript 中的一等公民，它既是函数又是对象，函数的原型指向的是Function.prototype</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var Foo = function() &#123;&#125;<br>Foo.__proto__ === Function.prototype // true<br></code></pre></td></tr></table></figure><p>函数实例除了拥有__proto__属性之外，还拥有 prototype 属性。<br>通过该函数构造的新的实例对象，其原型指针 <strong>proto</strong> 会指向该函数的 prototype 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a = new Foo();<br>a.__proto__ === Foo.prototype; // true<br></code></pre></td></tr></table></figure><p>而函数的 prototype 属性，本身是一个由 Object 构造的实例对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Foo.prototype.__proto__ === Object.prototype; // true<br></code></pre></td></tr></table></figure><p>prototype属性很特殊，它还有一个隐式的 constructor ，指向了构造函数本身。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">Foo.prototype.constructor === Foo; // true<br>a.constructor === Foo; // true<br>a.constructor === Foo.prototype.constructor; // true<br></code></pre></td></tr></table></figure><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/56AF39C33A5154A2178E9A82E53D2C11.png" alt="原型链指向示意图2"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>原型链作为实现继承的主要方法，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。<br>每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(<strong>proto</strong>)。<br>那么，假如我们让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。<br>如此层层递进，就构造了实例与原型的链条，这就是<strong>原型链</strong>的基本概念。</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>“原型链”的作用在于，当读取对象的某个属性时，JavaScript 引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。以此类推，如果直到最顶层的 Object.prototype 还是找不到，则返回 underfine</p><h3 id="亲子鉴定"><a href="#亲子鉴定" class="headerlink" title="亲子鉴定"></a>亲子鉴定</h3><p>在 JavaScript 中，也存在鉴定亲子之间DNA关系的方法：</p><p><strong>instanceof</strong><br>运算符返回一个布尔值，表示一个对象是否由某个构造函数创建。<br><strong>Object.isPrototypeOf()</strong><br>只要某个对象处在原型链上，isProtypeOf 都返回true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">var Bar = function() &#123;&#125;<br>var b = new Bar();<br>b instanceof Bar // true<br>Bar.prototype.isPrototypeOf(b) // true<br>Object.prototype.isPrototypeOf(Bar) // true<br></code></pre></td></tr></table></figure><p>要注意，实例b的原型是 Bar.prototype 而不是 Bar</p><h3 id="一张历史悠久的图"><a href="#一张历史悠久的图" class="headerlink" title="一张历史悠久的图"></a>一张历史悠久的图</h3><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/289FC3BDCB0425AA1C9F0DC5EBA1079F.jpg" alt="一张历史悠久的图"></p><p>这是一张描述了 Object、Function 以及一个函数实例 Foo 他们之间原型之间联系。如果理解了上面的概念，这张图是不难读懂。</p><p>从上图中，能看到一个有趣的地方。<br>Function.prototype.<strong>proto</strong> 指向了 Object.prototype，这说明 Function.prototype 是一个 Object实例，那么应当是先有的Object再有Function。<br>但是Object.prototype.constructor.<strong>proto</strong> 又指向了 Function.prototype。这样看来，没有Function，Object也不能创建实例。<br>这就产生了一种类「先有鸡还是先有蛋」的经典问题，到底是先有的Object还是先有的Function呢？<br>这么哲学向的问题，留给你思考了。<br>我只是感慨：<br>越往JavaScript的深处探索，越发觉得这一门语言很哲学。</p><h3 id="先有鸡还是先有蛋？"><a href="#先有鸡还是先有蛋？" class="headerlink" title="先有鸡还是先有蛋？"></a>先有鸡还是先有蛋？</h3><p>时隔半年，偶尔翻开这篇文章。<br>对于这个问题，又有了新的思考。<br>愿意跟能看到这里的你来分享一下。</p><p>我们可以先把 Object.prototype 和 Function.prototype 这两个拎出来看，因为他们本身就是一个实例对象。<br>为方便理解，我们改一下名字，避免和 Object 和 Function 的强关联，分别叫：Op 和 Fp</p><p>那么就有这样的原型链存在了</p><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/object-or-function-first.png" alt="鸡不过是一只蛋创造另一只蛋的工具"></p><p>我再描述一下上面的原型链，先有 null , 再有了 Op , 然后再有了 Fp ，然后以 Fp 为原型的两个构造函数 (Object, Function) 出现了。<br>而作为构造函数，需要有个 prototype 属性用来作为以该构造函数创造的实例的继承。<br>所以Object.prototype &#x3D; Op, Function.prototype &#x3D; Fp。</p><p>原文链接:<a href="https://huang-jerryc.com/2016/06/28/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3/">JavaScript 原型中的哲学思想</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>细说数组常用遍历的方法</title>
    <link href="/2022/07/20/%E7%BB%86%E8%AF%B4%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2022/07/20/%E7%BB%86%E8%AF%B4%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="作者按："><a href="#作者按：" class="headerlink" title="作者按："></a>作者按：</h2><p>可以说 PHP 和 JavaScript 的学习都是从数组操作开始的，之前整理过<a href="https://fionayuliang.github.io/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/">《PHP内置排序函数对比》</a>,现在根据Github Blog 转载一篇数组常用遍历方法的文章，之后数组的使用也要时常归纳总结。</p><hr><p>本文主要介绍数组常见遍历方法：forEach、map、filter、find、every、some、reduce，它们有个共同点：不会改变原始数组。</p><h3 id="一、forEach：遍历数组"><a href="#一、forEach：遍历数组" class="headerlink" title="一、forEach：遍历数组"></a>一、forEach：遍历数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blue&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>];<br><span class="hljs-comment">// ES5遍历数组方法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; colors.<span class="hljs-built_in">length</span>; i++)&#123; <br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(colors[i]);<span class="hljs-comment">//red blue green</span><br>&#125;<br><span class="hljs-comment">// ES6 forEach</span><br>colors.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params">color</span>)&#123;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(color);<span class="hljs-comment">//red blue green</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>我们再来看个例子：遍历数组中的值,并计算总和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>numbers.forEach(<span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span><span class="hljs-built_in">sum</span>+=<span class="hljs-built_in">number</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>)<span class="hljs-comment">//15</span><br></code></pre></td></tr></table></figure><h3 id="二、map：将数组映射成另一个数组"><a href="#二、map：将数组映射成另一个数组" class="headerlink" title="二、map：将数组映射成另一个数组"></a>二、map：将数组映射成另一个数组</h3><p><strong>map通过指定函数处理数组的每个元素，并返回处理后新的数组，map 不会改变原始数组。</strong></p><p><strong>forEach和map的区别在于，forEach没有返回值。</strong><br><strong>map需要返回值，如果不给return，默认返回undefined</strong></p><p>使用场景1<br>假定有一个数值数组(A),将A数组中的值以双倍的形式放到B数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> doubledNumbers = [];<br><span class="hljs-comment">// es5写法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">length</span>; i++)&#123;<br> doubledNumbers.<span class="hljs-built_in">push</span>(numbers[i] * <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(doubledNumbers);<span class="hljs-comment">//[2,4,6]</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// es6 map方法</span><br><span class="hljs-keyword">var</span> doubled = numbers.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">number</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span> * <span class="hljs-number">2</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(doubled);<span class="hljs-comment">//[2,4,6]</span><br></code></pre></td></tr></table></figure><p>使用场景2 假定有一个对象数组(A),将A数中对象某个属性的值存储到B数组中</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> cars = [<br>  &#123;<span class="hljs-attr">model</span>:<span class="hljs-string">&quot;Buick&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&quot;CHEAP&quot;</span>&#125;,<br>  &#123;<span class="hljs-attr">model</span>:<span class="hljs-string">&quot;BMW&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&quot;expensive&quot;</span>&#125;<br>];<br><span class="hljs-keyword">var</span> prices = cars.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">car</span>)&#123;<br>    <span class="hljs-keyword">return</span> car.price;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(prices);<span class="hljs-comment">//[&quot;CHEAP&quot;, &quot;expensive&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="三、filter：从数组中找出所有符合指定条件的元素"><a href="#三、filter：从数组中找出所有符合指定条件的元素" class="headerlink" title="三、filter：从数组中找出所有符合指定条件的元素"></a>三、filter：从数组中找出所有符合指定条件的元素</h3><p><strong>filter() 检测数值元素，并返回符合条件所有元素的数组。 filter() 不会改变原始数组。</strong></p><p><strong>使用场景1：假定有一个对象数组(A),获取数组中指定类型的对象放到B数组中</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var porducts = [<br>  &#123;<span class="hljs-type">name</span>:&quot;cucumber&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;banana&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;celery&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;orange&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;&#125;<br>];<br>// es5写法<br>var filteredProducts = [];<br><span class="hljs-keyword">for</span>(var i = <span class="hljs-number">0</span>; i &lt; porducts.length; i++)&#123;<br>    <span class="hljs-keyword">if</span>(porducts[i].<span class="hljs-keyword">type</span> === &quot;vegetable&quot;)&#123;<br>      filteredProducts.push(porducts[i]);<br>    &#125;<br>&#125;<br>console.log(filteredProducts);//[&#123;<span class="hljs-type">name</span>: &quot;cucumber&quot;, <span class="hljs-keyword">type</span>: &quot;vegetable&quot;&#125;,<br>                                 &#123;<span class="hljs-type">name</span>: &quot;celery&quot;, <span class="hljs-keyword">type</span>: &quot;vegetable&quot;&#125;]<br>// es6 <span class="hljs-keyword">filter</span><br>var filtered2 = porducts.<span class="hljs-keyword">filter</span>(<span class="hljs-keyword">function</span>(product)&#123;<br>  <span class="hljs-keyword">return</span> product.<span class="hljs-keyword">type</span> === &quot;vegetable&quot;;<br>&#125;)<br>console.log(filtered2);<br></code></pre></td></tr></table></figure><p>使用场景2：假定有一个对象数组(A),过滤掉不满足以下条件的对象<br>条件: 蔬菜 数量大于0,价格小于10</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var products = [<br>  &#123;<span class="hljs-type">name</span>:&quot;cucumber&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;,quantity:<span class="hljs-number">0</span>,price:<span class="hljs-number">1</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;banana&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;,quantity:<span class="hljs-number">10</span>,price:<span class="hljs-number">16</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;celery&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;,quantity:<span class="hljs-number">30</span>,price:<span class="hljs-number">8</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;orange&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;,quantity:<span class="hljs-number">3</span>,price:<span class="hljs-number">6</span>&#125;<br>];<br>products = products.<span class="hljs-keyword">filter</span>(<span class="hljs-keyword">function</span>(product)&#123;<br>    <span class="hljs-keyword">return</span> product.<span class="hljs-keyword">type</span> === &quot;vegetable&quot; <br>    &amp;&amp; product.quantity &gt; <span class="hljs-number">0</span> <br>    &amp;&amp; product.price &lt; <span class="hljs-number">10</span><br>&#125;)<br>console.log(products);//[&#123;<span class="hljs-type">name</span>:&quot;celery&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;,quantity:<span class="hljs-number">30</span>,price:<span class="hljs-number">8</span>&#125;]<br></code></pre></td></tr></table></figure><p>使用场景3：假定有两个数组(A,B),根据A中id值,过滤掉B数组不符合的数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> post = &#123;id:<span class="hljs-number">4</span>,<span class="hljs-built_in">title</span>:<span class="hljs-string">&quot;Javascript&quot;</span>&#125;;<br><span class="hljs-built_in">var</span> comments = [<br>   &#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Angular4&quot;</span>&#125;,<br>   &#123;postId:<span class="hljs-number">2</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Vue.js&quot;</span>&#125;,<br>   &#123;postId:<span class="hljs-number">3</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Node.js&quot;</span>&#125;,<br>   &#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;React.js&quot;</span>&#125;,<br>];<br>function commentsForPost(post,comments)&#123;<br>   <span class="hljs-built_in">return</span> comments.filter(function(comment)&#123;<br>     <span class="hljs-built_in">return</span> comment.postId === post.id;<br>   &#125;)<br>&#125;<br>console.<span class="hljs-built_in">log</span>(commentsForPost(post,comments));//[&#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Angular4&quot;</span>&#125;,&#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;React.js&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><h3 id="四、find：返回通过测试（函数内判断）的数组的第一个元素的值"><a href="#四、find：返回通过测试（函数内判断）的数组的第一个元素的值" class="headerlink" title="四、find：返回通过测试（函数内判断）的数组的第一个元素的值"></a>四、find：返回通过测试（函数内判断）的数组的第一个元素的值</h3><p><strong>它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</strong><br>使用场景1<br>假定有一个对象数组(A),找到符合条件的对象</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> var users = [<br>  &#123;<span class="hljs-type">name</span>:&quot;Jill&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;,id:<span class="hljs-number">2</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;Bill&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;&#125;<br> ];<br>// es5方法<br> var <span class="hljs-keyword">user</span>;<br> <span class="hljs-keyword">for</span>(var i = <span class="hljs-number">0</span>; i &lt; users.length; i++)&#123;<br>  <span class="hljs-keyword">if</span>(users[i].name === &quot;Alex&quot;)&#123;<br>    <span class="hljs-keyword">user</span> = users[i];<br>    break;//找到后就终止循环<br>  &#125;<br> &#125;<br> console.log(<span class="hljs-keyword">user</span>);// &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;,id:<span class="hljs-number">2</span>&#125;<br>// es6 find<br><span class="hljs-keyword">user</span> = users.find(<span class="hljs-keyword">function</span>(<span class="hljs-keyword">user</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>.name === &quot;Alex&quot;;<br>&#125;)<br>console.log(<span class="hljs-keyword">user</span>);// &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;,id:<span class="hljs-number">2</span>&#125;找到后就终止循环<br></code></pre></td></tr></table></figure><p>使用场景2：假定有一个对象数组(A),根据指定对象的条件找到数组中符合条件的对象</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> posts = [<br> &#123;<span class="hljs-attribute">id:</span><span class="hljs-string">3,title</span>:<span class="hljs-string">&quot;Node.js&quot;</span>&#125;,<br> &#123;<span class="hljs-attribute">id:</span><span class="hljs-string">1,title</span>:<span class="hljs-string">&quot;React.js&quot;</span>&#125;<br>];<br><span class="hljs-keyword">var</span> comment = &#123;<span class="hljs-attribute">postId</span>:<span class="hljs-number">1</span>,<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Hello World!&quot;</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">postForComment</span>(<span class="hljs-params">posts,comment</span>)</span>&#123;<br> <span class="hljs-keyword">return</span> posts.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> post.id === comment.postId;<br> &#125;)<br>&#125;<br><span class="hljs-built_in">console</span>.log(postForComment(posts,comment));<span class="hljs-comment">//&#123;id: 1, title: &quot;React.js&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="五、every-amp-some"><a href="#五、every-amp-some" class="headerlink" title="五、every&amp;some"></a>五、every&amp;some</h3><p><strong>every：数组中是否每个元素都满足指定的条件</strong><br><strong>some:数组中是否有元素满足指定的条件</strong></p><p>使用场景1：计算对象数组中每个电脑操作系统是否可用，大于16位操作系统表示可用,否则不可用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//ES5方法</span><br><span class="hljs-keyword">var</span> computers = [<br> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Apple&quot;</span>,<span class="hljs-attr">ram</span>:<span class="hljs-number">16</span>&#125;,<br> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;IBM&quot;</span>,<span class="hljs-attr">ram</span>:<span class="hljs-number">4</span>&#125;,<br> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Acer&quot;</span>,<span class="hljs-attr">ram</span>:<span class="hljs-number">32</span>&#125;<br>];<br><span class="hljs-keyword">var</span> everyComputersCanRunProgram = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> someComputersCanRunProgram = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; computers.<span class="hljs-built_in">length</span>; i++)&#123;<br> <span class="hljs-keyword">var</span> computer = computers[i];<br> <span class="hljs-keyword">if</span>(computer.ram &lt; <span class="hljs-number">16</span>)&#123;<br>   everyComputersCanRunProgram = <span class="hljs-literal">false</span>;<br> &#125;<span class="hljs-keyword">else</span>&#123;<br>   someComputersCanRunProgram = <span class="hljs-literal">true</span>;<br> &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(everyComputersCanRunProgram);<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(someComputersCanRunProgram);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima">//ES6 <span class="hljs-built_in">some</span> <span class="hljs-built_in">every</span> <br><span class="hljs-built_in">var</span> <span class="hljs-built_in">every</span> = computers.<span class="hljs-built_in">every</span>(function(computer)&#123;<br>  <span class="hljs-built_in">return</span> computer.ram &gt; <span class="hljs-number">16</span>;<br>&#125;)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">every</span>);//<span class="hljs-literal">false</span><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">some</span> = computers.<span class="hljs-built_in">some</span>(function(computer)&#123;<br> <span class="hljs-built_in">return</span> computer.ram &gt; <span class="hljs-number">16</span>;<br>&#125;)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">some</span>);//<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>一言以蔽之：Some: 一真即真；Every: 一假即假</strong></p><p>使用场景2：假定有一个注册页面,判断所有input内容的长度是否大于0</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Field</span>(<span class="hljs-params">value</span>)&#123;<br>  this.value = value;<br>&#125;<br>Field.prototype.validate = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> this.value.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//ES5方法</span><br><span class="hljs-keyword">var</span> username = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;henrywu&quot;</span>);<br><span class="hljs-keyword">var</span> telephone = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;18888888888&quot;</span>);<br><span class="hljs-keyword">var</span> password = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;my_password&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(username.validate());<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(telephone.validate());<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(password.validate());<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//ES6 some every</span><br><span class="hljs-keyword">var</span> fields = [username,telephone,password];<br><span class="hljs-keyword">var</span> formIsValid = fields.every(<span class="hljs-keyword">function</span>(<span class="hljs-params">field</span>)&#123;<br> <span class="hljs-keyword">return</span> field.validate();<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(formIsValid);<span class="hljs-comment">//true</span><br><span class="hljs-keyword">if</span>(formIsValid)&#123;<br> <span class="hljs-comment">// 注册成功</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-comment">// 给用户一个友善的错误提醒</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、reduce：将数组合成一个值"><a href="#六、reduce：将数组合成一个值" class="headerlink" title="六、reduce：将数组合成一个值"></a>六、reduce：将数组合成一个值</h3><p><strong>reduce() 方法接收一个方法作为累加器，数组中的每个值(从左至右) 开始合并，最终为一个值。</strong></p><p>使用场景1： 计算数组中所有值的总和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>];<br> <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//es5 方法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">length</span>; i++)&#123;<br>  <span class="hljs-built_in">sum</span> += numbers[i];<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br><span class="hljs-comment">// es6 reduce</span><br><span class="hljs-keyword">var</span> sumValue = numbers.<span class="hljs-built_in">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">sum2,number2</span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sum2);<span class="hljs-comment">//0 10 30 60</span><br>  <span class="hljs-keyword">return</span> sum2 + number2;<br>&#125;,<span class="hljs-number">0</span>);<span class="hljs-comment">//sum2初始值为0</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sumValue);<br></code></pre></td></tr></table></figure><p>使用场景2：</p><p>将数组中对象的某个属性抽离到另外一个数组中</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> primaryColors = [<br>  &#123;<span class="hljs-built_in">color</span>:<span class="hljs-string">&quot;red&quot;</span>&#125;,<br>  &#123;<span class="hljs-built_in">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>&#125;,<br>  &#123;<span class="hljs-built_in">color</span>:<span class="hljs-string">&quot;blue&quot;</span>&#125;<br>];<br><span class="hljs-built_in">var</span> colors = primaryColors.reduce(function(previous,primaryColor)&#123;<br>   previous.<span class="hljs-built_in">push</span>(primaryColor.<span class="hljs-built_in">color</span>);<br>   <span class="hljs-built_in">return</span> previous;<br>&#125;,[]);<br>console.<span class="hljs-built_in">log</span>(colors);//[<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>]<br></code></pre></td></tr></table></figure><p>使用场景3：判断字符串中括号是否对称</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> balancedParens<span class="hljs-built_in">(string</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">!string</span>.split(<span class="hljs-string">&quot;&quot;</span>).reduce(<span class="hljs-keyword">function</span>(<span class="hljs-keyword">previous</span>,char)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">previous</span> &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">previous</span>;&#125;<br>    <span class="hljs-keyword">if</span>(char == <span class="hljs-string">&quot;(&quot;</span>)&#123; <span class="hljs-keyword">return</span> ++<span class="hljs-keyword">previous</span>;&#125;<br>    <span class="hljs-keyword">if</span>(char == <span class="hljs-string">&quot;)&quot;</span>)&#123; <span class="hljs-keyword">return</span> --<span class="hljs-keyword">previous</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">previous</span>;<br>  &#125;,<span class="hljs-number">0</span>);<br>&#125;<br>console.log(balancedParens(<span class="hljs-string">&quot;((())))&quot;</span>));<br></code></pre></td></tr></table></figure><p>原文链接:<a href="https://github.com/ljianshu/Blog/issues/31">细说数组常用遍历的方法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年英文阅读年终总结</title>
    <link href="/2022/02/01/2021%E5%B9%B4%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/02/01/2021%E5%B9%B4%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这是因为疫情无法回老家过年的第二个春节。借此辞旧迎新之际，盘点一下2021年英文阅读的突破和收获。</p><p>7月-10月份，读完了2部短篇小说《了不起的盖茨比》《月亮与六便士》，以及2部长篇小说，《傲慢与偏见》《简爱》。</p><h3 id="The-Great-Gatsby"><a href="#The-Great-Gatsby" class="headerlink" title="The Great Gatsby"></a>The Great Gatsby</h3><p>《了不起的盖茨比》，由于它的名气和主题，一直以为是个俗套华丽的爱情故事，阅读之前好奇，是否原作和电影一样华而不实，但当我开始为一段又一段句子暗暗激动时，心想，应该是从此以后喜欢读英文小说了，终于get到了英文小说的美妙之处。在菲茨杰拉德笔下，哪怕微风轻轻吹动黛西衣领上的绒毛，都描写得那么让人心动。</p><blockquote><p>It was James Gatz who had been loafing along the beach that afternoon in a torn green jersey and a pair of canvas pants, but it was already Jay Gatsby who borrowed a row-boat, pulled out to the Tuolomee and informed Cody that a wind might catch him and break him up in half an hour.</p></blockquote><blockquote><p>But his heart was in a constant, turbulent riot.The most grotesque and fantastic conceits haunted him in his bed at night. A universe of ineffable gaudiness spun itself out in his brain while the clock ticked on the wash-stand and the moon soaked with wet light his tangled clothes upon the floor. Each night he added to the pattern of his fancies until drowsiness closed down upon some vivid scene with an oblivious embrace. For a while these reveries provided an outlet  for his imagination; they were a satisfactory hint of the unreality of reality, a promise that the rock of the world was founded securely on a fairy’s wing.</p></blockquote><p>阅读建议：全书5万字，若不在意剧透，可以先通过电影熟悉基本情节，再读小说，这样可以对整体剧情有个简单地把握，再去细细体会其中描写。</p><h3 id="The-Moon-and-Sixpence"><a href="#The-Moon-and-Sixpence" class="headerlink" title="The Moon and Sixpence"></a>The Moon and Sixpence</h3><p>《月亮与六便士》，追逐梦想就是追逐厄运。<br>这段话初次读到便被击中，现在终于了解它的来源。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv4dwubxj30pn2bqn7j.jpg" alt="月亮与六便士选段"></p><p>阅读建议：Chapter1 和 Chapter2 带有强烈的艺术评论性质，是全书最难读的地方，其余部分是叙事小说文体，共5万字。如果觉得前两章读不下去，可以先看叙事部分，再看毛姆本人是如何评论这个故事的。</p><h3 id="Pride-and-Prejudice"><a href="#Pride-and-Prejudice" class="headerlink" title="Pride and Prejudice"></a>Pride and Prejudice</h3><p>《傲慢与偏见》，工作不忙的时候，每晚大概有一个小时的阅读，周末的时候每天读两三个小时。沉浸其中迫不及待想要知晓接下来的情节，全部读完花了18天。文学作品提供了大量丰富的细节，伊丽莎白对达西的小心思，姑妈家对简和伊丽莎白两人命运的影响，班内特先生辛辣的幽默，还有姐妹两人之间互相打趣的俏皮话，都是只有原著才能提供的。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv50oatbj30u013znc5.jpg" alt="傲慢与偏见选段"></p><h3 id="Jane-Eyre"><a href="#Jane-Eyre" class="headerlink" title="Jane Eyre"></a>Jane Eyre</h3><p>《傲慢与偏见》12万多字，《简爱》18万多字，无论字数还是故事风格，都很适合作为衔接。所以趁热打铁开启了《简爱》的阅读。不同于前者英式乡村田园风情，简爱带有明显阴郁的哥特的色彩，和基督教文化色彩也更浓一些。</p><p>感到幸运（或者不幸）的一点是，这两本书的中文版我没有看过，所以小说情节对我来说是完全崭新的，小时候在书店翻过几页《简爱》，孤儿院互相取暖的伙伴不幸去世，简爱遭受的种种让幼小的我喘不过气来。再拿起这本书，已经是十几年后了。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv58u34ej30u013zduu.jpg" alt="简爱选段"></p><p>少女时期的我对外国名著完全不感冒，佶屈聱牙的翻译，冗长枯燥的人名，动辄大段毫无共鸣的环境描写，都把我拦在了大门外。而今我如饥似渴读完两本原版名著，陶醉其中的同时也深感幼年启蒙的重要性，英美文学这扇门，终于推开了一条小缝。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv78emhyj30pt0h54ce.jpg" alt="电影选择的是2011年版本"></p><h3 id="TOFEL-Reading"><a href="#TOFEL-Reading" class="headerlink" title="TOFEL Reading"></a>TOFEL Reading</h3><p>夏天业务忙碌的碎片事件做点托福阅读，打印网上整理好的分类文章，生物、艺术、生态、心理等，其中生物篇做的最多。15分钟一篇的练手，如同炎热天气中一口气吃下半个冰镇西瓜。</p><p>喜欢非虚构阅读，记录下文章提及学科专有名词，词根衍生的常见其他名词，笔尖在纸张上行走，像一只勤奋的小蚂蚁。很多学科名词大概在托福阅读以外的地方不会再用，但天然喜欢它们，仿佛带着某种既定的安宁和秩序。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv7de461j30u0140ap5.jpg" alt="随便读读"></p>]]></content>
    
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组内置排序函数对比</title>
    <link href="/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/"/>
    <url>/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>PHP 手册专门列出了数组内置排序函数的属性一览表, 不过仔细看就会发现, 这个表格比较乱, 缺乏条理性</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7sc3ccty4j310s0hg10u.jpg" alt="图片"></p><p>因此我对这些排序函数做了简单的归类和对比, 这样看起来一目了然, 也仍容易记忆使用了.</p><p><img src="https://uploader.shimo.im/f/8vzoLOQmKVQY6nd0.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><p>首先带有 sort 的分为 3 组 6 对, 每对之间是正序&#x2F;倒序的相反关系,其他属性相同.</p><p>sort 和 asort 的区别是:是否在排序时保持键值关联</p><p>只有 sort&#x2F;rsort&#x2F;shuffle 排序不需要考虑键的问题,可随意使用</p><p>用户可自定义排序函数 :usort&#x2F;uasort&#x2F;uksort</p><p>natsort&#x2F;natcasesort 后者的 case 指的是忽略大小写</p><p>array_multisort 的基本排序方式是: arrayA 按照键值大小排序,然后其他 array 都按照 arrayA 的调整策略跟着调整</p><p>参考:<a href="https://www.php.net/manual/zh/array.sorting.php">https://www.php.net/manual/zh/array.sorting.php</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github-hexo 两小时快速搭建个人博客网站</title>
    <link href="/2021/03/15/github-hexo%20%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2021/03/15/github-hexo%20%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>今天用 2 个小时的时间完成了 Hexo 个人博客的最基本搭建，因此博客的第一篇文章就是与此有关。</p><p>此博客的搭建使用的是 CSDN 上看到的一篇教程：</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304&#x2F;article&#x2F;details&#x2F;82729029</a></p><p>该教程名副其实，或许可以称得上“史上最全”，分为三个部分：</p><p>第一部分：hexo 的初级搭建还有部署到 github page 上，以及个人域名的绑定。</p><p>第二部分：hexo 的基本配置，更换主题，实现多终端工作，以及在 coding page 部署实现国内外分流</p><p>第三部分：hexo 添加各种功能，包括搜索的 SEO，阅读量统计，访问量统计和评论系统等。</p><p>此博客部署完成后，如你所见，使用的 github 给定域名，暂未设置个人域名。然后对网站的语言、标题、风格主题等进行了设置。其他扩展功能暂未上线，可以满足最基本的需要。</p><p>以下是 Hexo 搭建步骤，点击教程做起来吧，你也可以轻松拥有自己的网站。</p><ol><li>安装 Git</li><li>安装 Node.js</li><li>安装 Hexo</li><li>GitHub 创建个人仓库</li><li>生成 SSH 添加到 GitHub</li><li>将 hexo 部署到 GitHub</li><li>设置个人域名</li><li>发布文章</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>github, Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《心流：最优体验心理学》：一本提高幸福感和效率的行动指南</title>
    <link href="/2021/02/15/%E5%BF%83%E6%B5%81%EF%BC%9A%E6%9C%80%E4%BC%98%E4%BD%93%E9%AA%8C%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <url>/2021/02/15/%E5%BF%83%E6%B5%81%EF%BC%9A%E6%9C%80%E4%BC%98%E4%BD%93%E9%AA%8C%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywlj8d8lj30u00mfjuy.jpg" alt="《心流》中英文版本"></p><p>“心流”是指我们在做某件事时，那种全神贯注、投入忘我的状态——这种状态下，你甚至感受不到时间的存在，在这件事情完成之后我们会有一种充满能量并且非常满足的额感受，其实很多时候我们在做自己非常喜欢，有挑战并且擅长的事情的时候，就很容易体验到心流，比如阅读、演奏乐器、瑜伽、跑步、游泳，还有工作的时候。</p><p>关于“心流”概念的流行，记得2015年知乎上已存在大批相关引用。前面这段话基本上就是很多人对心流的理解，但心流不只包括这些。</p><p>两千三百多年前，亚里士多德就提出，人们无一例外地在追求幸福，然而，几个世纪过去了，工业和科技的发达，金钱、物质、权利……种种，真的让人们幸福了吗？人类不满的根源在哪里，米哈利认为最重要的原因是自我内在的失序（disorder）。<strong>著名心理学家、积极心理学奠基人米哈里·契克森米哈赖（Mihaly Csikszentmihalyi）</strong> 用这本书系统阐述了心流的理论，进入心流的条件，从日常生活、休闲娱乐、工作、人际关系等各方面，分析如何获得最优体验。</p><p>英文版初读于2017年，是我读的一本英文书，当时受限知识经验、有许多没有读懂的地方。这次花一下午读完重点篇章，兴之所至双语对照，饶有趣味。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywuc3ka8j30u00mi7aa.jpg" alt="对照阅读"></p><p>下面介绍这本书给我最有启发的三个部分：</p><h3 id="一个核心概念：构成心流体验的8要素"><a href="#一个核心概念：构成心流体验的8要素" class="headerlink" title="一个核心概念：构成心流体验的8要素"></a>一个核心概念：构成心流体验的8要素</h3><p>（第3章第2节）</p><p><span style="border-bottom:2px dash red;">The Elements of Enjoyment <span>是心流理论的核心之一，分为下面8个方面：</p><h4 id="a-challenging-activity-that-requires-skills-具备挑战性的活动"><a href="#a-challenging-activity-that-requires-skills-具备挑战性的活动" class="headerlink" title="a challenging activity that requires skills 具备挑战性的活动"></a>a challenging activity that requires skills 具备挑战性的活动</h4><p>每个人都有一套填补生活中的无聊空隙，或在焦虑来袭时保持平衡的特定方法，目的无非是通过有规律的活行动，把意识规范地更加有秩序。这些活动是一种“小型心流”，可以帮助我们度过日常生活中的低潮。</p><h4 id="the-merging-of-action-and-awareness-知行合一"><a href="#the-merging-of-action-and-awareness-知行合一" class="headerlink" title="the merging of action and awareness 知行合一"></a>the merging of action and awareness 知行合一</h4><h4 id="clear-goals-and-feedback-明确目标与即时反馈"><a href="#clear-goals-and-feedback-明确目标与即时反馈" class="headerlink" title="clear goals and feedback 明确目标与即时反馈"></a>clear goals and feedback 明确目标与即时反馈</h4><h4 id="concentration-on-the-task-at-hand-全神贯注于手头的任务"><a href="#concentration-on-the-task-at-hand-全神贯注于手头的任务" class="headerlink" title="concentration on the task at hand 全神贯注于手头的任务"></a>concentration on the task at hand 全神贯注于手头的任务</h4><h4 id="the-paradox-of-control-掌控自如"><a href="#the-paradox-of-control-掌控自如" class="headerlink" title="the paradox of control 掌控自如"></a>the paradox of control 掌控自如</h4><p>冒险专家的乐趣并非来自危险本身，而是来自他们使危险降至最低的能力。真正令他们乐此不疲的，不是追逐危险的病态悚栗，而是一种有办法控制潜在危险的感觉。</p><h4 id="the-loss-of-self-consciousness-浑然忘我"><a href="#the-loss-of-self-consciousness-浑然忘我" class="headerlink" title="the loss of self-consciousness 浑然忘我"></a>the loss of self-consciousness 浑然忘我</h4><p>becoming one flesh ，翻译成了“合一”<br>自我意识消失，并不代表自我随之消失，甚至意识依然存在，只不过它不再感觉到自我而已。实际的情况是：我们用以代表自己的资讯，也就是自我的观念，隐遁到知觉之外。暂时忘我，似乎是件很愉快的事情，不在一心一意地想着自己，才有机会扩充对自我的概念。消除自我意识可以带来自我超越，产生一种自我疆界向外扩展的感觉。</p><h4 id="the-transformantion-of-time-时间感的异常"><a href="#the-transformantion-of-time-时间感的异常" class="headerlink" title="the transformantion of time 时间感的异常"></a>the transformantion of time 时间感的异常</h4><h3 id="一个高频词语：autotelic"><a href="#一个高频词语：autotelic" class="headerlink" title="一个高频词语：autotelic"></a>一个高频词语：autotelic</h3><p>这个单词来源于希腊，auto 意思是 self，telos 意思是 goals，网络词典解释为<br><span style="border-bottom:2px dash red;">autotelic ：(of an activity or a creative work) having an end or purpose in itself.</span></p><p>也就是那种做一件事不追求未来的报酬，做这件事本身就是最大的回馈<span style="border-bottom:2px dash red;">It refers to a self-contain activity, one that is done not with the expectation of some future benefit, but simply because the doing itself is the reward.</span></p><p>原书中涉及到 autotelic 的有三种情况：</p><ul><li>the autotelic experience</li><li>the autotelic personality</li><li>the autotelic family context</li></ul><h4 id="the-autotelic-experience-目标不假外求（第3章第3节）"><a href="#the-autotelic-experience-目标不假外求（第3章第3节）" class="headerlink" title="the autotelic experience 目标不假外求（第3章第3节）"></a>the autotelic experience 目标不假外求（第3章第3节）</h4><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywm96w58j30u0146qb5.jpg" alt="目标不假外求"></p><p>自成目标是最优体验的一大特色，如果一个活动含有一定比例的自成目标，就更有可能进入心流状态。</p><p>“这两种情形不分轩轾”的用英语怎么说呢：what transpires in the two situations is ostensibly identical</p><h4 id="autotelic-personality-自得其乐的性格（第4章第3节）"><a href="#autotelic-personality-自得其乐的性格（第4章第3节）" class="headerlink" title="autotelic personality 自得其乐的性格（第4章第3节）"></a>autotelic personality 自得其乐的性格（第4章第3节）</h4><p>自得其乐的性格指的是能轻易控制意识，比较容易体验心流。米哈利由此分析了阻碍享受这种快乐的两种心理障碍：</p><p><strong>注意力失调（attentional disorder）与过度包摄刺激（stimulus overinclusion）：精神能量飘忽不定，阻碍心流产生</strong></p><p><strong>VS</strong></p><p><strong>过分的自我意识（excessive self-conscious）与以自我为中心：注意力狭隘，缺乏弹性</strong></p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywnp56xcj30u00mfdli.jpg" alt="自得其乐的性格1"></p><p><strong>接下来引入了社会病理学（social pathology）中的“失范”（anomie）与“疏离”（alienation）</strong>。失范指的是社会的行为规范被扰乱，当什么可以做什么、什么不可以做互相混淆时，靠社会规则建立意识秩序的人就会感到焦虑，行为反复无常没有意义。疏离，个人觉得就是哲学上的“异化”，人们被社会体制逼迫而不得不做一些跟自己目标相悖的事情。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywnyhgicj30u00mf43r.jpg" alt="自得其乐的性格2"></p><p>社会处于失范状态时，一件事是否值得投注精神能量就变得不清楚，很难产生心流；为疏离、异化所苦时，个人没办法把精神能量投注于自己真正想要追求的目标上。</p><p>仔细想想，这两种阻碍心流产生的社会因素，与上面说的两种个人心理障碍互相呼应。失范对应着精神能量无法聚焦，注意力涣散；疏离或异化，则是丧失目的感与自我价值感。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywo3to3aj30u00mf79y.jpg" alt="自得其乐的性格3"></p><h4 id="autotelic-family-context-自成目标的家庭环境（第4章第3节）"><a href="#autotelic-family-context-自成目标的家庭环境（第4章第3节）" class="headerlink" title="autotelic family context 自成目标的家庭环境（第4章第3节）"></a>autotelic family context 自成目标的家庭环境（第4章第3节）</h4><p>the effects of the family on the autotelic personality这一小节探讨了 前面所说 自得其乐的性格是如何在家庭环境中培养起来的。</p><p>芝加哥大学的实验发现，具备以下5个特点的家庭环境非常有助于产生最优体验：</p><ul><li>清晰：青少年知道父母对自己的期望，在家人互动中，目标和反馈都很清晰</li><li>重视：孩子觉得父母读他们目前所做的事情、他们具体的感受与体验都很有兴趣</li><li>选择：孩子觉得自己有很多选择，包括不听父母的话，只是他们得准备好自己承担后果</li><li>投入：孩子有足够的信心，全心全意去做他感兴趣的事情</li><li>挑战：父母为孩子安排复杂渐进的行动机会</li></ul><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywq4wtipj30u00mftdy.jpg" alt="自成目标的家庭环境1"></p><p>可以看出，这5大特点与构成心流的8个要素有诸多共通之处。用一句话概括就是——家庭生活充满了秩序。如果孩子在秩序不佳的环境里，大部分能量浪费在了争吵、压抑和对峙中，努力保护脆弱的自我不被吞噬，精神能量被极大的耗尽，哪里分的出来照顾自己内心的成长呢。</p><p>如何培养自己自得其乐的性格呢？哲学家罗素这么说：</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywqp6uzyj30u00t879c.jpg" alt="自成目标的家庭环境2"></p><p>一般分析进入心流的条件时，会提到掌握的技能和完成任务的复杂度，这固然是一个方面。不过 the autotelic experience 和 the autotelic personality 为问题提供了一个全新的角度，那就是内在动机与自身可能存在的心理障碍。</p><p>心流体验8要素属于理论层面，autotelic 三观点更具实践和指导意义。本书我精读前4章，泛读剩余章节，全书有不少闪耀着智慧光芒的句子，摘录如下。</p><h3 id="有启发性的全书金句记录："><a href="#有启发性的全书金句记录：" class="headerlink" title="有启发性的全书金句记录："></a>有启发性的全书金句记录：</h3><ul><li><p>有些人学会了有效运用注意力这笔无价的资源，也有人弃置不用。控制意识最明显的指标就是能随心所欲的集中注意力，不因任何事情而分心。若能做到这一点，就能在日常生活中找到乐趣。</p></li><li><p>我们用以描述人格特征的字眼——诸如内外向、成就不凡、偏执狂，其实指的都是一个人建构注意力的模式。注意力是种“精神能量”，受我们控制、随我们使用，也是改善体验品质的最重要的工具。</p></li><li><p>自我的内在秩序收到打扰时，与个人目标相冲突的资讯侵入意识后，视目标的重要性和威胁的而大小而定，某些程度的注意力必须腾出来消除危机，用于处理其他事务的注意力就相对减少了。</p></li></ul><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywqvipbmj30u018xk5g.jpg" alt="原版"></p><ul><li><p>其实战斗中对抗的不是自己，而是使意识失序的精神熵。</p></li><li><p>享乐与乐趣的区别：享乐是高水准生活的一环，属于恢复“均衡”的体验，在肉体需求引起精神熵以后，重整意识的秩序。但是不能带动心灵的成长，也无法增加自我的复杂性，享乐有助于维持意识的秩序，却无法在意识中创造新秩序。</p></li><li><p>开始时靠目标证明努力的必要，到后来却变成靠努力证明目标的重要。</p></li><li><p>“我在人生旅程的中途，发现自己置身于幽暗的森林，完全不认识路。”但丁《神曲》</p></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果你是心理学爱好者，这本书是理解积极心理学领域不可或缺的素材，如果你是大众读者，它更是一本提升幸福感和效率的行动指南。</p><p>最后附上本书目录，供君一览。有人吐槽360页的书，序言占据了60页，不过郑也夫的序言《自造内心秩序之途》，非常值得一看噢。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywwce3cnj30rb0rvtb1.jpg" alt="目录1"><br><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywr7itrmj30u00mfad4.jpg" alt="目录2"><br><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywrdkusnj30u00mfju2.jpg" alt="目录3"></p>]]></content>
    
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：抓取B站高分番剧、视频弹幕图云</title>
    <link href="/2020/08/02/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96B%E7%AB%99%E9%AB%98%E5%88%86%E7%95%AA%E5%89%A7%E3%80%81%E8%A7%86%E9%A2%91%E5%BC%B9%E5%B9%95%E5%9B%BE%E4%BA%91/"/>
    <url>/2020/08/02/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96B%E7%AB%99%E9%AB%98%E5%88%86%E7%95%AA%E5%89%A7%E3%80%81%E8%A7%86%E9%A2%91%E5%BC%B9%E5%B9%95%E5%9B%BE%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<h1 id="1-抓取高分番剧"><a href="#1-抓取高分番剧" class="headerlink" title="1.抓取高分番剧"></a>1.抓取高分番剧</h1><h2 id="原始网页"><a href="#原始网页" class="headerlink" title="原始网页"></a>原始网页</h2><p><img src="https://uploader.shimo.im/f/GbrF2IqozjV1j7v0.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="番剧列表页"></p><p><a href="https://www.bilibili.com/anime/index/#season_version=-1&area=-1&is_finish=-1&copyright=-1&season_status=-1&season_month=-1&year=-1&style_id=-1&order=4&st=1&sort=0&page=1">https://www.bilibili.com/anime/index/#season_version&#x3D;-1&amp;area&#x3D;-1&amp;is_finish&#x3D;-1&amp;copyright&#x3D;-1&amp;season_status&#x3D;-1&amp;season_month&#x3D;-1&amp;year&#x3D;-1&amp;style_id&#x3D;-1&amp;order&#x3D;4&amp;st&#x3D;1&amp;sort&#x3D;0&amp;page&#x3D;1</a></p><h2 id="python-爬虫代码（储存到数据库）"><a href="#python-爬虫代码（储存到数据库）" class="headerlink" title="python 爬虫代码（储存到数据库）"></a>python 爬虫代码（储存到数据库）</h2><h3 id="主文件-lt-niche-gems-py-gt"><a href="#主文件-lt-niche-gems-py-gt" class="headerlink" title="主文件 &lt;niche_gems.py&gt;"></a>主文件 &lt;niche_gems.py&gt;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>from bs4 import BeautifulSoup<br>import json<br>import time<br>def getReviewTimes(media_link):<br>    res = requests.get(media_link)<br>    soup = BeautifulSoup(res.text, &#x27;html.parser&#x27;)<br>    review_times = soup.find_all(&#x27;div&#x27;, class_=&#x27;media-info-review-times&#x27;)<br>    for i in review_times:<br>        review_time = i.text<br>    return review_time<br>def getAnime(url):<br>    res = requests.get(url)<br>    graded_data = json.loads(res.text)<br>    animes_list = graded_data[&#x27;data&#x27;][&#x27;list&#x27;]<br>    media_ids = []<br>    media_links = []<br>    m_orders = []<br>    titles = []<br>    review_times = []<br>    for each in animes_list:<br>        media_id = each[&#x27;media_id&#x27;]<br>        media_ids.append(media_id)<br>        media_link = f&#x27;https://www.bilibili.com/bangumi/media/md&#123;media_id&#125;&#x27;<br>        review_time = getReviewTimes(media_link)<br>        review_times.append(review_time)<br>        media_links.append(media_link)<br>        m_order = each[&#x27;order&#x27;].strip()<br>        m_orders.append(m_order)<br>        titles.append(each[&#x27;title&#x27;])<br>    animes_matrix = [media_ids, m_orders, titles, review_times, media_links]<br>    animes_result = list(zip(*animes_matrix))<br>    return animes_result<br></code></pre></td></tr></table></figure><h3 id="按照评分-by-score"><a href="#按照评分-by-score" class="headerlink" title="按照评分 by score"></a>按照评分 by score</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>import niche_gems<br>import sqlite3<br>import csv<br>import time<br>conn = sqlite3.connect(&#x27;anime.db&#x27;)<br>c = conn.cursor()<br>def createTable():<br>    c.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS animeByScore(<br>        media_id INTEGER PRIMARY KEY,<br>        m_order REAL,<br>        title TEXT,<br>        review_time INTEGER,<br>        media_link TEXT)&quot;&quot;&quot;)<br>def main():<br>    createTable()<br>    for i in range(1, 90):<br>        print(f&#x27;page &#123;i&#125; scraping...&#x27;)<br>        url_score = f&#x27;https://api.bilibili.com/pgc/season/index/result?season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;order=4&amp;st=1&amp;sort=0&amp;page=&#123;i&#125;&amp;season_type=1&amp;pagesize=20&amp;type=1&#x27;<br>        time.sleep(1)<br>        animes_results_by_score = []<br>        animes_result_by_score = niche_gems.getAnime(url_score)<br>        animes_results_by_score.extend(animes_result_by_score)<br>        c.executemany(&#x27;INSERT OR IGNORE INTO animeByScore VALUES(?,?,?,?,?)&#x27;,<br>                      animes_results_by_score)<br>        conn.commit()<br>        print(f&#x27;page &#123;i&#125; animeByScore insert successfully...&#x27;)<br>        print(f&#x27;page &#123;i&#125; done...&#x27;)<br>    c.close()<br>    conn.close()<br>    print(&#x27;执行完毕，数据库已关闭！&#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="按照播放量-by-play-count"><a href="#按照播放量-by-play-count" class="headerlink" title="按照播放量 by play count"></a>按照播放量 by play count</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plain">import niche_gems<br>import sqlite3<br>conn = sqlite3.connect(&#x27;anime.db&#x27;)<br>c = conn.cursor()<br>def createTable():<br>    c.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS animeByPlaycount(<br>        media_id int primary key，<br>        order int,<br>        title text,<br>        review_time int,<br>        media_link text<br>    )&quot;&quot;&quot;)<br>def query_and_output():<br>    c.execute(&#x27;SELECT * from animeByPlaycount SORT BY order&#x27;)<br>    data = c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#x27;/Users/yao/www/python//bilibili/anime/animeByPlaycount.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for row in data:<br>            file.write()<br>def main():<br>    url_play_count = &#x27;https://api.bilibili.com/pgc/season/index/result?season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;order=2&amp;st=1&amp;sort=0&amp;page=1&amp;season_type=1&amp;pagesize=20&amp;type=1&#x27;<br>    animes_result_by_playcount = niche_gems.getAnime(url_play_count)<br>    createTable()<br>    c.executemany(&#x27;INSERT OR IGNORE INTO animeByPlaycount&#x27;)<br>    conn.commit()<br>    print(&#x27;animeByPlaycount insert successfully...&#x27;)<br>    query_and_output()<br>    print(&#x27;animeByPlaycount file saved successfully...&#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h2><p><img src="https://uploader.shimo.im/f/W9vxXsoi1Nw4XG2b.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="animate.db/animateByScore"></p><h2 id="从数据库中取出并展示在-html-中"><a href="#从数据库中取出并展示在-html-中" class="headerlink" title="从数据库中取出并展示在 html 中"></a>从数据库中取出并展示在 html 中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs plain">import sqlite3<br>import csv<br>import pandas as pd<br>from prettytable import PrettyTable<br>conn = sqlite3.connect(&#x27;anime.db&#x27;)<br>c = conn.cursor()<br>c.execute(&#x27;SELECT * from animeByScore WHERE m_order &gt; 9.7&#x27;)<br>data = c.fetchall()<br>c.close()<br>conn.close()<br># file_path = &#x27;/Users/yao/www/python/bilibili/anime/animeByScore.csv&#x27;<br># with open(file_path, &#x27;w&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8&#x27;) as f:<br>#     fieldnames = [&#x27;anime_id&#x27;, &#x27;m_order&#x27;, &#x27;title&#x27;, &#x27;review_time&#x27;, &#x27;anime_link&#x27;]<br>#     f_csv = csv.DictWriter(f, fieldnames=fieldnames)<br>#     f_csv.writeheader()<br>#     for row in data:<br>#         f_csv.writerow(<br>#             &#123;<br>#                 &#x27;anime_id&#x27;: row[0],<br>#                 &#x27;m_order&#x27;: row[1],<br>#                 &#x27;title&#x27;: row[2],<br>#                 &#x27;review_time&#x27;: row[3],<br>#                 &#x27;anime_link&#x27;: row[4]<br>#             &#125;<br>#         )<br>html_uri = &#x27;/Users/yao/www/python/bilibili/anime/animeByScore.html&#x27;<br>record_list = data<br>title = &quot;评分列表&quot;<br>tbody_content = &quot;&quot;<br>for record in record_list:<br>    tbody_content = tbody_content + f&quot;&quot;&quot;<br>     &lt;tr&gt;<br>        &lt;td&gt;&#123;record[0]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[1]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[2]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[3]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[4]&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &quot;&quot;&quot;<br>content = f&quot;&quot;&quot;<br>&lt;table&gt;<br>&lt;thead&gt;<br>    &lt;th&gt;anime_id&lt;/th&gt;<br>    &lt;th&gt;m_order&lt;/th&gt;<br>    &lt;th&gt;title&lt;/th&gt;<br>    &lt;th&gt;review_time&lt;/th&gt;<br>    &lt;th&gt;anime_link&lt;/th&gt;<br>&lt;/thead&gt;<br>&lt;tbody&gt;<br>    &#123;tbody_content&#125;<br>&lt;/tbody&gt;<br>&lt;/table&gt;<br>&quot;&quot;&quot;<br>html = f&quot;&quot;&quot;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;&#123;title&#125;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&#123;content&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&quot;&quot;&quot;<br>with open(html_uri, &#x27;w&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8&#x27;) as f:<br>    f.write(html)<br>print(&#x27;csv file saved (＾－＾)V&#x27;)<br></code></pre></td></tr></table></figure><h2 id="html-展示效果"><a href="#html-展示效果" class="headerlink" title="html 展示效果"></a>html 展示效果</h2><p><img src="https://uploader.shimo.im/f/7piCCurNzIDREWHa.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="生成的html"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="小技巧：如何把-CSV-转换成-HTML"><a href="#小技巧：如何把-CSV-转换成-HTML" class="headerlink" title="小技巧：如何把 CSV 转换成 HTML"></a>小技巧：如何把 CSV 转换成 HTML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">from prettytable import PrettyTable<br>file_path = &#x27;/Users/yao/www/python/bilibili/anime/animeByScore.csv&#x27;<br>csv_file = open(file_path, &#x27;r&#x27;)<br>csv_file = csv_file.readlines()<br>tb = PrettyTable(csv_file[0].split(&#x27;,&#x27;))<br># 这一句也可以这么写<br># table = PrettyTable()<br># table.field_names=csv_file[0].split(&#x27;,&#x27;)<br>for row in range(1, 100):<br>    csv_file[row] = csv_file[row].split(&#x27;,&#x27;)<br>    tb.add_row(csv_file[row])<br>html_path = &#x27;/Users/yao/www/python/bilibili/anime/html_file.html&#x27;<br>html_file = open(html_path, &#x27;w&#x27;)<br>html_code = tb.get_html_string()<br>html_file = html_file.write(html_code)<br></code></pre></td></tr></table></figure><h1 id="2-抓取视频弹幕并制作图云"><a href="#2-抓取视频弹幕并制作图云" class="headerlink" title="2.抓取视频弹幕并制作图云"></a>2.抓取视频弹幕并制作图云</h1><h2 id="python-爬虫弹幕"><a href="#python-爬虫弹幕" class="headerlink" title="python 爬虫弹幕"></a>python 爬虫弹幕</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>import json<br>import re<br><br>def get_cid(url):<br>    bvid = url.split(&#x27;/&#x27;)[4].split(&#x27;?&#x27;)[0]<br>    danmu_page_link = f&#x27;https://api.bilibili.com/x/player/pagelist?bvid=&#123;bvid&#125;&amp;jsonp=jsonp&#x27;<br>    res = requests.get(danmu_page_link)<br>    cid_page = json.loads(res.text)<br>    cid = cid_page[&#x27;data&#x27;][0][&#x27;cid&#x27;]<br>    # 获取cid时要注意视频是不是多p,自己做小工具时用其中1p就可以<br>    # cids = res_dict[&#x27;data&#x27;][&#x27;cid&#x27;]<br>    # part_names = res_dict[&#x27;data&#x27;][&#x27;part&#x27;]<br>    return cid<br>def get_danmu(cid):<br>    danmu_url = f&#x27;https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;cid&#125;&#x27;<br>    res = requests.get(danmu_url)<br>    res_xml = res.content.decode(&#x27;utf-8&#x27;)<br>    pattern = re.compile(&#x27;&lt;d.*?&gt;(.*?)&lt;/d&gt;&#x27;)<br>    danmu_list = pattern.findall(res_xml)<br>    return danmu_list<br>def save_file(danmu_list):<br>    file_path = &#x27;/Users/yao/www/python/bilibili/video/danmu_file.txt&#x27;<br>    with open(file_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for item in danmu_list:<br>            file.write(item)<br>            file.write(&#x27;\n&#x27;)<br>def main():<br>    source = &#x27;https://www.bilibili.com/video/BV1xs411Q799?p=1&#x27;<br>    cid = get_cid(source)<br>    danmu_list = get_danmu(cid)<br>    save_file(danmu_list)<br>    print(&#x27;file saved successfully...&#x27;)<br>if __name__ == &#x27;__main__&#x27;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="得到的弹幕文本"><a href="#得到的弹幕文本" class="headerlink" title="得到的弹幕文本"></a>得到的弹幕文本</h2><p><img src="https://uploader.shimo.im/f/bmL7w8bGEIt6pI8V.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="弹幕文本"></p><h3 id="弹幕文本图云分析"><a href="#弹幕文本图云分析" class="headerlink" title="弹幕文本图云分析"></a>弹幕文本图云分析</h3><h3 id="分词代码"><a href="#分词代码" class="headerlink" title="分词代码"></a>分词代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">import jieba<br>from wordcloud import WordCloud<br>file_path = &#x27;/Users/yao/www/python/bilibili/video/danmu_file.txt&#x27;<br>with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>    text_str = file.read()<br>seg_list = jieba.cut(text_str)<br>word_str = &quot; &quot;.join(seg_list)<br>font_path = &quot;/System/Library/Fonts/PingFang.ttc&quot;<br>wc_settintg = &#123;<br>    &#x27;font_path&#x27;: &#x27;/System/Library/Fonts/PingFang.ttc&#x27;,<br>    &#x27;background_color&#x27;: &#x27;white&#x27;,<br>    &#x27;width&#x27;: 1000,<br>    &#x27;height&#x27;: 860,<br>    &#x27;margin&#x27;: 2,<br>&#125;<br>wc = WordCloud(**wc_settintg).generate(word_str)<br>wc.to_file(&#x27;/Users/yao/www/python/bilibili/video/xiaojiayu_python_p1.png&#x27;)<br>print(&#x27;wordcloud done&#x27;)<br></code></pre></td></tr></table></figure><p>参考视频：<a href="https://www.bilibili.com/video/BV1g7411e7m4">https://www.bilibili.com/video/BV1g7411e7m4</a></p><h3 id="得到的图云"><a href="#得到的图云" class="headerlink" title="得到的图云"></a>得到的图云</h3><p>（B 站的好多弹幕真是越来越不能看了……）</p><p><img src="https://uploader.shimo.im/f/DvLCgWmCYqB4RbJl.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><h3 id="遇到的问题：生成的图片-中文乱码"><a href="#遇到的问题：生成的图片-中文乱码" class="headerlink" title="遇到的问题：生成的图片 中文乱码"></a>遇到的问题：生成的图片 中文乱码</h3><p>查了一下这是因为中文字体包不适配，然后发现我们用 mac 自带的苹方字体就能非常简单的搞定。做词云的时候用的 Mac，所以 Windows 的解决方法没有尝试。</p><p>本地路径是：</p><p>font_path &#x3D; “&#x2F;System&#x2F;Library&#x2F;Fonts&#x2F;PingFang.ttc”</p><p><img src="https://uploader.shimo.im/f/gnsjnKTW75l7CnJb.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="本地路径"></p><p>在电脑中查看：</p><ol><li>启动台——其他——打开字体册</li></ol><p><img src="https://uploader.shimo.im/f/IXg7PFlvLltkqEYG.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="Mac的字体册"></p><ol start="2"><li>如果你之前没有改过系统字体的话，默认选中苹方简体，右键选择在 Finder 中显示</li></ol><p><img src="https://uploader.shimo.im/f/JNHIQbkInbc4WQWN.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="选择字体"></p><p><img src="https://uploader.shimo.im/f/ReT6XWuT8VPw0dTs.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="需要的字体包"></p><p>这就是我们需要的字体包。</p><p>如果不需要其他参数的话，字体路径直接传入 WordCloud()参数就可以了。</p><p>wc &#x3D; WordCloud(font_path).generate(word_str)</p><p>词云官方文档地址：<a href="https://github.com/amueller/word_cloud">https://github.com/amueller/word_cloud</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：某用户所有微博的简单备份</title>
    <link href="/2020/07/20/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%9F%90%E7%94%A8%E6%88%B7%E6%89%80%E6%9C%89%E5%BE%AE%E5%8D%9A%E7%9A%84%E7%AE%80%E5%8D%95%E5%A4%87%E4%BB%BD/"/>
    <url>/2020/07/20/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%9F%90%E7%94%A8%E6%88%B7%E6%89%80%E6%9C%89%E5%BE%AE%E5%8D%9A%E7%9A%84%E7%AE%80%E5%8D%95%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="python-爬虫代码"><a href="#python-爬虫代码" class="headerlink" title="python 爬虫代码"></a>python 爬虫代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br># 目的：编写简易微博备份工具, 将指定微博备份为txt文本<br># 1.  学习python使用<br># 2.  学习使用python获取web页面(学习http调用/了解简单网络请求方式/使用外部库)<br># 3.  使用python抓取微博接口(了解浏览器抓包方法, http基础规范)<br># 4.  将抓取接口存入数据库中(掌握本地数据库构建存取/sql的增删改查写法)<br># 5.  从数据库中读取接口, 输出txt文本<br>import requests<br>import json<br>import time<br>import sqlite3<br>from bs4 import BeautifulSoup<br>def get_page(url):<br>    headers = &#123;<br>        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&#x27;,<br>        &#x27;referer&#x27;: &#x27;https://m.weibo.cn/u/6587600437&#x27;<br>    &#125;<br>    # target_url = &#x27;https://m.weibo.cn/u/1768825052?uid=1768825052&amp;luicode=10000011&amp;lfid=1076031768825052&#x27;<br>    res = requests.get(url, headers=headers)<br>    return res<br>def get_since_id(res):<br>    weibo_json = json.loads(res.text)<br>    since_id = int(weibo_json[&#x27;data&#x27;][&#x27;cardlistInfo&#x27;][&#x27;since_id&#x27;])<br>    return since_id<br>def get_weibo(res):<br>    weibo_json = json.loads(res.text)<br>    weibo_cards = weibo_json[&quot;data&quot;][&quot;cards&quot;]<br>    weibo_id = []<br>    weibo_time = []<br>    weibo_text = []<br>    reposts_count = []<br>    comments_count = []<br>    attitudes_count = []<br>    for each in weibo_cards:<br>        weibo_id.append(each[&quot;mblog&quot;][&quot;id&quot;])<br>        weibo_text.append(each[&quot;mblog&quot;][&quot;text&quot;])<br>        weibo_time.append(each[&#x27;mblog&#x27;][&#x27;created_at&#x27;])<br>        reposts_count.append(each[&#x27;mblog&#x27;][&#x27;reposts_count&#x27;])<br>        comments_count.append(each[&#x27;mblog&#x27;][&#x27;comments_count&#x27;])<br>        attitudes_count.append(each[&#x27;mblog&#x27;][&#x27;attitudes_count&#x27;])<br>    weibo_matrix = [weibo_id, weibo_time, weibo_text,<br>                    reposts_count, comments_count, attitudes_count]<br>    result = list(zip(*weibo_matrix))<br>    return result<br>conn = sqlite3.connect(&#x27;weibo.db&#x27;)<br>c = conn.cursor()<br>def create_table():<br>    c.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS weibo_person(<br>        weibo_id int,<br>        created_at text,<br>        weibo_text text,<br>        reposts_count int,<br>        comments_count int,<br>        attitudes_count int<br>        )&quot;&quot;&quot;)<br>def query_and_output():<br>    c.execute(&#x27;SELECT * FROM weibo_person&#x27;)<br>    data = c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#x27;/Users/yao/www/python/微博/leftchenn.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for item in data:<br>            string = f&#x27;发布时间：&#123;item[1]&#125; \n 微博内容：&#123;item[2]&#125; \n 转发数：&#123;item[3]&#125; 评论数：&#123;item[4]&#125; 转发数：&#123;item[5]&#125; \n\n\n &#x27;<br>            file.write(string)<br>def main():<br>    host = &quot;https://m.weibo.cn/u/1768825052&quot;<br>    target_url = &#x27;https://m.weibo.cn/api/container/getIndex?uid=1768825052&amp;luicode=10000011&amp;lfid=1076031768825052&amp;type=uid&amp;value=1768825052&amp;containerid=1076031768825052&#x27;<br>    res = get_page(target_url)<br>    result = get_weibo(res)<br>    since_id = get_since_id(res)<br>    for i in range(10):<br>        print(&#x27;page &#123;&#125; scraping...&#x27;.format(i))<br>        new_url = f&#x27;https://m.weibo.cn/api/container/getIndex?uid=1768825052&amp;luicode=10000011&amp;lfid=1076031768825052&amp;type=uid&amp;value=1768825052&amp;containerid=1076031768825052&amp;since_id=&#123;since_id&#125;&#x27;<br>        time.sleep(1)<br>        res = get_page(new_url)<br>        result.extend(get_weibo(res))<br>        since_id = get_since_id(res)<br>        print(&#x27;page &#123;&#125; scrap done...&#x27;.format(i))<br>    create_table()<br>    c.executemany(&#x27;INSERT INTO weibo_person VALUES(?,?,?,?,?,?)&#x27;, result)<br>    conn.commit()<br>    print(&#x27;insert successfully...&#x27;)<br>    query_and_output()<br>    print(&#x27;output successfully...&#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h3><p><img src="https://uploader.shimo.im/f/C4lQEFWbuu75xLc6.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="weibo.db/weibo_person"></p><h3 id="得到的文本"><a href="#得到的文本" class="headerlink" title="得到的文本"></a>得到的文本</h3><p><img src="https://uploader.shimo.im/f/1gkiCal2TQ1uG2ue.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="微博文本"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：抓取网易云音乐某首歌曲的热门评论</title>
    <link href="/2020/07/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%9F%90%E9%A6%96%E6%AD%8C%E6%9B%B2%E7%9A%84%E7%83%AD%E9%97%A8%E8%AF%84%E8%AE%BA/"/>
    <url>/2020/07/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%9F%90%E9%A6%96%E6%AD%8C%E6%9B%B2%E7%9A%84%E7%83%AD%E9%97%A8%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="首先，以这首歌为例："><a href="#首先，以这首歌为例：" class="headerlink" title="首先，以这首歌为例："></a>首先，以这首歌为例：</h3><p><img src="https://uploader.shimo.im/f/uRWUHpnCGtVrJUzX.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><h3 id="python-代码如下："><a href="#python-代码如下：" class="headerlink" title="python 代码如下："></a>python 代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>import json<br># import BeautifulSoup from bs4<br>def get_hotComments(res):<br>    comments_json = json.loads(res.text)<br>    hot_comments = comments_json[&#x27;hotComments&#x27;]<br>    with open(&#x27;/Users/yao/www/python/evol-love.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for each in hot_comments:<br>            file.write(each[&#x27;user&#x27;][&#x27;nickname&#x27;] + &#x27;: \n\n&#x27;)<br>            file.write(each[&#x27;content&#x27;] + &#x27;\n&#x27;)<br>            # file.write(each[&#x27;likedCount&#x27;] + &#x27;\n&#x27;)<br>            # file.write(each[&#x27;time&#x27;] + &#x27;\n&#x27;)<br>            file.write(&#x27;--❤-----------❤--\n&#x27;)<br>def get_comments(url):<br>    song_id = url.split(&#x27;=&#x27;)[1]<br>    headers = &#123;<br>        &#x27;user-agent&#x27;: &#x27;curl https://bootstrap.pypa.io/get-pip.py | python3&#x27;,<br>        &#x27;referer&#x27;: &#x27;https://music.163.com/song?id=1381290746&#x27;&#125;<br>    params = &#x27;15S1vG2hDWPcsAeXpjYIcwuRpK7nwElk3Cdy6c/3aJdbH5aBub7nWrYPxZQaMzKrhFSUo1n4nGHkCbaZAl77WSFPMYjjv6sU5Qipnqnn4QjXRH6eN1w/PcauCCUo4NDgaw/Uudad5J/zpgDY2005gC3UF+s2s/ND5tjXTU0SeDkiBg47A6b6VqhK/7E/hS9++nlvAC7QkkzCbsXZMp/jyBl5+KroeMcGAfFumxZ5pME=&#x27;<br>    encSecKey = &#x27;3f5dbdd0ec1f0a1501b88f6e04ce30ecf88192b4e3a92bd2dc1216f2ccc90898211e6347a2ab36d07f93793352ff6559fb927b7cbd337f5887d2af7b442e2dfb0b4abd83e85c6c3bb20fe2beef050db4c169531411f4e23caaa201f62609fcda4de694c8e9e759443fea2f7febf044bd9c4bcb2697519ca96dca676730059156&#x27;<br>    data = &#123;<br>        &#x27;params&#x27;: params,<br>        &#x27;encSecKey&#x27;: encSecKey<br>    &#125;<br>    target_url = &#x27;https://music.163.com/weapi/v1/resource/comments/R_SO_4_&#123;&#125;?csrf_token=55a6b8514346a9f676c8485978093b9f&#x27;.format(song_id)<br>    res = requests.post(target_url, headers=headers, data=data)<br>    # rawHTML =  &#x27;&#x27;<br>    # soup = BeautifulSoup(rawHTML)<br>    # file_name_obj = soup.select_one(&#x27;.f-ff2&#x27;)<br>    # file_name = file_name_obj.text<br>    return res<br>def main():<br>    url = input(&#x27;please input song url:&#x27;)<br>    res = get_comments(url)<br>    # title = get_title(url)<br>    get_hotComments(res)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><p>得到的txt文件如下（如有需要可进一步分析）：</p><p><img src="https://uploader.shimo.im/f/1DwdMQXCPNfJwB4s.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：抓取豆瓣电影TOP250</title>
    <link href="/2020/07/13/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/"/>
    <url>/2020/07/13/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/</url>
    
    <content type="html"><![CDATA[<p>豆瓣用户每天都在对“看过”的电影进行“很差”到“力荐”的评价，豆瓣根据每部影片看过的人数以及该影片所得的评价等综合数据，通过算法分析产生豆瓣电影 Top 250。</p><h3 id="原始网页："><a href="#原始网页：" class="headerlink" title="原始网页："></a>原始网页：</h3><p><a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p><p><img src="https://uploader.shimo.im/f/YwpUFMDrQ59YL1UA.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><h3 id="python-爬虫代码"><a href="#python-爬虫代码" class="headerlink" title="python 爬虫代码"></a>python 爬虫代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>from bs4 import BeautifulSoup<br>import sqlite3<br>import time<br>def open_url(url):<br>    headers = &#123;<br>        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&#x27;,<br>        &quot;Cookie&quot;: &#x27;bid=U5nCZ8p0dQU; gr_user_id=cb5f0143-dc7b-4558-8ca8-645601af3a4c; _vwo_uuid_v2=D8FFB9019ECC277DA812225E3B2109D06|9ff6373ff5de826c9b373e0499c2fd95; __gads=ID=fca53c413c37e6b3:T=1583725810:S=ALNI_Ma0O2oj2sLthssNt4FqeaZYp7EL_Q; ll=&quot;108288&quot;; douban-fav-remind=1; __yadk_uid=UtObTTkrwA7qukDAgdd2INMv9LH52PEA; viewed=&quot;26829016_26264642_26277694_4315606_1955110_1400498_4065258_1094802_26939853_12411215&quot;; __utmc=30149280; __utmc=223695111; dbcl2=&quot;33304907:UiHXJr1eiGI&quot;; ck=PYWO; _pk_ref.100001.4cf6=%5B%22%22%2C%22%22%2C1591627160%2C%22https%3A%2F%2Faccounts.douban.com%2Fpassport%2Flogin%3Fredir%3Dhttps%253A%252F%252Fmovie.douban.com%252Ftop250%22%5D; _pk_ses.100001.4cf6=*; __utma=30149280.542734861.1583725808.1591614666.1591627161.51; __utmb=30149280.0.10.1591627161; __utmz=30149280.1591627161.51.46.utmcsr=accounts.douban.com|utmccn=(referral)|utmcmd=referral|utmcct=/passport/login; __utma=223695111.1397865339.1583730183.1591614666.1591627161.10; __utmb=223695111.0.10.1591627161; __utmz=223695111.1591627161.10.8.utmcsr=accounts.douban.com|utmccn=(referral)|utmcmd=referral|utmcct=/passport/login; push_noty_num=0; push_doumail_num=0; _pk_id.100001.4cf6=6441328ab4c5f495.1583730182.10.1591627294.1591614962.&#x27;,<br>        &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;<br>    &#125;<br>    res = requests.get(url, headers=headers)<br>    return res<br>def find_moives(res):<br>    soup = BeautifulSoup(res.text, &#x27;html.parser&#x27;)<br>    # 电影名<br>    movies = []<br>    targets = soup.find_all(&#x27;div&#x27;, class_=&#x27;hd&#x27;)<br>    for each in targets:<br>        movies.append(each.a.span.text)<br>    # 评分<br>    ranks = []<br>    targets = soup.find_all(&#x27;em&#x27;)<br>    for each in targets:<br>        index = int(each.text)<br>        ranks.append(index)<br>    # 资料<br>    profiles = []<br>    targets = soup.find_all(&#x27;div&#x27;, class_=&#x27;bd&#x27;)<br>    for each in targets:<br>        try:<br>            profiles.append(each.p.text.split(&#x27;\n&#x27;)[<br>                1].strip() + each.p.text.split(&#x27;\n&#x27;)[2].strip())<br>        except:<br>            continue<br>    data_matrix = [ranks, movies, profiles]<br>    result = list(zip(*data_matrix))<br>    return result<br>def find_depth(res):<br>    soup = BeautifulSoup(res.text, &#x27;html.parser&#x27;)<br>    depth = soup.find(<br>        &#x27;span&#x27;, class_=&#x27;next&#x27;).previous_sibling.previous_sibling.text<br>    return int(depth)<br>conn = sqlite3.connect(&quot;douban_movies.db&quot;)<br>c = conn.cursor()<br>def create_table():<br>    c.execute(<br>        &quot;CREATE TABLE IF NOT EXISTS douban_movies250(item_id INT,rank INT, movie TEXT, profile TEXT)&quot;)<br>def query_and_output():<br>    c.execute(&#x27;SELECT * FROM douban_movies250&#x27;)<br>    data = c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#x27;/Users/yao/www/python/douban_movies250.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for row in data:<br>            string = f&#x27;Top &#123;row[1]&#125; : 《&#123;row[2]&#125;》，\n 简介： &#123;row[3]&#125;\n&#x27;<br>            file.write(string)<br>def main():<br>    host = &#x27;https://movie.douban.com/top250&#x27;<br>    res = open_url(host)<br>    depth = find_depth(res)<br>    result = []<br>    for i in range(depth):<br>        url = host + &#x27;/?start=&#x27; + str(25 * i)<br>        time.sleep(1)<br>        res = open_url(url)<br>        result.extend(find_moives(res))<br>    # item_id = [i for i in range(250)]<br>    # result_matrix = [item_id, result]<br>    # result = list(zip(*result_matrix))<br>    create_table()<br>    c.executemany(&#x27;INSERT INTO douban_movies250 VALUES(?,?,?,?)&#x27;, result)<br>    conn.commit()<br>    print(&#x27;insert database successfully&#x27;)<br>    query_and_output()<br>    print(&#x27;output successfully &#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="得到的文本"><a href="#得到的文本" class="headerlink" title="得到的文本"></a>得到的文本</h3><p><img src="https://uploader.shimo.im/f/ffvcAZnM2U1p7Y5e.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
