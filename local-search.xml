<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/"/>
    <url>/2021/03/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/</url>
    
    <content type="html"><![CDATA[<p>豆瓣用户每天都在对“看过”的电影进行“很差”到“力荐”的评价，豆瓣根据每部影片看过的人数以及该影片所得的评价等综合数据，通过算法分析产生豆瓣电影 Top 250。</p><h3 id="原始网页："><a href="#原始网页：" class="headerlink" title="原始网页："></a>原始网页：</h3><p><a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p><p><img src="https://uploader.shimo.im/f/YwpUFMDrQ59YL1UA.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><h3 id="python爬虫代码"><a href="#python爬虫代码" class="headerlink" title="python爬虫代码"></a>python爬虫代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>from bs4 import BeautifulSoup<br>import sqlite3<br>import time<br>def open_url(url):<br>    headers &#x3D; &#123;<br>        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.61 Safari&#x2F;537.36&#39;,<br>        &quot;Cookie&quot;: &#39;bid&#x3D;U5nCZ8p0dQU; gr_user_id&#x3D;cb5f0143-dc7b-4558-8ca8-645601af3a4c; _vwo_uuid_v2&#x3D;D8FFB9019ECC277DA812225E3B2109D06|9ff6373ff5de826c9b373e0499c2fd95; __gads&#x3D;ID&#x3D;fca53c413c37e6b3:T&#x3D;1583725810:S&#x3D;ALNI_Ma0O2oj2sLthssNt4FqeaZYp7EL_Q; ll&#x3D;&quot;108288&quot;; douban-fav-remind&#x3D;1; __yadk_uid&#x3D;UtObTTkrwA7qukDAgdd2INMv9LH52PEA; viewed&#x3D;&quot;26829016_26264642_26277694_4315606_1955110_1400498_4065258_1094802_26939853_12411215&quot;; __utmc&#x3D;30149280; __utmc&#x3D;223695111; dbcl2&#x3D;&quot;33304907:UiHXJr1eiGI&quot;; ck&#x3D;PYWO; _pk_ref.100001.4cf6&#x3D;%5B%22%22%2C%22%22%2C1591627160%2C%22https%3A%2F%2Faccounts.douban.com%2Fpassport%2Flogin%3Fredir%3Dhttps%253A%252F%252Fmovie.douban.com%252Ftop250%22%5D; _pk_ses.100001.4cf6&#x3D;*; __utma&#x3D;30149280.542734861.1583725808.1591614666.1591627161.51; __utmb&#x3D;30149280.0.10.1591627161; __utmz&#x3D;30149280.1591627161.51.46.utmcsr&#x3D;accounts.douban.com|utmccn&#x3D;(referral)|utmcmd&#x3D;referral|utmcct&#x3D;&#x2F;passport&#x2F;login; __utma&#x3D;223695111.1397865339.1583730183.1591614666.1591627161.10; __utmb&#x3D;223695111.0.10.1591627161; __utmz&#x3D;223695111.1591627161.10.8.utmcsr&#x3D;accounts.douban.com|utmccn&#x3D;(referral)|utmcmd&#x3D;referral|utmcct&#x3D;&#x2F;passport&#x2F;login; push_noty_num&#x3D;0; push_doumail_num&#x3D;0; _pk_id.100001.4cf6&#x3D;6441328ab4c5f495.1583730182.10.1591627294.1591614962.&#39;,<br>        &#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9&#39;<br>    &#125;<br>    res &#x3D; requests.get(url, headers&#x3D;headers)<br>    return res<br>def find_moives(res):<br>    soup &#x3D; BeautifulSoup(res.text, &#39;html.parser&#39;)<br>    # 电影名<br>    movies &#x3D; []<br>    targets &#x3D; soup.find_all(&#39;div&#39;, class_&#x3D;&#39;hd&#39;)<br>    for each in targets:<br>        movies.append(each.a.span.text)<br>    # 评分<br>    ranks &#x3D; []<br>    targets &#x3D; soup.find_all(&#39;em&#39;)<br>    for each in targets:<br>        index &#x3D; int(each.text)<br>        ranks.append(index)<br>    # 资料<br>    profiles &#x3D; []<br>    targets &#x3D; soup.find_all(&#39;div&#39;, class_&#x3D;&#39;bd&#39;)<br>    for each in targets:<br>        try:<br>            profiles.append(each.p.text.split(&#39;\n&#39;)[<br>                1].strip() + each.p.text.split(&#39;\n&#39;)[2].strip())<br>        except:<br>            continue<br>    data_matrix &#x3D; [ranks, movies, profiles]<br>    result &#x3D; list(zip(*data_matrix))<br>    return result<br>def find_depth(res):<br>    soup &#x3D; BeautifulSoup(res.text, &#39;html.parser&#39;)<br>    depth &#x3D; soup.find(<br>        &#39;span&#39;, class_&#x3D;&#39;next&#39;).previous_sibling.previous_sibling.text<br>    return int(depth)<br>conn &#x3D; sqlite3.connect(&quot;douban_movies.db&quot;)<br>c &#x3D; conn.cursor()<br>def create_table():<br>    c.execute(<br>        &quot;CREATE TABLE IF NOT EXISTS douban_movies250(item_id INT,rank INT, movie TEXT, profile TEXT)&quot;)<br>def query_and_output():<br>    c.execute(&#39;SELECT * FROM douban_movies250&#39;)<br>    data &#x3D; c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#39;&#x2F;Users&#x2F;yao&#x2F;www&#x2F;python&#x2F;douban_movies250.txt&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as file:<br>        for row in data:<br>            string &#x3D; f&#39;Top &#123;row[1]&#125; : 《&#123;row[2]&#125;》，\n 简介： &#123;row[3]&#125;\n&#39;<br>            file.write(string)<br>def main():<br>    host &#x3D; &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250&#39;<br>    res &#x3D; open_url(host)<br>    depth &#x3D; find_depth(res)<br>    result &#x3D; []<br>    for i in range(depth):<br>        url &#x3D; host + &#39;&#x2F;?start&#x3D;&#39; + str(25 * i)<br>        time.sleep(1)<br>        res &#x3D; open_url(url)<br>        result.extend(find_moives(res))<br>    # item_id &#x3D; [i for i in range(250)]<br>    # result_matrix &#x3D; [item_id, result]<br>    # result &#x3D; list(zip(*result_matrix))<br>    create_table()<br>    c.executemany(&#39;INSERT INTO douban_movies250 VALUES(?,?,?,?)&#39;, result)<br>    conn.commit()<br>    print(&#39;insert database successfully&#39;)<br>    query_and_output()<br>    print(&#39;output successfully &#39;)<br>if __name__ &#x3D;&#x3D; &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="得到的文本"><a href="#得到的文本" class="headerlink" title="得到的文本"></a>得到的文本</h3><p><img src="https://uploader.shimo.im/f/ffvcAZnM2U1p7Y5e.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%9F%90%E9%A6%96%E6%AD%8C%E6%9B%B2%E7%9A%84%E7%83%AD%E9%97%A8%E8%AF%84%E8%AE%BA/"/>
    <url>/2021/03/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%9F%90%E9%A6%96%E6%AD%8C%E6%9B%B2%E7%9A%84%E7%83%AD%E9%97%A8%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="首先，以这首歌为例："><a href="#首先，以这首歌为例：" class="headerlink" title="首先，以这首歌为例："></a>首先，以这首歌为例：</h3><p><img src="https://uploader.shimo.im/f/uRWUHpnCGtVrJUzX.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><h3 id="python-代码如下："><a href="#python-代码如下：" class="headerlink" title="python 代码如下："></a>python 代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>import json<br># import BeautifulSoup from bs4<br>def get_hotComments(res):<br>    comments_json &#x3D; json.loads(res.text)<br>    hot_comments &#x3D; comments_json[&#39;hotComments&#39;]<br>    with open(&#39;&#x2F;Users&#x2F;yao&#x2F;www&#x2F;python&#x2F;evol-love.txt&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as file:<br>        for each in hot_comments:<br>            file.write(each[&#39;user&#39;][&#39;nickname&#39;] + &#39;: \n\n&#39;)<br>            file.write(each[&#39;content&#39;] + &#39;\n&#39;)<br>            # file.write(each[&#39;likedCount&#39;] + &#39;\n&#39;)<br>            # file.write(each[&#39;time&#39;] + &#39;\n&#39;)<br>            file.write(&#39;--❤-----------❤--\n&#39;)<br>def get_comments(url):<br>    song_id &#x3D; url.split(&#39;&#x3D;&#39;)[1]<br>    headers &#x3D; &#123;<br>        &#39;user-agent&#39;: &#39;curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py | python3&#39;,<br>        &#39;referer&#39;: &#39;https:&#x2F;&#x2F;music.163.com&#x2F;song?id&#x3D;1381290746&#39;&#125;<br>    params &#x3D; &#39;15S1vG2hDWPcsAeXpjYIcwuRpK7nwElk3Cdy6c&#x2F;3aJdbH5aBub7nWrYPxZQaMzKrhFSUo1n4nGHkCbaZAl77WSFPMYjjv6sU5Qipnqnn4QjXRH6eN1w&#x2F;PcauCCUo4NDgaw&#x2F;Uudad5J&#x2F;zpgDY2005gC3UF+s2s&#x2F;ND5tjXTU0SeDkiBg47A6b6VqhK&#x2F;7E&#x2F;hS9++nlvAC7QkkzCbsXZMp&#x2F;jyBl5+KroeMcGAfFumxZ5pME&#x3D;&#39;<br>    encSecKey &#x3D; &#39;3f5dbdd0ec1f0a1501b88f6e04ce30ecf88192b4e3a92bd2dc1216f2ccc90898211e6347a2ab36d07f93793352ff6559fb927b7cbd337f5887d2af7b442e2dfb0b4abd83e85c6c3bb20fe2beef050db4c169531411f4e23caaa201f62609fcda4de694c8e9e759443fea2f7febf044bd9c4bcb2697519ca96dca676730059156&#39;<br>    data &#x3D; &#123;<br>        &#39;params&#39;: params,<br>        &#39;encSecKey&#39;: encSecKey<br>    &#125;<br>    target_url &#x3D; &#39;https:&#x2F;&#x2F;music.163.com&#x2F;weapi&#x2F;v1&#x2F;resource&#x2F;comments&#x2F;R_SO_4_&#123;&#125;?csrf_token&#x3D;55a6b8514346a9f676c8485978093b9f&#39;.format(song_id)<br>    res &#x3D; requests.post(target_url, headers&#x3D;headers, data&#x3D;data)<br>    # rawHTML &#x3D;  &#39;&#39;<br>    # soup &#x3D; BeautifulSoup(rawHTML)<br>    # file_name_obj &#x3D; soup.select_one(&#39;.f-ff2&#39;)<br>    # file_name &#x3D; file_name_obj.text<br>    return res<br>def main():<br>    url &#x3D; input(&#39;please input song url:&#39;)<br>    res &#x3D; get_comments(url)<br>    # title &#x3D; get_title(url)<br>    get_hotComments(res)<br>if __name__ &#x3D;&#x3D; &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><p>得到的txt文件如下（如有需要可进一步分析）：</p><p><img src="https://uploader.shimo.im/f/1DwdMQXCPNfJwB4s.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组内置排序函数对比</title>
    <link href="/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/"/>
    <url>/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>PHP 手册专门列出了数组内置排序函数的属性一览表, 不过仔细看就会发现, 这个表格比较乱, 缺乏条理性</p><p><img src="https://uploader.shimo.im/f/n7nDEwPB0t3qbVCA.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><p>因此我对这些排序函数做了简单的归类和对比, 这样看起来一目了然, 也仍容易记忆使用了.</p><p><img src="https://uploader.shimo.im/f/8vzoLOQmKVQY6nd0.png!thumbnail?fileGuid=xHYJXDKdjxTKJJHR" alt="图片"></p><p>首先带有 sort 的分为 3 组 6 对, 每对之间是正序/倒序的相反关系,其他属性相同.</p><p>sort 和 asort 的区别是:是否在排序时保持键值关联</p><p>只有 sort/rsort/shuffle 排序不需要考虑键的问题,可随意使用</p><p>用户可自定义排序函数 :usort/uasort/uksort</p><p>natsort/natcasesort 后者的 case 指的是忽略大小写</p><p>array_multisort 的基本排序方式是: arrayA 按照键值大小排序,然后其他 array 都按照 arrayA 的调整策略跟着调整</p><p>参考:<a href="https://www.php.net/manual/zh/array.sorting.php">https://www.php.net/manual/zh/array.sorting.php</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github-hexo 两小时快速搭建个人博客网站</title>
    <link href="/2021/03/15/github-hexo%20%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2021/03/15/github-hexo%20%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>今天用 2 个小时的时间完成了 Hexo 个人博客的最基本搭建，因此博客的第一篇文章就是与此有关。</p><p>此博客的搭建使用的是 CSDN 上看到的一篇教程：</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p>该教程名副其实，或许可以称得上“史上最全”，分为三个部分：</p><p>第一部分：hexo 的初级搭建还有部署到 github page 上，以及个人域名的绑定。</p><p>第二部分：hexo 的基本配置，更换主题，实现多终端工作，以及在 coding page 部署实现国内外分流</p><p>第三部分：hexo 添加各种功能，包括搜索的 SEO，阅读量统计，访问量统计和评论系统等。</p><p>此博客部署完成后，如你所见，使用的 github 给定域名，暂未设置个人域名。然后对网站的语言、标题、风格主题等进行了设置。其他扩展功能暂未上线，可以满足最基本的需要。</p><p>以下是 Hexo 搭建步骤，点击教程做起来吧，你也可以轻松拥有自己的网站。</p><ol><li>安装 Git</li><li>安装 Node.js</li><li>安装 Hexo</li><li>GitHub 创建个人仓库</li><li>生成 SSH 添加到 GitHub</li><li>将 hexo 部署到 GitHub</li><li>设置个人域名</li><li>发布文章</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>github, Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
