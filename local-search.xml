<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>今日阅读-工作相关内容</title>
    <link href="/2023/08/09/%E4%BB%8A%E6%97%A5%E9%98%85%E8%AF%BB-%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"/>
    <url>/2023/08/09/%E4%BB%8A%E6%97%A5%E9%98%85%E8%AF%BB-%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>每天的生活被各式各样的碎片信息充斥着，看过很多好文章，可能也会淹没在信息洪流里了。像石墨、语雀等自己也在用，不过比较私人化，于是就仿照浏览器的分类收藏夹功能，建立一个可公开的、可溯源时间线的、属于自己的阅读知识库，同时，和同行、同事、朋友定期交流也方便了很多。</p><p>所以就有了置顶的这两篇「今日阅读」，这篇是工作相关，另一篇生活相关。</p><p>宇宙遨游，定期打捞。</p><h1 id="2023年8月10日"><a href="#2023年8月10日" class="headerlink" title="2023年8月10日"></a>2023年8月10日</h1><ul><li><a href="https://xmind.cn/mindmaps-gallery/">Xmind gallery</a><ul><li>用xmind时候点进去更多图库看了下，发现gallery里面有很多官方推荐的脑图，开了眼界，无论是技术详解还是读书笔记都做得特别棒，下载到本地后可根据个人需要编辑修改</li></ul></li></ul><h1 id="2023年04月20日"><a href="#2023年04月20日" class="headerlink" title="2023年04月20日"></a>2023年04月20日</h1><ul><li><a href="https://poke-holo.simey.me/">宝可梦卡片</a><ul><li>一个几乎是纯 css 的项目，只把 js 用于获取鼠标位置和生成随机参数</li><li>项目地址：<a href="https://github.com/simeydotme/pokemon-cards-css">https://github.com/simeydotme/pokemon-cards-css</a></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>what-read-today</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日阅读-生活相关内容</title>
    <link href="/2023/08/09/%E4%BB%8A%E6%97%A5%E9%98%85%E8%AF%BB-%E7%94%9F%E6%B4%BB%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"/>
    <url>/2023/08/09/%E4%BB%8A%E6%97%A5%E9%98%85%E8%AF%BB-%E7%94%9F%E6%B4%BB%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>每天的生活被各式各样的碎片信息充斥着，看过很多好文章，可能也会淹没在信息洪流里了。像石墨、语雀等自己也在用，不过比较私人化，于是就仿照浏览器的分类收藏夹功能，建立一个可公开的、可溯源时间线的、属于自己的阅读知识库，同时，和同行、同事、朋友定期交流也方便了很多。</p><p>所以就有了置顶的这两篇「今日阅读」，这篇是生活相关，另一篇工作相关。</p><p>生活相关里留存的是，除技术外的、半衰期较长的好文章，或是某个学科领域的一瞥，或是对世界一些现象和规律的解释，或是单纯的有趣的灵感一现，等等等等。</p><p>宇宙遨游，无需打捞。</p><h1 id="2023年08月10日"><a href="#2023年08月10日" class="headerlink" title="2023年08月10日"></a>2023年08月10日</h1><ul><li>《毛选》at 微信读书<ul><li>今天想系统学习关于事物的基础认识论，恰好在小红书上又看到别人推毛选，于是打开weread看了几页。在这里记录两段</li><li>表面性，是对矛盾总体和矛盾各方的特点都不去看，否认深入事物里面精细地研究矛盾特点的必要，仅仅站在那里远远地望一望，粗枝大叶地看到一点矛盾的形相，就想动手去解决矛盾（答复问题、解决纠纷、处理工作、指挥战争）。这样的做法，没有不出乱子的。</li><li>研究事物发展过程中的各个发展阶段上的矛盾的特殊性，不但必须在其联结上、在其总体上去看，而且必须从各个矛盾的各个方面去看。</li></ul></li></ul><h1 id="2023年07月30日"><a href="#2023年07月30日" class="headerlink" title="2023年07月30日"></a>2023年07月30日</h1><ul><li>《美丽新世界》at 微信读书</li><li>行为主义心理学的大量应用，印证了当下的社会现状。但是可以以这个为契机，引导个人行为往想要的方向去</li><li>“热度培育。”弗斯特先生说道。    热管与冷管交错排布，寒冷与强力X光造成的不适被联系在一起，当胚胎出瓶时会很怕冷，按照安排，他们将被分配到热带地区，去当矿工、醋酸丝纺织工人和炼钢工人。   然后他们的意识会接受培育以认同他们的身体的感受。  “我们培育它们能在高温下茁壮成长。”弗斯特先生总结道，“而我们楼上的同事会教导他们去热爱它。  ”主任语重心长地说道：“而这就是快乐和美德的秘密——热爱你必须去做的事情。培育的目标就是： 让人们热爱他们无法逃避的社会使命。”</li><li>“这是在增强他们的平衡感，”弗斯特先生解释道，“在太空中进行火箭外部维修是一件很棘手的工作。我们在他们正立的时候减缓循环，这样他们就会陷入半饥饿状态，在他们倒立的时候加倍替代血液的流动。他们就会将倒立与快乐联系在一起。事实上，当他们拿大顶时，他们开心得不得了。”</li><li>“看到了吗？”主任志得意满地说道，“看到了吗？”书本与噪声，鲜花与触电——已经在这些婴儿的头脑里紧密地联系在一起，经过两百次相同或类似的重复教育，将会变得根深蒂固。人类缔造的联系是大自然无力解开的。“他们长大以后将会，用心理学家的话说，‘本能地’痛恨书本和鲜花。那是无法改变的条件反射。他们会一辈子对书本和鲜花避之唯恐不及。”主任转身对护士们说道：“把他们带走吧。”</li><li>“我们培育群众憎恨郊野，”主任总结道，“但与此同时，我们安排他们热爱一切郊野运动。与此同时，我们确保所有的郊野运动都需要使用精密的器械。因此，促使他们会去消费工业品和交通工具。于是就采取了电击这一手段。”“我懂了。”那个学生说道，然后默不作声，崇拜得五体投地。</li></ul><h1 id="2023年5月28日"><a href="#2023年5月28日" class="headerlink" title="2023年5月28日"></a>2023年5月28日</h1><ul><li><a href="https://xmind.cn/mindmaps-gallery/">Xmind gallery</a></li></ul><h1 id="2023年05月x日"><a href="#2023年05月x日" class="headerlink" title="2023年05月x日"></a>2023年05月x日</h1><ul><li>「电子书导出助手三剑客」<ul><li>知乎用户回答导出，搜索「知乎助手」</li><li><a href="https://www.juyimv.cn/">微信公众号文章导出</a><ul><li>今天给朋友推荐的</li></ul></li><li><a href="https://www.onlinedown.net/soft/10079626.htm">稳部落</a></li></ul></li></ul><h1 id="2023年01月10日"><a href="#2023年01月10日" class="headerlink" title="2023年01月10日"></a>2023年01月10日</h1><ul><li><a href="https://gb.goodux.cn/#l14">认知偏差手册</a><ul><li>包含了 67 种认知偏差还有对应的理解。</li><li>「认知谬误」这个词，是刚毕业那一年，知乎大 V 天才小熊猫的一个长帖子里知道的，写的很全面，是我第一次比较系统的认识了认知谬误这个东西。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>what-read-today</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack 高级配置总结</title>
    <link href="/2022/11/24/Webpack%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/24/Webpack%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>高级配置的学习，从 4 个角度对 webpack 和代码进行了优化：</p><p><strong>1. 提升开发体验 enhance experince</strong></p><ul><li>使用 <code>Source Map</code> 让开发或上线时代码报错能有更加准确的错误提示。</li></ul><p><strong>2. 提升 webpack 提升打包构建速度 lifting speed</strong></p><ul><li>使用 <code>HotModuleReplacement</code> 让开发时只重新编译打包更新变化了的代码，不变的代码使用缓存，从而使更新速度更快。</li><li>使用 <code>OneOf</code> 让资源文件一旦被某个 loader 处理了，就不会继续遍历了，打包速度更快。</li><li>使用 <code>Include/Exclude</code> 排除或只检测某些文件，处理的文件更少，速度更快。</li><li>使用 <code>Cache</code> 对 eslint 和 babel 处理的结果进行缓存，让第二次打包速度更快。</li><li>使用 <code>Thead</code> 多进程处理 eslint 和 babel 任务，速度更快。（需要注意的是，进程启动通信都有开销的，要在比较多代码处理时使用才有效果, 所以开发的时候不要一上来就用多进程，等项目庞大确实感到打包速度很慢时才用，要是没有明显提升，就过段时间再用）</li></ul><p><strong>3. 减少代码体积 reduce volume</strong></p><ul><li>🌲 使用 <code>Tree Shaking</code> 剔除了没有使用的多余代码，让代码体积更小。</li><li>使用 <code>@babel/plugin-transform-runtime</code> 插件对 babel 进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码，从而体积更小。</li><li>使用 <code>Image Minimizer</code> 对项目中图片进行压缩，体积更小，请求速度更快。（需要注意的是，如果项目中图片都是在线链接，那么就不需要了；本地项目静态图片才需要进行压缩。）</li></ul><p><strong>4. 优化代码运行性能 optimize performance</strong></p><ul><li>使用 <code>Code Split</code> 对代码进行分割成多个 js 文件，从而使单个文件体积更小，并行加载 js 速度更快。并通过 import 动态导入语法进行按需加载，这里主要体现在路由懒加载上，从而达到需要使用时才加载该资源，不用时不加载资源。</li><li>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</li><li>使用 <code>Network Cache</code> 能对输出资源文件进行更好的命名，将来好做缓存，从而用户体验更好。</li><li>使用 <code>Core-js</code> 对 js 进行兼容性处理，让我们代码能运行在低版本浏览器。</li><li>使用 <code>PWA</code> 能让代码离线也能访问，从而提升用户体验。不过 PWA 的兼容性不太好，需要斟酌使用。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 高级配置4：如何优化代码运行性能</title>
    <link href="/2022/11/24/Webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE4%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%80%A7%E8%83%BD/"/>
    <url>/2022/11/24/Webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE4%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="优化代码运行性能-optimize-performance"><a href="#优化代码运行性能-optimize-performance" class="headerlink" title="优化代码运行性能 optimize performance"></a>优化代码运行性能 optimize performance</h1><h2 id="Code-Split"><a href="#Code-Split" class="headerlink" title="Code Split"></a>Code Split</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>打包代码时会将所有 js 文件打包到一个文件中，体积太大了。如果只要渲染首页，就应该只加载首页的 js 文件，其他文件不应该加载。</p><p>所以需要将打包生成的文件进行代码分割，生成多个 js 文件，渲染哪个页面就只加载某个 js 文件，这样加载的资源就少，速度就更快。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>代码分割（Code Split）主要做了两件事：</p><ol><li>分割文件：将打包生成的文件进行分割，生成多个 js 文件。</li><li>按需加载：需要哪个文件就加载哪个文件。</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>代码分割实现方式有不同的方式，为了更加方便体现它们之间的差异，创建了新的文件来演示和加深学习印象</p><h5 id="1-多入口"><a href="#1-多入口" class="headerlink" title="1. 多入口"></a>1. 多入口</h5><ol><li>新创建的文件目录如下</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">├── <span class="hljs-meta">public</span><br>|   ├── index<span class="hljs-number">.</span>html<br>├── src<br>|   ├── app<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br>|   └── main<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br>├── package<span class="hljs-number">.</span>json<br>└── webpack<span class="hljs-number">.</span>config<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br></code></pre></td></tr></table></figure><ol start="2"><li>下载包</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> webpack webpack-cli <span class="hljs-selector-tag">html</span>-webpack-plugin -D<br></code></pre></td></tr></table></figure><ol start="3"><li>新建文件，观察打包输出的结果</li></ol><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello app&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello main&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="4"><li>配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 单入口</span><br>  <span class="hljs-comment">// entry: &#x27;./src/main.js&#x27;,</span><br>  <span class="hljs-comment">// 多入口</span><br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">main</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>    <span class="hljs-attr">app</span>: <span class="hljs-string">&quot;./src/app.js&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>),<br>    <span class="hljs-comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span><br>    <span class="hljs-comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span><br>    <span class="hljs-comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span><br>    <span class="hljs-comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;js/[name].js&quot;</span>,<br>    <span class="hljs-attr">clear</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./public/index.html&quot;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="5"><li>运行指令 <code>npx webpack</code></li></ol><p>此时在 dist 目录能看到输出了两个 js 文件。多入口打包，配置了几个入口，至少输出几个 js 文件。</p><h5 id="2-提取重复代码"><a href="#2-提取重复代码" class="headerlink" title="2. 提取重复代码"></a>2. 提取重复代码</h5><p>如果多入口文件中都引用同一份代码，这份代码会被打包多次，导致代码重复，体积更大，所以只打包生成一个 js 文件，其他文件引用它就好。</p><ol><li>修改文件</li></ol><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; sum &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./math&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello app&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; sum &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./math&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello main&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><ul><li>math.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">...args</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">p, c</span>) =&gt;</span> p + c, <span class="hljs-number">0</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;28-67&#125;">// webpack.config.js<br>const path = require(&quot;path&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br><br>module.exports = &#123;<br>  // 单入口<br>  // entry: &#x27;./src/main.js&#x27;,<br>  // 多入口<br>  entry: &#123;<br>    main: &quot;./src/main.js&quot;,<br>    app: &quot;./src/app.js&quot;,<br>  &#125;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;./dist&quot;),<br>    // [name]是webpack命名规则，使用chunk的name作为输出的文件名。<br>    // 什么是chunk？打包的资源就是chunk，输出出去叫bundle。<br>    // chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。<br>    // 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)<br>    filename: &quot;js/[name].js&quot;,<br>    clean: true,<br>  &#125;,<br>  plugins: [<br>    new HtmlWebpackPlugin(&#123;<br>      template: &quot;./public/index.html&quot;,<br>    &#125;),<br>  ],<br>  mode: &quot;production&quot;,<br>  optimization: &#123;<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 以下是默认值<br>      // minSize: 20000, // 分割代码最小的大小20kb<br>      // minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0<br>      // minChunks: 1, // 至少被引用的次数，满足条件才会代码分割<br>      // maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量<br>      // maxInitialRequests: 30, // 入口js文件最大并行请求数量<br>      // enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）<br>      // cacheGroups: &#123; // 组，哪些模块要打包到一个组<br>      //   defaultVendors: &#123; // 组名<br>      //     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块<br>      //     priority: -10, // 权重（越大越高）<br>      //     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块<br>      //   &#125;,<br>      //   default: &#123; // 其他没有写的配置会使用上面的默认值<br>      //     minChunks: 2, // 这里的minChunks权重更大<br>      //     priority: -20,<br>      //     reuseExistingChunk: true,<br>      //   &#125;,<br>      // &#125;,<br>      // 修改配置<br>      cacheGroups: &#123;<br>        // 组，哪些模块要打包到一个组<br>        // defaultVendors: &#123; // 组名<br>        //   test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块<br>        //   priority: -10, // 权重（越大越高）<br>        //   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块<br>        // &#125;,<br>        default: &#123;<br>          // 其他没有写的配置会使用上面的默认值<br>          minSize: 0, // 重新设置改打包的最小文件体积<br>          minChunks: 2,<br>          priority: -20,<br>          reuseExistingChunk: true,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>运行指令 <code>npx webpack</code></li></ol><p>此时会发现生成了 3 个 js 文件，其中有一个是提取的公共模块。</p><h5 id="3-按需加载，动态导入"><a href="#3-按需加载，动态导入" class="headerlink" title="3. 按需加载，动态导入"></a>3. 按需加载，动态导入</h5><p>想要实现按需加载，动态导入模块。还需要额外配置：</p><ol><li>修改文件</li></ol><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello main&quot;</span>);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 动态导入 --&gt; 实现按需加载</span><br>  <span class="hljs-comment">// 即使只被引用了一次，也会代码分割</span><br>  <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;./math.js&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; sum &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>  &#125;);<br><br>  <br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello app&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Code Split<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello webpack<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>计算<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>运行指令 <code>npx webpack</code></li></ol><p>可以发现，一旦通过 import 动态导入语法导入模块，模块就被代码分割，同时也能按需加载了。</p><h5 id="4-单入口"><a href="#4-单入口" class="headerlink" title="4. 单入口"></a>4. 单入口</h5><p>开发时可能是单页面应用（SPA），只有一个入口（单入口）。那么需要这样配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 单入口</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-comment">// 多入口</span><br>  <span class="hljs-comment">// entry: &#123;</span><br>  <span class="hljs-comment">//   main: &quot;./src/main.js&quot;,</span><br>  <span class="hljs-comment">//   app: &quot;./src/app.js&quot;,</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>),<br>    <span class="hljs-comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span><br>    <span class="hljs-comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span><br>    <span class="hljs-comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span><br>    <span class="hljs-comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;js/[name].js&quot;</span>,<br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./public/index.html&quot;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-comment">// 代码分割配置</span><br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-comment">// 对所有模块都进行分割</span><br>      <span class="hljs-comment">// 以下是默认值</span><br>      <span class="hljs-comment">// minSize: 20000, // 分割代码最小的大小</span><br>      <span class="hljs-comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span><br>      <span class="hljs-comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span><br>      <span class="hljs-comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span><br>      <span class="hljs-comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span><br>      <span class="hljs-comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span><br>      <span class="hljs-comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span><br>      <span class="hljs-comment">//   defaultVendors: &#123; // 组名</span><br>      <span class="hljs-comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span><br>      <span class="hljs-comment">//     priority: -10, // 权重（越大越高）</span><br>      <span class="hljs-comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span><br>      <span class="hljs-comment">//   &#125;,</span><br>      <span class="hljs-comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span><br>      <span class="hljs-comment">//     minChunks: 2, // 这里的minChunks权重更大</span><br>      <span class="hljs-comment">//     priority: -20,</span><br>      <span class="hljs-comment">//     reuseExistingChunk: true,</span><br>      <span class="hljs-comment">//   &#125;,</span><br>      <span class="hljs-comment">// &#125;,</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="5-更新配置"><a href="#5-更新配置" class="headerlink" title="5. 更新配置"></a>5. 更新配置</h6><p>最终会使用单入口+代码分割+动态导入方式来进行配置。更新之前的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;174-178&#125;">// webpack.prod.js<br>const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            generator: &#123;<br>              // 将图片文件输出到 static/imgs 目录中<br>              // 将图片文件命名 [hash:8][ext][query]<br>              // [hash:8]: hash值取8位<br>              // [ext]: 使用之前的文件扩展名<br>              // [query]: 添加之前的query参数<br>              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            generator: &#123;<br>              filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/main.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 其他内容用默认配置即可<br>    &#125;,<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="6-给动态导入文件取名称"><a href="#6-给动态导入文件取名称" class="headerlink" title="6. 给动态导入文件取名称"></a>6. 给动态导入文件取名称</h5><ol><li>修改文件</li></ol><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> sum <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/sum&quot;</span>;<br><span class="hljs-comment">// 引入资源，Webpack才会对其打包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/iconfont.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./less/index.less&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./sass/index.sass&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./sass/index.scss&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./styl/index.styl&quot;</span>;<br><br><span class="hljs-keyword">const</span> result2 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br><br><span class="hljs-comment">// 以下代码生产模式下会删除</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>) &#123;<br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>.<span class="hljs-title function_">accept</span>(<span class="hljs-string">&quot;./js/sum.js&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">sum</span>) &#123;<br>    <span class="hljs-keyword">const</span> result2 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br>  &#125;);<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onClick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// eslint会对动态导入语法报错，需要修改eslint配置文件</span><br>  <span class="hljs-comment">// webpackChunkName: &quot;math&quot;：这是webpack动态导入模块命名的方式</span><br>  <span class="hljs-comment">// &quot;math&quot;将来就会作为[name]的值显示。写好了然后再去配置chunkfilename</span><br>  <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;math&quot; */</span> <span class="hljs-string">&quot;./js/math.js&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">count</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>eslint 配置</li></ol><ul><li><p>下载包 <code>npm i eslint-plugin-import -D</code></p></li><li><p>配置</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;9&#125;">// .eslintrc.js<br>module.exports = &#123;<br>  // 继承 Eslint 规则<br>  extends: [&quot;eslint:recommended&quot;],<br>  env: &#123;<br>    node: true, // 启用node中全局变量<br>    browser: true, // 启用浏览器中全局变量<br>  &#125;,<br>  plugins: [&quot;import&quot;], // 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的<br>  parserOptions: &#123;<br>    ecmaVersion: 6,<br>    sourceType: &quot;module&quot;,<br>  &#125;,<br>  rules: &#123;<br>    &quot;no-var&quot;: 2, // 不能使用 var 定义变量<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>统一命名配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;36-38,71-78,83-85,132-134&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/[name].js&quot;, // 入口文件打包输出资源命名方式，适合单入口和多入口<br>    chunkFilename: &quot;static/js/[name].chunk.js&quot;, // 动态导入输出资源命名方式<br>    assetModuleFilename: &quot;static/media/[name].[hash][ext]&quot;, // 图片、字体等资源命名方式（注意用hash）<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            // generator: &#123;<br>            //   // 将图片文件输出到 static/imgs 目录中<br>            //   // 将图片文件命名 [hash:8][ext][query]<br>            //   // [hash:8]: hash值取8位<br>            //   // [ext]: 使用之前的文件扩展名<br>            //   // [query]: 添加之前的query参数<br>            //   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            // generator: &#123;<br>            //   filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/[name].css&quot;,<br>      chunkFilename: &quot;static/css/[name].chunk.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 其他内容用默认配置即可<br>    &#125;,<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>运行指令 <code>npx webpack</code></li></ol><p>观察打包输出 js 文件名称。</p><h2 id="Preload-x2F-Prefetch"><a href="#Preload-x2F-Prefetch" class="headerlink" title="Preload &#x2F; Prefetch"></a>Preload &#x2F; Prefetch</h2><h3 id="问题背景-1"><a href="#问题背景-1" class="headerlink" title="问题背景"></a>问题背景</h3><p>前面已经做了代码分割，同时会使用 import 动态导入语法来进行代码按需加载（也叫懒加载，比如路由懒加载就是这样实现的）。但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，如果资源体积很大，那么用户会感觉到明显卡顿效果。如果想在浏览器空闲时间，加载后续需要使用的资源，就需要用上 <code>Preload</code> 或 <code>Prefetch</code> 技术。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><code>Preload</code>：告诉浏览器立即加载资源。</li><li><code>Prefetch</code>：告诉浏览器在空闲时才开始加载资源。</li></ul><p>它们共同点是：都只会加载资源，并不执行；都有缓存。<br>它们区别：</p><ul><li><code>Preload</code>加载优先级高，<code>Prefetch</code>加载优先级低。</li><li><code>Preload</code>只能加载当前页面需要使用的资源，<code>Prefetch</code>可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</li></ul><p>所以当前页面优先级高的资源用 <code>Preload</code> 加载，下一个页面需要使用的资源用 <code>Prefetch</code> 加载。<br>它们的问题：兼容性较差，<code>Preload</code> 相对于 <code>Prefetch</code> 兼容性好一点。</p><ul><li><a href="https://caniuse.com/">Can I Use</a> 网站查询 API 的兼容性问题。</li></ul><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><ol><li><p>下载包 <code>npm i @vue/preload-webpack-plugin -D</code></p></li><li><p>配置 webpack.prod.js</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;9,139-143&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br>const PreloadWebpackPlugin = require(&quot;@vue/preload-webpack-plugin&quot;);<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/[name].js&quot;, // 入口文件打包输出资源命名方式<br>    chunkFilename: &quot;static/js/[name].chunk.js&quot;, // 动态导入输出资源命名方式<br>    assetModuleFilename: &quot;static/media/[name].[hash][ext]&quot;, // 图片、字体等资源命名方式（注意用hash）<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            // generator: &#123;<br>            //   // 将图片文件输出到 static/imgs 目录中<br>            //   // 将图片文件命名 [hash:8][ext][query]<br>            //   // [hash:8]: hash值取8位<br>            //   // [ext]: 使用之前的文件扩展名<br>            //   // [query]: 添加之前的query参数<br>            //   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            // generator: &#123;<br>            //   filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/[name].css&quot;,<br>      chunkFilename: &quot;static/css/[name].chunk.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>    new PreloadWebpackPlugin(&#123;<br>      rel: &quot;preload&quot;, // preload兼容性更好<br>      as: &quot;script&quot;,<br>      // rel: &#x27;prefetch&#x27; // prefetch兼容性更差，prefetch 没有as script 设置<br>    &#125;),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 其他内容用默认配置即可<br>    &#125;,<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Network-Cache"><a href="#Network-Cache" class="headerlink" title="Network Cache"></a>Network Cache</h2><h3 id="问题背景-2"><a href="#问题背景-2" class="headerlink" title="问题背景"></a>问题背景</h3><p>将来开发时对静态资源会使用缓存来优化，这样浏览器第二次请求资源就能读取缓存了，速度很快。</p><p>但是这样的话就会有一个问题, 因为前后输出的文件名是一样的，都叫 main.js，一旦将来发布新版本，因为文件名没有变化导致浏览器会直接读取缓存，不会加载新资源，项目也就没法更新了。</p><p>所以从文件名入手，确保更新前后文件名不一样，这样就可以做缓存了。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>它们都会生成一个唯一的 hash 值。</p><ul><li>fullhash（webpack4 是 hash）</li></ul><p>每次修改任何一个文件，所有文件名的 hash 至都将改变。所以一旦修改了任何一个文件，整个项目的文件缓存都将失效。</p><ul><li>chunkhash</li></ul><p>根据不同的入口文件(Entry)进行依赖文件解析、构建对应的 chunk，生成对应的哈希值。 js 和 css 是同一个引入，会共享一个 hash 值。</p><ul><li>contenthash</li></ul><p>根据文件内容生成 hash 值，只有文件内容变化了，hash 值才会变化。所有文件 hash 值是独享且不同的。</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;37-39,135-136&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br>const PreloadWebpackPlugin = require(&quot;@vue/preload-webpack-plugin&quot;);<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    // [contenthash:8]使用contenthash，取8位长度<br>    filename: &quot;static/js/[name].[contenthash:8].js&quot;, // 入口文件打包输出资源命名方式<br>    chunkFilename: &quot;static/js/[name].[contenthash:8].chunk.js&quot;, // 动态导入输出资源命名方式<br>    assetModuleFilename: &quot;static/media/[name].[hash][ext]&quot;, // 图片、字体等资源命名方式（注意用hash）<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            // generator: &#123;<br>            //   // 将图片文件输出到 static/imgs 目录中<br>            //   // 将图片文件命名 [hash:8][ext][query]<br>            //   // [hash:8]: hash值取8位<br>            //   // [ext]: 使用之前的文件扩展名<br>            //   // [query]: 添加之前的query参数<br>            //   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            // generator: &#123;<br>            //   filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/[name].[contenthash:8].css&quot;,<br>      chunkFilename: &quot;static/css/[name].[contenthash:8].chunk.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>    new PreloadWebpackPlugin(&#123;<br>      rel: &quot;preload&quot;, // preload兼容性更好<br>      as: &quot;script&quot;,<br>      // rel: &#x27;prefetch&#x27; // prefetch兼容性更差<br>    &#125;),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 其他内容用默认配置即可<br>    &#125;,<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>问题：</li></ul><p>当修改 math.js 文件再重新打包的时候，因为 contenthash 原因，math.js 文件 hash 值发生了变化（这是正常的）。但是 main.js 文件的 hash 值也发生了变化，这会导致 main.js 的缓存失效</p><ul><li><p>原因：main.js 引用的 math.yyy.js, 文件名发生了变化，间接导致 main.js 也发生了变化</p></li><li><p>解决：</p></li></ul><p>将 hash 值单独保管在一个 runtime 文件中。最终输出三个文件：main、math、runtime。当 math 文件发送变化，变化的是 math 和 runtime 文件，main 不变。runtime 文件只保存文件的 hash 值和它们与文件关系，整个文件体积就比较小，所以变化重新请求的代价也小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;188-191&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br>const PreloadWebpackPlugin = require(&quot;@vue/preload-webpack-plugin&quot;);<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    // [contenthash:8]使用contenthash，取8位长度<br>    filename: &quot;static/js/[name].[contenthash:8].js&quot;, // 入口文件打包输出资源命名方式<br>    chunkFilename: &quot;static/js/[name].[contenthash:8].chunk.js&quot;, // 动态导入输出资源命名方式<br>    assetModuleFilename: &quot;static/media/[name].[hash][ext]&quot;, // 图片、字体等资源命名方式（注意用hash）<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            // generator: &#123;<br>            //   // 将图片文件输出到 static/imgs 目录中<br>            //   // 将图片文件命名 [hash:8][ext][query]<br>            //   // [hash:8]: hash值取8位<br>            //   // [ext]: 使用之前的文件扩展名<br>            //   // [query]: 添加之前的query参数<br>            //   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            // generator: &#123;<br>            //   filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/[name].[contenthash:8].css&quot;,<br>      chunkFilename: &quot;static/css/[name].[contenthash:8].chunk.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>    new PreloadWebpackPlugin(&#123;<br>      rel: &quot;preload&quot;, // preload兼容性更好<br>      as: &quot;script&quot;,<br>      // rel: &#x27;prefetch&#x27; // prefetch兼容性更差<br>    &#125;),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 其他内容用默认配置即可<br>    &#125;,<br>    // 提取runtime文件<br>    runtimeChunk: &#123;<br>      name: (entrypoint) =&gt; `runtime~$&#123;entrypoint.name&#125;`, // runtime文件命名规则<br>    &#125;,<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Core-js-彻底解决-js-兼容性问题"><a href="#Core-js-彻底解决-js-兼容性问题" class="headerlink" title="Core-js 彻底解决 js 兼容性问题"></a>Core-js 彻底解决 js 兼容性问题</h2><h3 id="问题背景-3"><a href="#问题背景-3" class="headerlink" title="问题背景"></a>问题背景</h3><p>过去使用 babel 对 js 代码进行了兼容性处理，其中使用<code>@babel/preset-env</code> 智能预设来处理兼容性问题。它能将 ES6 的一些语法进行编译转换，比如箭头函数、点点点运算符等。但是如果是 async 函数、promise 对象、数组的一些方法（includes）等，它没办法处理。</p><p>所以此时 js 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。那么怎么将 js 兼容性问题彻底解决呢？</p><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>core-js</code> 是专门用来做 ES6 以及以上 API 的 <code>polyfill</code>。</p><p><code>polyfill</code>翻译过来叫做垫片&#x2F;补丁。就是用社区上提供的一段代码，让在不兼容某些新特性的浏览器上，使用该新特性。</p><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>修改 main.js</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;15-19&#125;">import count from &quot;./js/count&quot;;<br>import sum from &quot;./js/sum&quot;;<br>// 引入资源，Webpack才会对其打包<br>import &quot;./css/iconfont.css&quot;;<br>import &quot;./css/index.css&quot;;<br>import &quot;./less/index.less&quot;;<br>import &quot;./sass/index.sass&quot;;<br>import &quot;./sass/index.scss&quot;;<br>import &quot;./styl/index.styl&quot;;<br><br>const result1 = count(2, 1);<br>console.log(result1);<br>const result2 = sum(1, 2, 3, 4);<br>console.log(result2);<br>// 添加promise代码<br>const promise = Promise.resolve();<br>promise.then(() =&gt; &#123;<br>  console.log(&quot;hello promise&quot;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>此时 Eslint 会对 Promise 报错。</p><ol start="2"><li>修改配置文件</li></ol><ul><li><p>下载包  <code>npm i @babel/eslint-parser -D</code></p></li><li><p>.eslintrc.js</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;4&#125;">module.exports = &#123;<br>  // 继承 Eslint 规则<br>  extends: [&quot;eslint:recommended&quot;],<br>  parser: &quot;@babel/eslint-parser&quot;, // 支持最新的最终 ECMAScript 标准<br>  env: &#123;<br>    node: true, // 启用node中全局变量<br>    browser: true, // 启用浏览器中全局变量<br>  &#125;,<br>  plugins: [&quot;import&quot;], // 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的<br>  parserOptions: &#123;<br>    ecmaVersion: 6, // es6<br>    sourceType: &quot;module&quot;, // es module<br>  &#125;,<br>  rules: &#123;<br>    &quot;no-var&quot;: 2, // 不能使用 var 定义变量<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>运行指令 <code>npm run build</code></li></ol><p>此时观察打包输出的 js 文件，发现 Promise 语法并没有编译转换，所以需要使用 <code>core-js</code> 来进行 <code>polyfill</code>。</p><ol start="4"><li>使用<code>core-js</code></li></ol><ul><li><p>下载包 <code>npm i core-js</code></p></li><li><p>手动全部引入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;1&#125;">import &quot;core-js&quot;; //引入core-js<br>import count from &quot;./js/count&quot;;<br>import sum from &quot;./js/sum&quot;;<br>// 引入资源，Webpack才会对其打包<br>import &quot;./css/iconfont.css&quot;;<br>import &quot;./css/index.css&quot;;<br>import &quot;./less/index.less&quot;;<br>import &quot;./sass/index.sass&quot;;<br>import &quot;./sass/index.scss&quot;;<br>import &quot;./styl/index.styl&quot;;<br><br>const result1 = count(2, 1);<br>console.log(result1);<br>const result2 = sum(1, 2, 3, 4);<br>console.log(result2);<br>// 添加promise代码<br>const promise = Promise.resolve();<br>promise.then(() =&gt; &#123;<br>  console.log(&quot;hello promise&quot;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样引入会将所有兼容性代码全部引入，体积太大了。只想引入 promise 的 <code>polyfill</code>。</p><ul><li>手动按需引入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;1&#125;">import &quot;core-js/es/promise&quot;;<br>import count from &quot;./js/count&quot;;<br>import sum from &quot;./js/sum&quot;;<br>// 引入资源，Webpack才会对其打包<br>import &quot;./css/iconfont.css&quot;;<br>import &quot;./css/index.css&quot;;<br>import &quot;./less/index.less&quot;;<br>import &quot;./sass/index.sass&quot;;<br>import &quot;./sass/index.scss&quot;;<br>import &quot;./styl/index.styl&quot;;<br><br>const result1 = count(2, 1);<br>console.log(result1);<br>const result2 = sum(1, 2, 3, 4);<br>console.log(result2);<br>// 添加promise代码<br>const promise = Promise.resolve();<br>promise.then(() =&gt; &#123;<br>  console.log(&quot;hello promise&quot;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>只引入打包 promise 的 <code>polyfill</code>，打包体积更小。但是将来如果还想使用其他语法，我需要手动引入库很麻烦。</p><ul><li><p>自动按需引入</p><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> count <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/count&quot;</span>;<br><span class="hljs-keyword">import</span> sum <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/sum&quot;</span>;<br><span class="hljs-comment">// 引入资源，Webpack才会对其打包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/iconfont.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./less/index.less&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./sass/index.sass&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./sass/index.scss&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./styl/index.styl&quot;</span>;<br><br><span class="hljs-keyword">const</span> result1 = <span class="hljs-title function_">count</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1);<br><span class="hljs-keyword">const</span> result2 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br><span class="hljs-comment">// 添加promise代码</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello promise&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>babel.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 智能预设：能够编译ES6语法</span><br>  <span class="hljs-attr">presets</span>: [<br>    [<br>      <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>      <span class="hljs-comment">// 按需加载core-js的polyfill</span><br>      &#123; <br>        <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&quot;usage&quot;</span>, <br>        <span class="hljs-attr">corejs</span>: &#123; <br>          <span class="hljs-attr">version</span>: <span class="hljs-string">&quot;3&quot;</span>, <br>          <span class="hljs-attr">proposals</span>: <span class="hljs-literal">true</span> <br>        &#125;<br>      &#125;,<br>    ],<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>此时就会自动根据代码中使用的语法，来按需加载相应的 <code>polyfill</code> 了。</p><h2 id="PWA-progressive-web-application"><a href="#PWA-progressive-web-application" class="headerlink" title="PWA - progressive web application"></a>PWA - progressive web application</h2><h3 id="问题背景-4"><a href="#问题背景-4" class="headerlink" title="问题背景"></a>问题背景</h3><p>开发 Web App 项目，项目一旦处于网络离线情况，就没法访问了。如果希望给项目提供离线体验，该怎么做呢？</p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><p>渐进式网络应用程序是一种可以提供类似于 native app(原生应用程序) 体验的 Web App 的技术。其中最重要的是，在 <strong>离线(offline)</strong> 时应用程序能够继续运行功能。它的内部通过 Service Workers 技术实现的。</p><h3 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>下载包 <code>npm i workbox-webpack-plugin -D</code></p></li><li><p>修改配置文件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;10,146-151&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br>const PreloadWebpackPlugin = require(&quot;@vue/preload-webpack-plugin&quot;);<br>const WorkboxPlugin = require(&quot;workbox-webpack-plugin&quot;);//引入web workers插件<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    // [contenthash:8]使用contenthash，取8位长度<br>    filename: &quot;static/js/[name].[contenthash:8].js&quot;, // 入口文件打包输出资源命名方式<br>    chunkFilename: &quot;static/js/[name].[contenthash:8].chunk.js&quot;, // 动态导入输出资源命名方式<br>    assetModuleFilename: &quot;static/media/[name].[hash][ext]&quot;, // 图片、字体等资源命名方式（注意用hash）<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            // generator: &#123;<br>            //   // 将图片文件输出到 static/imgs 目录中<br>            //   // 将图片文件命名 [hash:8][ext][query]<br>            //   // [hash:8]: hash值取8位<br>            //   // [ext]: 使用之前的文件扩展名<br>            //   // [query]: 添加之前的query参数<br>            //   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            // generator: &#123;<br>            //   filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            // &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/[name].[contenthash:8].css&quot;,<br>      chunkFilename: &quot;static/css/[name].[contenthash:8].chunk.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>    new PreloadWebpackPlugin(&#123;<br>      rel: &quot;preload&quot;, // preload兼容性更好<br>      as: &quot;script&quot;,<br>      // rel: &#x27;prefetch&#x27; // prefetch兼容性更差<br>    &#125;),<br>    //添加Workbox<br>    new WorkboxPlugin.GenerateSW(&#123;<br>      // 这些选项帮助快速启用 ServiceWorkers<br>      // 不允许遗留任何“旧的” ServiceWorkers<br>      clientsClaim: true,<br>      skipWaiting: true,<br>    &#125;),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>    // 代码分割配置<br>    splitChunks: &#123;<br>      chunks: &quot;all&quot;, // 对所有模块都进行分割<br>      // 其他内容用默认配置即可<br>    &#125;,<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>在 main.js 中注册 serviceWorker</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;24-35&#125;"><br>//注册serviceWorker<br>if (&quot;serviceWorker&quot; in navigator) &#123;<br>  window.addEventListener(&quot;load&quot;, () =&gt; &#123;<br>    navigator.serviceWorker<br>      .register(&quot;/service-worker.js&quot;)<br>      .then((registration) =&gt; &#123;<br>        console.log(&quot;SW registered: &quot;, registration);<br>      &#125;)<br>      .catch((registrationError) =&gt; &#123;<br>        console.log(&quot;SW registration failed: &quot;, registrationError);<br>      &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>运行指令 <code>npm run build</code></li></ol><p>此时如果直接通过 VSCode 访问打包后页面，在浏览器控制台会发现 <code>SW registration failed</code>。</p><p>因为打开的访问路径是：<code>http://127.0.0.1:5500/dist/index.html</code>。此时页面会去请求 <code>service-worker.js</code> 文件，请求路径是：<code>http://127.0.0.1:5500/service-worker.js</code>，这样找不到会 404。</p><p>实际 <code>service-worker.js</code> 文件路径是：<code>http://127.0.0.1:5500/dist/service-worker.js</code>。</p><ol start="5"><li>解决路径问题：要保证运行项目的根目录还是dist</li></ol><ul><li>下载一个专门用来部署静态资源服务器的库 <code>npm i serve -g</code></li></ul><p>serve 也是用来启动开发服务器来部署代码查看效果的。</p><ul><li>运行指令，serve + 要部署的目录 <code>serve dist</code>,此时通过 serve 启动的服务器 service-worker 就能注册成功了。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 高级配置3：如何减少代码体积</title>
    <link href="/2022/11/24/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE3%EF%BC%9A%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF/"/>
    <url>/2022/11/24/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE3%EF%BC%9A%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="减少代码体积-reduce-volume"><a href="#减少代码体积-reduce-volume" class="headerlink" title="减少代码体积 reduce volume"></a>减少代码体积 reduce volume</h1><h2 id="🌲Tree-Shaking"><a href="#🌲Tree-Shaking" class="headerlink" title="🌲Tree Shaking"></a>🌲Tree Shaking</h2><p>开发时定义了一些工具函数库，或者引用第三方工具函数库或组件库。如果没有特殊处理，打包时会引入整个库，但是实际上可能只用一小部分。这样将整个库都打包进来，体积就太大了。</p><p><code>Tree Shaking</code> 是一个术语，通常用于描述移除 JavaScript 中的没有使用上的代码。注意：它依赖 <code>ES Module</code>。<br>Webpack 默认开启，无需配置。</p><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大。例如，对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code>，默认情况下会被添加到每一个需要它的文件中。其实开发者可以将这些辅助代码、作为一个独立模块，随用随引，来避免重复引入。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><code>@babel/plugin-transform-runtime</code>: 禁用了 Babel 自动对每个文件的 runtime 注入，而是引入。并且使所有辅助代码从这里引用。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>下载包 <code>npm i @babel/plugin-transform-runtime -D</code></p></li><li><p>配置</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;100&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|webp)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            generator: &#123;<br>              // 将图片文件输出到 static/imgs 目录中<br>              // 将图片文件命名 [hash:8][ext][query]<br>              // [hash:8]: hash值取8位<br>              // [ext]: 使用之前的文件扩展名<br>              // [query]: 添加之前的query参数<br>              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            generator: &#123;<br>              filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/main.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>    ]<br>  ],<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Image-Minimizer"><a href="#Image-Minimizer" class="headerlink" title="Image Minimizer"></a>Image Minimizer</h2><h3 id="问题背景-1"><a href="#问题背景-1" class="headerlink" title="问题背景"></a>问题背景</h3><p>如果项目中引用了较多图片，那么图片体积会比较大，将来请求速度比较慢。可以对图片进行压缩，减少图片体积。另外，如果图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>image-minimizer-webpack-plugin</code>: 用来压缩图片的插件</p><h3 id="使用办法"><a href="#使用办法" class="headerlink" title="使用办法"></a>使用办法</h3><ol><li>下载包  <code>npm i image-minimizer-webpack-plugin imagemin -D</code><br>还有剩下包需要下载，有两种模式：</li></ol><ul><li><p>无损压缩 <code>npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</code></p></li><li><p>有损压缩 <code>npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</code></p></li></ul><blockquote><p><a href="https://baike.baidu.com/item/%E6%97%A0%E6%8D%9F%E3%80%81%E6%9C%89%E6%8D%9F%E5%8E%8B%E7%BC%A9">有损&#x2F;无损压缩的区别</a></p></blockquote><ol start="2"><li>配置</li></ol><p>以无损压缩配置为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;8,144-171&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);<br>const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);<br><br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|svg)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            generator: &#123;<br>              // 将图片文件输出到 static/imgs 目录中<br>              // 将图片文件命名 [hash:8][ext][query]<br>              // [hash:8]: hash值取8位<br>              // [ext]: 使用之前的文件扩展名<br>              // [query]: 添加之前的query参数<br>              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            generator: &#123;<br>              filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                  cacheCompression: false, // 缓存文件不要压缩<br>                  plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/main.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>  ],<br>  optimization: &#123;<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads, // 开启多进程<br>      &#125;),<br>      // 压缩图片，这一块直接复制即可，有时候包会下载不下来<br>      new ImageMinimizerPlugin(&#123;<br>        minimizer: &#123;<br>          implementation: ImageMinimizerPlugin.imageminGenerate,<br>          options: &#123;<br>            plugins: [<br>              [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],<br>              [&quot;jpegtran&quot;, &#123; progressive: true &#125;],<br>              [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],<br>              [<br>                &quot;svgo&quot;,<br>                &#123;<br>                  plugins: [<br>                    &quot;preset-default&quot;,<br>                    &quot;prefixIds&quot;,<br>                    &#123;<br>                      name: &quot;sortAttrs&quot;,<br>                      params: &#123;<br>                        xmlnsOrder: &quot;alphabetical&quot;,<br>                      &#125;,<br>                    &#125;,<br>                  ],<br>                &#125;,<br>              ],<br>            ],<br>          &#125;,<br>        &#125;,<br>      &#125;),<br>    ],<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>打包时出现了报错：</li></ol><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Error with &#x27;src\images\1.jpeg&#x27;: &#x27;&quot;C:\Users\86176\Desktop\webpack\webpack_code\node_modules\jpegtran-bin\vendor\jpegtran.exe&quot;&#x27;<br><span class="hljs-keyword">Error </span>with &#x27;src\images\3.gif&#x27;: spawn C:\Users\86176\Desktop\webpack\webpack_code\node_modules\optipng-bin\vendor\optipng.exe ENOENT<br></code></pre></td></tr></table></figure><p>需要安装两个文件到 node_modules 中，可以从官网下载然后放到目录下面</p><ul><li>jpegtran.exe，复制到 <code>node_modules\jpegtran-bin\vendor</code> 下面</li></ul><blockquote><p><a href="http://jpegclub.org/jpegtran/">jpegtran 官网地址</a></p></blockquote><ul><li>optipng.exe，复制到 <code>node_modules\optipng-bin\vendor</code> 下面</li></ul><blockquote><p><a href="http://optipng.sourceforge.net/">OptiPNG 官网地址</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 高级配置2：如何提高打包构建速度</title>
    <link href="/2022/11/24/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE2%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/"/>
    <url>/2022/11/24/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE2%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="提升打包构建速度-lifting-speed"><a href="#提升打包构建速度-lifting-speed" class="headerlink" title="提升打包构建速度 lifting speed"></a>提升打包构建速度 lifting speed</h1><h2 id="HotModuleReplacement"><a href="#HotModuleReplacement" class="headerlink" title="HotModuleReplacement"></a>HotModuleReplacement</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>开发时修改了其中一个模块代码，Webpack 默认会将所有模块全部重新打包编译，速度很慢。所以需要做到修改某个模块代码，就只有这个模块代码需要重新打包编译，其他模块不变。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>HotModuleReplacement（HMR&#x2F;热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>基本配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">// 启动服务器域名</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-comment">// 启动服务器端口号</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动打开浏览器</span><br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启HMR功能（只能用于开发环境，生产环境不需要了）</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>此时 css 样式经过 style-loader 处理，已经具备 HMR 功能了。<br>但是 js 还不行。</p><ol start="2"><li>JS 配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;17-28&#125;">// main.js<br>import count from &quot;./js/count&quot;;<br>import sum from &quot;./js/sum&quot;;<br>// 引入资源，Webpack才会对其打包<br>import &quot;./css/iconfont.css&quot;;<br>import &quot;./css/index.css&quot;;<br>import &quot;./less/index.less&quot;;<br>import &quot;./sass/index.sass&quot;;<br>import &quot;./sass/index.scss&quot;;<br>import &quot;./styl/index.styl&quot;;<br><br>const result1 = count(2, 1);<br>console.log(result1);<br>const result2 = sum(1, 2, 3, 4);<br>console.log(result2);<br><br>// 判断是否支持HMR功能<br>if (module.hot) &#123;<br>  module.hot.accept(&quot;./js/count.js&quot;, function (count) &#123;<br>    const result1 = count(2, 1);<br>    console.log(result1);<br>  &#125;);<br><br>  module.hot.accept(&quot;./js/sum.js&quot;, function (sum) &#123;<br>    const result2 = sum(1, 2, 3, 4);<br>    console.log(result2);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这样写会很麻烦，所以实际开发会使用其他 loader 来解决。</p><p>比如：<a href="https://github.com/vuejs/vue-loader">vue-loader</a>, <a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>。</p><h2 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a>OneOf</h2><h3 id="问题背景-1"><a href="#问题背景-1" class="headerlink" title="问题背景"></a>问题背景</h3><p>打包时每个文件都会经过所有 loader 处理，虽然因为 <code>test</code> 正则原因实际没有处理上，但是都要过一遍。比较慢。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>顾名思义就是只能匹配上一个 loader, 剩下的就不匹配了。</p><h3 id="使用方法：将所有的loader匹配数组都放在-oneOf-之中"><a href="#使用方法：将所有的loader匹配数组都放在-oneOf-之中" class="headerlink" title="使用方法：将所有的loader匹配数组都放在 oneOf 之中"></a>使用方法：将所有的loader匹配数组都放在 oneOf 之中</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ESLintWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;eslint-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-comment">// 开发模式没有输出，不需要指定输出目录</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/js/main.js&quot;</span>, <span class="hljs-comment">// 将 js 文件输出到 static/js 目录中</span><br>    <span class="hljs-comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span><br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">oneOf</span>: [<br>          &#123;<br>            <span class="hljs-comment">// 用来匹配 .css 结尾的文件</span><br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>            <span class="hljs-comment">// use 数组里面 Loader 执行顺序是从右到左</span><br>            <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>            <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.s[ac]ss$/</span>,<br>            <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;sass-loader&quot;</span>],<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.styl$/</span>,<br>            <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;stylus-loader&quot;</span>],<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpe?g|gif|webp)$/</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>            <span class="hljs-attr">parser</span>: &#123;<br>              <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>                <span class="hljs-attr">maxSize</span>: <span class="hljs-number">10</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">// 小于10kb的图片会被base64处理</span><br>              &#125;,<br>            &#125;,<br>            <span class="hljs-attr">generator</span>: &#123;<br>              <span class="hljs-comment">// 将图片文件输出到 static/imgs 目录中</span><br>              <span class="hljs-comment">// 将图片文件命名 [hash:8][ext][query]</span><br>              <span class="hljs-comment">// [hash:8]: hash值取8位</span><br>              <span class="hljs-comment">// [ext]: 使用之前的文件扩展名</span><br>              <span class="hljs-comment">// [query]: 添加之前的query参数</span><br>              <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(ttf|woff2?)$/</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>            <span class="hljs-attr">generator</span>: &#123;<br>              <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/media/[hash:8][ext][query]&quot;</span>,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 排除node_modules代码不编译</span><br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLintWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 指定检查文件的根目录</span><br>      <span class="hljs-attr">context</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 以 public/index.html 为模板创建文件</span><br>      <span class="hljs-comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../public/index.html&quot;</span>),<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 开发服务器</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">// 启动服务器域名</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-comment">// 启动服务器端口号</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动打开浏览器</span><br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启HMR功能</span><br>  &#125;,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;cheap-module-source-map&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>生产模式也是如此配置。</p><h2 id="Include-x2F-Exclude"><a href="#Include-x2F-Exclude" class="headerlink" title="Include&#x2F;Exclude"></a>Include&#x2F;Exclude</h2><p>·</p><h3 id="问题背景-2"><a href="#问题背景-2" class="headerlink" title="问题背景"></a>问题背景</h3><p>开发时需要使用第三方的库或插件，所有文件都下载到 node_modules 中了。而这些文件是不需要编译可以直接使用的。所以在对 js 文件处理时，要排除 node_modules 下面的文件。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p><code>include</code> 包含，只处理 xxx 文件</p></li><li><p><code>exclude</code> ，排除，除了 xxx 文件以外其他文件都处理</p></li></ul><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;60-61,72&#125;">const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: undefined, // 开发模式没有输出，不需要指定输出目录<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    // clean: true, // 开发模式没有输出，不需要清空输出结果<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|webp)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            generator: &#123;<br>              // 将图片文件输出到 static/imgs 目录中<br>              // 将图片文件命名 [hash:8][ext][query]<br>              // [hash:8]: hash值取8位<br>              // [ext]: 使用之前的文件扩展名<br>              // [query]: 添加之前的query参数<br>              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            generator: &#123;<br>              filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            loader: &quot;babel-loader&quot;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>  ],<br>  // 开发服务器<br>  devServer: &#123;<br>    host: &quot;localhost&quot;, // 启动服务器域名<br>    port: &quot;3000&quot;, // 启动服务器端口号<br>    open: true, // 是否自动打开浏览器<br>    hot: true, // 开启HMR功能<br>  &#125;,<br>  mode: &quot;development&quot;,<br>  devtool: &quot;cheap-module-source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>生产模式也是如此配置。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><h3 id="问题背景-3"><a href="#问题背景-3" class="headerlink" title="问题背景"></a>问题背景</h3><p>每次打包时 js 文件都要经过 Eslint 检查 和 Babel 编译，速度比较慢。可以缓存之前的 Eslint 检查 和 Babel 编译结果，这样第二次打包时速度就会更快了。</p><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p>对 Eslint 检查 和 Babel 编译结果进行缓存。</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;63-66,77-82&#125;">const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: undefined, // 开发模式没有输出，不需要指定输出目录<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    // clean: true, // 开发模式没有输出，不需要清空输出结果<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|webp)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            generator: &#123;<br>              // 将图片文件输出到 static/imgs 目录中<br>              // 将图片文件命名 [hash:8][ext][query]<br>              // [hash:8]: hash值取8位<br>              // [ext]: 使用之前的文件扩展名<br>              // [query]: 添加之前的query参数<br>              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            generator: &#123;<br>              filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            loader: &quot;babel-loader&quot;,<br>            options: &#123;<br>              cacheDirectory: true, // 开启babel编译缓存<br>              cacheCompression: false, // 缓存文件不要压缩<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录，能让第二次打包的速度变得很快<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>  ],<br>  // 开发服务器<br>  devServer: &#123;<br>    host: &quot;localhost&quot;, // 启动服务器域名<br>    port: &quot;3000&quot;, // 启动服务器端口号<br>    open: true, // 是否自动打开浏览器<br>    hot: true, // 开启HMR功能<br>  &#125;,<br>  mode: &quot;development&quot;,<br>  devtool: &quot;cheap-module-source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a>Thead</h2><h3 id="问题背景-4"><a href="#问题背景-4" class="headerlink" title="问题背景"></a>问题背景</h3><p>当项目越来越庞大时，打包速度越来越慢，甚至于需要一个下午，想要继续提升打包速度，其实就是要提升 js 的打包速度，因为其他文件都比较少。而对 js 文件处理主要就是 eslint 、babel、Terser 三个工具，所以要提升它们的运行速度。</p><p>其实可以开启多进程同时处理 js 文件，这样速度就比之前的单进程打包更快了。</p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><p>多进程打包：开启电脑的多个进程同时干一件事，速度更快。</p><p><strong>需要注意：仅在特别耗时的操作中使用，因为每个进程启动就有大约为 600ms 左右开销。</strong></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>启动进程的数量就是 CPU 的核数。</p><ol><li>如何获取 CPU 的核数，因为每个电脑都不一样。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// nodejs核心模块，直接使用</span><br><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;os&quot;</span>);<br><span class="hljs-comment">// cpu核数</span><br><span class="hljs-keyword">const</span> threads = os.<span class="hljs-title function_">cpus</span>().<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>下载包 <code>npm i thread-loader -D</code></p></li><li><p>使用</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;1,7,9-10,88-101,118,131,133-143&#125;">const os = require(&quot;os&quot;);<br>const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br>const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);<br>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);//压缩js<br><br>// cpu核数<br>const threads = os.cpus().length;<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        oneOf: [<br>          &#123;<br>            // 用来匹配 .css 结尾的文件<br>            test: /\.css$/,<br>            // use 数组里面 Loader 执行顺序是从右到左<br>            use: getStyleLoaders(),<br>          &#125;,<br>          &#123;<br>            test: /\.less$/,<br>            use: getStyleLoaders(&quot;less-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.s[ac]ss$/,<br>            use: getStyleLoaders(&quot;sass-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.styl$/,<br>            use: getStyleLoaders(&quot;stylus-loader&quot;),<br>          &#125;,<br>          &#123;<br>            test: /\.(png|jpe?g|gif|webp)$/,<br>            type: &quot;asset&quot;,<br>            parser: &#123;<br>              dataUrlCondition: &#123;<br>                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>              &#125;,<br>            &#125;,<br>            generator: &#123;<br>              // 将图片文件输出到 static/imgs 目录中<br>              // 将图片文件命名 [hash:8][ext][query]<br>              // [hash:8]: hash值取8位<br>              // [ext]: 使用之前的文件扩展名<br>              // [query]: 添加之前的query参数<br>              filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.(ttf|woff2?)$/,<br>            type: &quot;asset/resource&quot;,<br>            generator: &#123;<br>              filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>            &#125;,<br>          &#125;,<br>          &#123;<br>            test: /\.js$/,<br>            // exclude: /node_modules/, // 排除node_modules代码不编译<br>            include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含<br>            use: [<br>              //thead-loader放在babel-loader前面<br>              &#123;<br>                loader: &quot;thread-loader&quot;, // 开启多进程<br>                options: &#123;<br>                  workers: threads, // 数量<br>                &#125;,<br>              &#125;,<br>              &#123;<br>                loader: &quot;babel-loader&quot;,<br>                options: &#123;<br>                  cacheDirectory: true, // 开启babel编译缓存<br>                &#125;,<br>              &#125;,<br>            ],<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>      exclude: &quot;node_modules&quot;, // 默认值<br>      cache: true, // 开启缓存<br>      // 缓存目录<br>      cacheLocation: path.resolve(<br>        __dirname,<br>        &quot;../node_modules/.cache/.eslintcache&quot;<br>      ),<br>      threads, // 开启多进程和设置进程数量<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/main.css&quot;,<br>    &#125;),<br>    // css压缩<br>    // new CssMinimizerPlugin(),<br>  ],<br>  optimization: &#123;<br>    minimize: true,<br>    minimizer: [<br>      // css压缩也可以写到optimization.minimizer里面，效果一样的<br>      new CssMinimizerPlugin(),<br>      // 当生产模式会默认开启TerserPlugin，但是需要进行其他配置，就要重新写了<br>      new TerserPlugin(&#123;<br>        parallel: threads // 开启多进程<br>      &#125;)<br>    ],<br>  &#125;,<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>  devtool: &quot;source-map&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>目前打包的内容都很少，所以因为启动进程开销原因，使用多进程打包实际上会显著的让打包时间变得很长。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 高级配置1：SourceMap 如何提升开发体验</title>
    <link href="/2022/11/24/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE1%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C/"/>
    <url>/2022/11/24/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE1%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="提升开发体验：SourceMap"><a href="#提升开发体验：SourceMap" class="headerlink" title="提升开发体验：SourceMap"></a>提升开发体验：SourceMap</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>开发时运行的代码是经过 webpack 编译后的，例如下面这个样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span><br><span class="hljs-comment"> * This devtool is neither made for production nor for readable output files.</span><br><span class="hljs-comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span><br><span class="hljs-comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span><br><span class="hljs-comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span><br><span class="hljs-comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/******/</span> (<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// webpackBootstrap</span><br><span class="hljs-comment">/******/</span> <span class="hljs-string">&quot;use strict&quot;</span>;<br><span class="hljs-comment">/******/</span> <span class="hljs-keyword">var</span> __webpack_modules__ = (&#123;<br><br><span class="hljs-comment">/***/</span> <span class="hljs-string">&quot;./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/less/index.less&quot;</span>:<br><span class="hljs-comment">/*!**********************************************************************************************************!*\</span><br><span class="hljs-comment">  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/less/index.less ***!</span><br><span class="hljs-comment">  \**********************************************************************************************************/</span><br><span class="hljs-comment">/***/</span> (<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span>, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;<br><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\n/* harmony export */   \&quot;default\&quot;: () =&gt; (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ &#125;);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \&quot;./node_modules/css-loader/dist/runtime/noSourceMaps.js\&quot;);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \&quot;./node_modules/css-loader/dist/runtime/api.js\&quot;);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \&quot;.box2 &#123;\\n  width: 100px;\\n  height: 100px;\\n  background-color: deeppink;\\n&#125;\\n\&quot;, \&quot;\&quot;]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://webpack5/./src/less/index.less?./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js&quot;</span>);<br><br><span class="hljs-comment">/***/</span> &#125;),<br><span class="hljs-comment">// 其他省略</span><br></code></pre></td></tr></table></figure><p>所有 css 和 js 合并成了一个文件，并且多了其他代码。此时如果代码运行出错那么提示代码错误位置是看不懂的。一旦将来开发代码文件很多，那么很难去发现错误出现在哪里。所以需要更加准确的错误提示。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。</p><p>它会生成一个 xxx.map 文件，里面包含源代码和构建后代码每一行、每一列的映射关系。当构建后代码出错了，会通过 xxx.map 文件，从构建后代码出错位置找到映射后源代码出错位置，从而让浏览器提示源代码文件出错位置，帮助更快的找到错误根源。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>通过查看<a href="https://webpack.docschina.org/configuration/devtool/">Webpack DevTool 文档</a>可知，SourceMap 的值有很多种情况.</p><p>但实际开发时只需要关注两种情况即可：</p><ul><li><p>开发模式：<code>cheap-module-source-map</code></p><ul><li>优点：打包编译速度快，只包含行映射</li><li>缺点：没有列映射</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;cheap-module-source-map&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>生产模式：<code>source-map</code><ul><li>优点：包含行&#x2F;列映射</li><li>缺点：打包编译速度更慢</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;source-map&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>修改配置后记得重启服务器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 入门学习笔记（下）：生产模式下进一步优化处理</title>
    <link href="/2022/11/23/Webpack5%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%A4%84%E7%90%86/"/>
    <url>/2022/11/23/Webpack5%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="生产模式介绍"><a href="#生产模式介绍" class="headerlink" title="生产模式介绍"></a>生产模式介绍</h1><p>从<code>运行性能</code>和<code>打包速度</code>方面优化代码</p><h2 id="生产模式准备"><a href="#生产模式准备" class="headerlink" title="生产模式准备"></a>生产模式准备</h2><p>我们分别准备两个配置文件来放不同的配置</p><h3 id="1-文件目录"><a href="#1-文件目录" class="headerlink" title="1. 文件目录"></a>1. 文件目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">├── webpack-test (项目根目录)<br>    ├── config (Webpack配置文件目录)<br>    │    ├── webpack.dev.js(开发模式配置文件)<br>    │    └── webpack.prod.js(生产模式配置文件)<br>    ├── node_modules (下载包存放目录)<br>    ├── src (项目源码目录，除了html其他都在src里面)<br>    │    └── 略<br>    ├── public (项目html文件)<br>    │    └── index.html<br>    ├── .eslintrc.js(Eslint配置文件)<br>    ├── babel.config.js(Babel配置文件)<br>    └── package.json (包的依赖管理配置文件)<br></code></pre></td></tr></table></figure><h3 id="2-修改-webpack-dev-js"><a href="#2-修改-webpack-dev-js" class="headerlink" title="2. 修改 webpack.dev.js"></a>2. 修改 webpack.dev.js</h3><p>因为文件目录变了，所以所有绝对路径需要回退一层目录才能找到对应的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ESLintWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;eslint-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-comment">// 开发模式没有输出，不需要指定输出目录</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/js/main.js&quot;</span>, <span class="hljs-comment">// 将 js 文件输出到 static/js 目录中</span><br>    <span class="hljs-comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span><br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 用来匹配 .css 结尾的文件</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// use 数组里面 Loader 执行顺序是从右到左</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.s[ac]ss$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;sass-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.styl$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;stylus-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpe?g|gif|webp)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">10</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">// 小于10kb的图片会被base64处理</span><br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-comment">// 将图片文件输出到 static/imgs 目录中</span><br>          <span class="hljs-comment">// 将图片文件命名 [hash:8][ext][query]</span><br>          <span class="hljs-comment">// [hash:8]: hash值取8位</span><br>          <span class="hljs-comment">// [ext]: 使用之前的文件扩展名</span><br>          <span class="hljs-comment">// [query]: 添加之前的query参数</span><br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(ttf|woff2?)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/media/[hash:8][ext][query]&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 排除node_modules代码不编译</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLintWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 指定检查文件的根目录</span><br>      <span class="hljs-attr">context</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 以 public/index.html 为模板创建文件</span><br>      <span class="hljs-comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../public/index.html&quot;</span>),<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">// 启动服务器域名</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-comment">// 启动服务器端口号</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动打开浏览器</span><br>  &#125;,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>运行开发模式的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npx webpack serve --config ./config/webpack.dev.js<br></code></pre></td></tr></table></figure><h3 id="3-修改-webpack-prod-js"><a href="#3-修改-webpack-prod-js" class="headerlink" title="3. 修改 webpack.prod.js"></a>3. 修改 webpack.prod.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ESLintWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;eslint-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../dist&quot;</span>), <span class="hljs-comment">// 生产模式需要输出</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/js/main.js&quot;</span>, <span class="hljs-comment">// 将 js 文件输出到 static/js 目录中</span><br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 用来匹配 .css 结尾的文件</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// use 数组里面 Loader 执行顺序是从右到左</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.s[ac]ss$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;sass-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.styl$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;stylus-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpe?g|gif|webp)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">10</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">// 小于10kb的图片会被base64处理</span><br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-comment">// 将图片文件输出到 static/imgs 目录中</span><br>          <span class="hljs-comment">// 将图片文件命名 [hash:8][ext][query]</span><br>          <span class="hljs-comment">// [hash:8]: hash值取8位</span><br>          <span class="hljs-comment">// [ext]: 使用之前的文件扩展名</span><br>          <span class="hljs-comment">// [query]: 添加之前的query参数</span><br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(ttf|woff2?)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/media/[hash:8][ext][query]&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 排除node_modules代码不编译</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLintWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 指定检查文件的根目录</span><br>      <span class="hljs-attr">context</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 以 public/index.html 为模板创建文件</span><br>      <span class="hljs-comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../public/index.html&quot;</span>),<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// devServer: &#123;</span><br>  <span class="hljs-comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span><br>  <span class="hljs-comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span><br>  <span class="hljs-comment">//   open: true, // 是否自动打开浏览器</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>运行生产模式的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npx webpack --config ./config/webpack.prod.js<br></code></pre></td></tr></table></figure><h3 id="4-配置运行指令"><a href="#4-配置运行指令" class="headerlink" title="4. 配置运行指令"></a>4. 配置运行指令</h3><p>为了方便运行不同模式的指令，我们将指令定义在 package.json 中 scripts 里面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run dev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npx webpack serve --config ./config/webpack.dev.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npx webpack --config ./config/webpack.prod.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>以后启动指令：</p><ul><li>开发模式：<code>npm start</code> 或 <code>npm run dev</code></li><li>生产模式：<code>npm run build</code></li></ul><h1 id="Css-处理"><a href="#Css-处理" class="headerlink" title="Css 处理"></a>Css 处理</h1><h2 id="提取-Css-成单独文件"><a href="#提取-Css-成单独文件" class="headerlink" title="提取 Css 成单独文件"></a>提取 Css 成单独文件</h2><p>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式。这样对于网站来说，会出现闪屏现象，用户体验不好</p><p>我们应该是单独的 Css 文件，通过 link 标签加载性能才好</p><h3 id="1-下载包"><a href="#1-下载包" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i mini-css-extract-plugin -D<br></code></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ESLintWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;eslint-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../dist&quot;</span>), <span class="hljs-comment">// 生产模式需要输出</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/js/main.js&quot;</span>, <span class="hljs-comment">// 将 js 文件输出到 static/js 目录中</span><br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-comment">// 用来匹配 .css 结尾的文件</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// use 数组里面 Loader 执行顺序是从右到左</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.s[ac]ss$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;sass-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.styl$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;stylus-loader&quot;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpe?g|gif|webp)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset&quot;</span>,<br>        <span class="hljs-attr">parser</span>: &#123;<br>          <span class="hljs-attr">dataUrlCondition</span>: &#123;<br>            <span class="hljs-attr">maxSize</span>: <span class="hljs-number">10</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">// 小于10kb的图片会被base64处理</span><br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-comment">// 将图片文件输出到 static/imgs 目录中</span><br>          <span class="hljs-comment">// 将图片文件命名 [hash:8][ext][query]</span><br>          <span class="hljs-comment">// [hash:8]: hash值取8位</span><br>          <span class="hljs-comment">// [ext]: 使用之前的文件扩展名</span><br>          <span class="hljs-comment">// [query]: 添加之前的query参数</span><br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(ttf|woff2?)$/</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>        <span class="hljs-attr">generator</span>: &#123;<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/media/[hash:8][ext][query]&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 排除node_modules代码不编译</span><br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLintWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 指定检查文件的根目录</span><br>      <span class="hljs-attr">context</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 以 public/index.html 为模板创建文件</span><br>      <span class="hljs-comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../public/index.html&quot;</span>),<br>    &#125;),<br>    <span class="hljs-comment">// 提取css成单独文件</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-comment">// 定义输出文件名和目录</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/css/main.css&quot;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// devServer: &#123;</span><br>  <span class="hljs-comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span><br>  <span class="hljs-comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span><br>  <span class="hljs-comment">//   open: true, // 是否自动打开浏览器</span><br>  <span class="hljs-comment">// &#125;,</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-运行指令"><a href="#3-运行指令" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm run build<br></code></pre></td></tr></table></figure><h2 id="Css-兼容性处理"><a href="#Css-兼容性处理" class="headerlink" title="Css 兼容性处理"></a>Css 兼容性处理</h2><h3 id="1-下载包-1"><a href="#1-下载包-1" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i postcss-loader postcss postcss-preset-env -D<br></code></pre></td></tr></table></figure><h3 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;22-31,39-48,57-66,75-84&#125;">const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        // 用来匹配 .css 结尾的文件<br>        test: /\.css$/,<br>        // use 数组里面 Loader 执行顺序是从右到左<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          &quot;css-loader&quot;,<br>          &#123;<br>            loader: &quot;postcss-loader&quot;,<br>            options: &#123;<br>              postcssOptions: &#123;<br>                plugins: [<br>                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>                ],<br>              &#125;,<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        test: /\.less$/,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          &quot;css-loader&quot;,<br>          &#123;<br>            loader: &quot;postcss-loader&quot;,<br>            options: &#123;<br>              postcssOptions: &#123;<br>                plugins: [<br>                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>                ],<br>              &#125;,<br>            &#125;,<br>          &#125;,<br>          &quot;less-loader&quot;,<br>        ],<br>      &#125;,<br>      &#123;<br>        test: /\.s[ac]ss$/,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          &quot;css-loader&quot;,<br>          &#123;<br>            loader: &quot;postcss-loader&quot;,<br>            options: &#123;<br>              postcssOptions: &#123;<br>                plugins: [<br>                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>                ],<br>              &#125;,<br>            &#125;,<br>          &#125;,<br>          &quot;sass-loader&quot;,<br>        ],<br>      &#125;,<br>      &#123;<br>        test: /\.styl$/,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          &quot;css-loader&quot;,<br>          &#123;<br>            loader: &quot;postcss-loader&quot;,<br>            options: &#123;<br>              postcssOptions: &#123;<br>                plugins: [<br>                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>                ],<br>              &#125;,<br>            &#125;,<br>          &#125;,<br>          &quot;stylus-loader&quot;,<br>        ],<br>      &#125;,<br>      &#123;<br>        test: /\.(png|jpe?g|gif|webp)$/,<br>        type: &quot;asset&quot;,<br>        parser: &#123;<br>          dataUrlCondition: &#123;<br>            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>          &#125;,<br>        &#125;,<br>        generator: &#123;<br>          // 将图片文件输出到 static/imgs 目录中<br>          // 将图片文件命名 [hash:8][ext][query]<br>          // [hash:8]: hash值取8位<br>          // [ext]: 使用之前的文件扩展名<br>          // [query]: 添加之前的query参数<br>          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: /\.(ttf|woff2?)$/,<br>        type: &quot;asset/resource&quot;,<br>        generator: &#123;<br>          filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: /\.js$/,<br>        exclude: /node_modules/, // 排除node_modules代码不编译<br>        loader: &quot;babel-loader&quot;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/main.css&quot;,<br>    &#125;),<br>  ],<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-控制兼容性"><a href="#3-控制兼容性" class="headerlink" title="3. 控制兼容性"></a>3. 控制兼容性</h3><p>在 <code>package.json</code> 文件中添加 <code>browserslist</code> 来控制样式的兼容性做到什么程度。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ie &gt;= 8&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>想要知道更多的 <code>browserslist</code> 配置，查看<a href="https://github.com/browserslist/browserslist">browserslist 文档</a></p><p>以上为了测试兼容性所以设置兼容浏览器 ie8 以上。</p><p>实际开发中我们一般不考虑旧版本浏览器了，所以我们可以这样设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 其他省略</span><br>  <span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;last 2 version&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;not dead&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-封装处理样式的-Loaders-函数，合并配置"><a href="#4-封装处理样式的-Loaders-函数，合并配置" class="headerlink" title="4. 封装处理样式的 Loaders 函数，合并配置"></a>4. 封装处理样式的 Loaders 函数，合并配置</h3><p>可以看出上面重复的代码太多了，所以封装一个 getStyleLoaders 方法，增强代码复用性</p><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;6-23,38,42,46,50&#125;">const path = require(&quot;path&quot;);<br>const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);<br>const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);<br>const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);<br><br>// 获取处理样式的Loaders<br>const getStyleLoaders = (preProcessor) =&gt; &#123;<br>  return [<br>    MiniCssExtractPlugin.loader,<br>    &quot;css-loader&quot;,<br>    &#123;<br>      loader: &quot;postcss-loader&quot;,<br>      options: &#123;<br>        postcssOptions: &#123;<br>          plugins: [<br>            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题<br>          ],<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>    preProcessor,<br>  ].filter(Boolean);<br>&#125;;<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出<br>    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中<br>    clean: true,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        // 用来匹配 .css 结尾的文件<br>        test: /\.css$/,<br>        // use 数组里面 Loader 执行顺序是从右到左<br>        use: getStyleLoaders(),<br>      &#125;,<br>      &#123;<br>        test: /\.less$/,<br>        use: getStyleLoaders(&quot;less-loader&quot;),<br>      &#125;,<br>      &#123;<br>        test: /\.s[ac]ss$/,<br>        use: getStyleLoaders(&quot;sass-loader&quot;),<br>      &#125;,<br>      &#123;<br>        test: /\.styl$/,<br>        use: getStyleLoaders(&quot;stylus-loader&quot;),<br>      &#125;,<br>      &#123;<br>        test: /\.(png|jpe?g|gif|webp)$/,<br>        type: &quot;asset&quot;,<br>        parser: &#123;<br>          dataUrlCondition: &#123;<br>            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理<br>          &#125;,<br>        &#125;,<br>        generator: &#123;<br>          // 将图片文件输出到 static/imgs 目录中<br>          // 将图片文件命名 [hash:8][ext][query]<br>          // [hash:8]: hash值取8位<br>          // [ext]: 使用之前的文件扩展名<br>          // [query]: 添加之前的query参数<br>          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: /\.(ttf|woff2?)$/,<br>        type: &quot;asset/resource&quot;,<br>        generator: &#123;<br>          filename: &quot;static/media/[hash:8][ext][query]&quot;,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: /\.js$/,<br>        exclude: /node_modules/, // 排除node_modules代码不编译<br>        loader: &quot;babel-loader&quot;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    new ESLintWebpackPlugin(&#123;<br>      // 指定检查文件的根目录<br>      context: path.resolve(__dirname, &quot;../src&quot;),<br>    &#125;),<br>    new HtmlWebpackPlugin(&#123;<br>      // 以 public/index.html 为模板创建文件<br>      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源<br>      template: path.resolve(__dirname, &quot;../public/index.html&quot;),<br>    &#125;),<br>    // 提取css成单独文件<br>    new MiniCssExtractPlugin(&#123;<br>      // 定义输出文件名和目录<br>      filename: &quot;static/css/main.css&quot;,<br>    &#125;),<br>  ],<br>  // devServer: &#123;<br>  //   host: &quot;localhost&quot;, // 启动服务器域名<br>  //   port: &quot;3000&quot;, // 启动服务器端口号<br>  //   open: true, // 是否自动打开浏览器<br>  // &#125;,<br>  mode: &quot;production&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-运行指令"><a href="#5-运行指令" class="headerlink" title="5. 运行指令"></a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm run build<br></code></pre></td></tr></table></figure><h2 id="Css-压缩"><a href="#Css-压缩" class="headerlink" title="Css 压缩"></a>Css 压缩</h2><p>默认生产模式已经开启了 html 压缩和 js 压缩，不需要额外进行配置。<br>所以配置一下 css 压缩即可。</p><h3 id="1-下载包-2"><a href="#1-下载包-2" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i css-minimizer-webpack-plugin -D<br></code></pre></td></tr></table></figure><h3 id="2-配置-2"><a href="#2-配置-2" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CssMinimizerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;css-minimizer-webpack-plugin&quot;</span>);<br><br><span class="hljs-attr">plugins</span>: [<br><span class="hljs-comment">// css压缩</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">CssMinimizerPlugin</span>(),<br>],<br></code></pre></td></tr></table></figure><h3 id="3-运行指令-1"><a href="#3-运行指令-1" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm run build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 入门学习笔记（中）：使用 Eslint 和 Babel 处理js资源</title>
    <link href="/2022/11/23/Webpack5%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8%20Eslint%20%E5%92%8C%20Babel%20%E5%A4%84%E7%90%86js%E8%B5%84%E6%BA%90/"/>
    <url>/2022/11/23/Webpack5%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8%20Eslint%20%E5%92%8C%20Babel%20%E5%A4%84%E7%90%86js%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="处理-js-资源"><a href="#处理-js-资源" class="headerlink" title="处理 js 资源"></a>处理 js 资源</h1><p>Webpack 对 js 处理是有限的，只能编译 js 中 ES 模块化语法，不能编译其他语法，导致 js 不能在 IE 等浏览器运行，需要一些兼容性处理。而且团队对代码格式是有严格要求的，不能由肉眼去检测代码格式，需要使用专业的工具来检测。</p><ul><li>针对 js 兼容性处理，使用 Babel 来完成</li><li>针对代码格式，使用 Eslint 来完成</li></ul><p>先完成 Eslint，检测代码格式无误后，在由 Babel 做代码兼容性处理</p><h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><p>可组装的 JavaScript 和 JSX 检查工具。</p><p>这句话意思就是：它是用来检测 js 和 jsx 语法的工具，可以配置各项功能。使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查</p><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>配置文件由很多种写法：</p><ul><li><code>.eslintrc.*</code>：新建文件，位于项目根目录<ul><li><code>.eslintrc</code></li><li><code>.eslintrc.js</code></li><li><code>.eslintrc.json</code></li><li>区别在于配置格式不一样</li></ul></li><li><code>package.json</code> 中 <code>eslintConfig</code>：不需要创建文件，在原有文件基础上写</li></ul><p>ESLint 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p><h3 id="2-具体配置"><a href="#2-具体配置" class="headerlink" title="2. 具体配置"></a>2. 具体配置</h3><p>以 <code>.eslintrc.js</code> 配置文件为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 解析选项</span><br>  <span class="hljs-attr">parserOptions</span>: &#123;&#125;,<br>  <span class="hljs-comment">// 具体检查规则</span><br>  <span class="hljs-attr">rules</span>: &#123;&#125;,<br>  <span class="hljs-comment">// 继承其他规则</span><br>  <span class="hljs-attr">extends</span>: [],<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 其他规则详见：https://eslint.bootcss.com/docs/user-guide/configuring</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>parserOptions 解析选项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">parserOptions</span>: &#123;<br>  <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// ES 语法版本</span><br>  <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// ES 模块化</span><br>  <span class="hljs-attr">ecmaFeatures</span>: &#123; <span class="hljs-comment">// ES 其他特性</span><br>    <span class="hljs-attr">jsx</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 如果是 React 项目，就需要开启 jsx 语法</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>rules 具体规则</li></ol><ul><li><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则</li><li><code>&quot;warn&quot;</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)</li><li><code>&quot;error&quot;</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">rules</span>: &#123;<br>  <span class="hljs-attr">semi</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-comment">// 禁止使用分号</span><br>  <span class="hljs-string">&#x27;array-callback-return&#x27;</span>: <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-comment">// 强制数组方法的回调函数中有 return 语句，否则警告</span><br>  <span class="hljs-string">&#x27;default-case&#x27;</span>: [<br>    <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-comment">// 要求 switch 语句中有 default 分支，否则警告</span><br>    &#123; <span class="hljs-attr">commentPattern</span>: <span class="hljs-string">&#x27;^no default$&#x27;</span> &#125; <span class="hljs-comment">// 允许在最后注释 no default, 就不会有警告了</span><br>  ],<br>  <span class="hljs-attr">eqeqeq</span>: [<br>    <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-comment">// 强制使用 === 和 !==，否则警告</span><br>    <span class="hljs-string">&#x27;smart&#x27;</span> <span class="hljs-comment">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span><br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>更多规则详见：<a href="https://eslint.bootcss.com/docs/rules/">规则文档</a></p><ol start="3"><li>extends 继承</li></ol><p>开发中一点点写 rules 规则太费劲了。</p><p>现有以下较为有名的规则：</p><ul><li><a href="https://eslint.bootcss.com/docs/rules/">Eslint 官方的规则</a>：<code>eslint:recommended</code></li><li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-eslint">Vue Cli 官方的规则</a>：<code>plugin:vue/essential</code></li><li><a href="https://github.com/facebook/create-react-app/tree/main/packages/eslint-config-react-app">React Cli 官方的规则</a>：<code>react-app</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如在React项目中，可以这样写配置</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&quot;react-app&quot;</span>],<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// 的规则会覆盖掉react-app的规则</span><br>    <span class="hljs-comment">// 所以想要修改规则直接改就是了</span><br>    <span class="hljs-attr">eqeqeq</span>: [<span class="hljs-string">&quot;warn&quot;</span>, <span class="hljs-string">&quot;smart&quot;</span>],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-在-Webpack-中使用"><a href="#3-在-Webpack-中使用" class="headerlink" title="3. 在 Webpack 中使用"></a>3. 在 Webpack 中使用</h3><ol><li>下载包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i eslint-webpack-plugin eslint -D<br></code></pre></td></tr></table></figure><ol start="2"><li>定义 Eslint 配置文件</li></ol><ul><li>.eslintrc.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 继承 Eslint 规则</span><br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&quot;eslint:recommended&quot;</span>],<br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用node中全局变量</span><br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用浏览器中全局变量</span><br>  &#125;,<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&quot;no-var&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 不能使用 var 定义变量</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>修改 js 文件代码</li></ol><ul><li>main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;11-14&#125;">import count from &quot;./js/count&quot;;<br>import sum from &quot;./js/sum&quot;;<br>// 引入资源，Webpack才会对其打包<br>import &quot;./css/iconfont.css&quot;;<br>import &quot;./css/index.css&quot;;<br>import &quot;./less/index.less&quot;;<br>import &quot;./sass/index.sass&quot;;<br>import &quot;./sass/index.scss&quot;;<br>import &quot;./styl/index.styl&quot;;<br><br>var result1 = count(2, 1);<br>console.log(result1);<br>var result2 = sum(1, 2, 3, 4);<br>console.log(result2);<br></code></pre></td></tr></table></figure><ol><li>配置</li></ol><ul><li>webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ESLintWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;eslint-webpack-plugin&quot;</span>);<br><br> <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLintWebpackPlugin</span>(&#123;<br>      <span class="hljs-comment">// 指定检查文件的根目录</span><br>      <span class="hljs-attr">context</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src&quot;</span>),<br>    &#125;),<br>  ],<br></code></pre></td></tr></table></figure><ol start="5"><li>运行指令，在控制台查看 Eslint 检查效果</li></ol><h3 id="4-VSCode-Eslint-插件"><a href="#4-VSCode-Eslint-插件" class="headerlink" title="4. VSCode Eslint 插件"></a>4. VSCode Eslint 插件</h3><p>下载了 Eslint 插件之后，即可不用编译就能看到错误，可以提前解决。但是此时就会对项目所有文件默认进行 Eslint 检查了， dist 目录下的打包后文件就会报错。但是只需要检查 src 下面的文件，不需要检查 dist 下面的文件。所以可以使用 Eslint 忽略文件解决。在项目根目录新建下面文件:</p><ul><li><code>.eslintignore</code></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"># 忽略<span class="hljs-built_in">dist</span>目录下所有文件<br><span class="hljs-built_in">dist</span><br></code></pre></td></tr></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>JavaScript 编译器。</p><p>主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</p><h3 id="1-配置文件-1"><a href="#1-配置文件-1" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>配置文件由很多种写法：</p><ul><li><code>babel.config.*</code>：新建文件，位于项目根目录<ul><li><code>babel.config.js</code></li><li><code>babel.config.json</code></li></ul></li><li><code>.babelrc.*</code>：新建文件，位于项目根目录<ul><li><code>.babelrc</code></li><li><code>.babelrc.js</code></li><li><code>.babelrc.json</code></li></ul></li><li><code>package.json</code> 中 <code>babel</code>：不需要创建文件，在原有文件基础上写</li></ul><p>Babel 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p><h3 id="2-具体配置-1"><a href="#2-具体配置-1" class="headerlink" title="2. 具体配置"></a>2. 具体配置</h3><p>以 <code>babel.config.js</code> 配置文件为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 预设</span><br>  <span class="hljs-attr">presets</span>: [],<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>presets 预设</li></ol><p>简单理解：就是一组 Babel 插件, 扩展 Babel 功能</p><ul><li><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript。</li><li><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</li><li><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</li></ul><h3 id="3-在-Webpack-中使用-1"><a href="#3-在-Webpack-中使用-1" class="headerlink" title="3. 在 Webpack 中使用"></a>3. 在 Webpack 中使用</h3><ol><li>下载包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i babel-loader @babel/core @babel/preset-env -D<br></code></pre></td></tr></table></figure><ol start="2"><li>定义 Babel 配置文件</li></ol><ul><li>babel.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>修改 js 文件代码</li></ol><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> count <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/count&quot;</span>;<br><span class="hljs-keyword">import</span> sum <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/sum&quot;</span>;<br><span class="hljs-comment">// 引入资源，Webpack才会对其打包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/iconfont.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./css/index.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./less/index.less&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./sass/index.sass&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./sass/index.scss&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./styl/index.styl&quot;</span>;<br><br><span class="hljs-keyword">const</span> result1 = <span class="hljs-title function_">count</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1);<br><span class="hljs-keyword">const</span> result2 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br></code></pre></td></tr></table></figure><ol start="4"><li>配置</li></ol><ul><li>webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>    <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 排除node_modules代码不编译</span><br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>&#125;,<br><br></code></pre></td></tr></table></figure><ol start="5"><li>运行指令</li></ol><p>打开打包后的 <code>dist/static/js/main.js</code> 文件查看，会发现箭头函数等 ES6 语法已经转换了</p><h1 id="处理-Html-资源，自动引入打包"><a href="#处理-Html-资源，自动引入打包" class="headerlink" title="处理 Html 资源，自动引入打包"></a>处理 Html 资源，自动引入打包</h1><h2 id="1-下载包-npm-i-html-webpack-plugin-D"><a href="#1-下载包-npm-i-html-webpack-plugin-D" class="headerlink" title="1. 下载包 npm i html-webpack-plugin -D"></a>1. 下载包 <code>npm i html-webpack-plugin -D</code></h2><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li>webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-comment">// 以 public/index.html 为模板创建文件</span><br>    <span class="hljs-comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br>    <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;public/index.html&quot;</span>),<br>  &#125;),<br>],<br><br></code></pre></td></tr></table></figure><h2 id="3-修改-index-html"><a href="#3-修改-index-html" class="headerlink" title="3. 修改 index.html"></a>3. 修改 index.html</h2><p>去掉引入的 js 文件，因为 HtmlWebpackPlugin 会自动引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>webpack5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello Webpack5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-arrow-down&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-ashbin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-browse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-运行指令"><a href="#4-运行指令" class="headerlink" title="4. 运行指令"></a>4. 运行指令</h2><p>此时 dist 目录就会输出一个 index.html 文件<br><code>Tips</code>：自动引入的 script 里含有 defer 属性，下载后代码并不会立刻执行，直到dom加载完成，onload之前执行，并且不会阻塞其他处理过程，可以并行下载。带有defer属性的script标签可以放到页面中的任何位置。</p><h1 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器 &amp; 自动化"></a>开发服务器 &amp; 自动化</h1><p>每次写完代码都需要手动输入指令才能编译代码，为了让其自动化需要 dev-server</p><h2 id="1-下载包"><a href="#1-下载包" class="headerlink" title="1. 下载包"></a>1. 下载包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i webpack-dev-server -D<br></code></pre></td></tr></table></figure><h2 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li>webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 开发服务器：不会输出资源，在内存中编译打包；因为不输出资源，clearn：true 需要注释掉</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">// 启动服务器域名</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-comment">// 启动服务器端口号</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动打开浏览器</span><br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="3-运行指令"><a href="#3-运行指令" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npx webpack serve<br></code></pre></td></tr></table></figure><p><strong>注意运行指令发生了变化</strong></p><p>使用开发服务器时，所有代码都会在内存中编译打包，并不会输出到 dist 目录下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack5 入门学习笔记（上）：处理图片字体等资源</title>
    <link href="/2022/11/23/Webpack5%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%AD%97%E4%BD%93%E7%AD%89%E8%B5%84%E6%BA%90/"/>
    <url>/2022/11/23/Webpack5%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%AD%97%E4%BD%93%E7%AD%89%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="5-大核心概念"><a href="#5-大核心概念" class="headerlink" title="5 大核心概念"></a>5 大核心概念</h2><ol><li><p>entry（入口），指示 Webpack 从哪个文件开始打包</p></li><li><p>output（输出），指示 Webpack 打包完的文件输出到哪里去，如何命名等</p></li><li><p>loader（加载器），webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</p></li><li><p>plugins（插件）扩展 Webpack 的功能</p></li><li><p>mode（模式），development 和 production</p></li></ol><h2 id="准备在项目根目录下创建配置文件：webpack-config-js"><a href="#准备在项目根目录下创建配置文件：webpack-config-js" class="headerlink" title="准备在项目根目录下创建配置文件：webpack.config.js"></a>准备在项目根目录下创建配置文件：<code>webpack.config.js</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Node.js的核心模块，专门用来处理文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 入口</span><br>  <span class="hljs-comment">// 相对路径和绝对路径都行</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-comment">// 输出</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// path: 文件输出目录，必须是绝对路径</span><br>    <span class="hljs-comment">// path.resolve()方法返回一个绝对路径</span><br>    <span class="hljs-comment">// __dirname 当前文件的文件夹绝对路径</span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-comment">// filename: 输出文件名</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;main.js&quot;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 加载器</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [],<br>  &#125;,<br>  <span class="hljs-comment">// 插件</span><br>  <span class="hljs-attr">plugins</span>: [],<br>  <span class="hljs-comment">// 模式</span><br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-comment">// 开发模式</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范<br>运行指令 <code>npx webpack</code><br>面会以两个模式来分别搭建 Webpack 的配置，先进行开发模式，再完成生产模式</p><h2 id="开发模式介绍"><a href="#开发模式介绍" class="headerlink" title="开发模式介绍"></a>开发模式介绍</h2><p>开发模式顾名思义就是开发代码时使用的模式。</p><p>这个模式下主要做两件事：</p><ol><li>编译代码，使浏览器能识别运行</li></ol><p>开发时有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以要加载配置来编译这些资源</p><ol start="2"><li>代码质量检查，树立代码规范</li></ol><p>提前检查代码的一些隐患，让代码运行时能更加健壮。<br>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</p><h2 id="处理样式资源：Css、Less、Sass、Scss、Styl"><a href="#处理样式资源：Css、Less、Sass、Scss、Styl" class="headerlink" title="处理样式资源：Css、Less、Sass、Scss、Styl"></a>处理样式资源：Css、Less、Sass、Scss、Styl</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Webpack 本身是不能识别样式资源的，所以需要借助 Loader 来帮助 Webpack 解析样式资源。找 Loader 都应该去官方文档中找到对应的 Loader，然后使用官方文档(<a href="https://webpack.docschina.org/loaders/)%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BB%8E%E7%A4%BE%E5%8C%BA">https://webpack.docschina.org/loaders/)找不到的话，可以从社区</a> Github 中搜索查询。</p><h3 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a>处理 Css 资源</h3><h4 id="1-下载包，需要下载两个-loader"><a href="#1-下载包，需要下载两个-loader" class="headerlink" title="1. 下载包，需要下载两个 loader"></a>1. 下载包，需要下载两个 loader</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs :no-line-numbers">npm i css-loader style-loader -D<br></code></pre></td></tr></table></figure><h4 id="2-功能介绍"><a href="#2-功能介绍" class="headerlink" title="2. 功能介绍"></a>2. 功能介绍</h4><ul><li><code>css-loader</code>：负责将 Css 文件编译成 Webpack 能识别的模块</li><li><code>style-loader</code>：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容</li></ul><p>此时样式就会以 Style 标签的形式在页面上生效</p><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js&#123;11-16&#125;">const path = require(&quot;path&quot;);<br><br>module.exports = &#123;<br>  entry: &quot;./src/main.js&quot;,<br>  output: &#123;<br>    path: path.resolve(__dirname, &quot;dist&quot;),<br>    filename: &quot;main.js&quot;,<br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        // 用来匹配 .css 结尾的文件<br>        test: /\.css$/,<br>        // use 数组里面 Loader 执行顺序是从右到左<br>        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [],<br>  mode: &quot;development&quot;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>添加 Css 资源 然后运行查看效果</p><h3 id="处理-Less-资源"><a href="#处理-Less-资源" class="headerlink" title="处理 Less 资源"></a>处理 Less 资源</h3><ol><li>下载包 <code>npm i less-loader -D</code></li></ol><ul><li><code>less-loader</code>：负责将 Less 文件编译成 Css 文件</li></ul><ol start="2"><li>配置<br>在 module rules 数组里添加如下对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>&#125;,<br></code></pre></td></tr></table></figure></li><li>添加less资源，然后运行指令查看效果</li></ol><h3 id="处理-Sass-和-Scss资源"><a href="#处理-Sass-和-Scss资源" class="headerlink" title="处理 Sass 和 Scss资源"></a>处理 Sass 和 Scss资源</h3><ol><li>下载包 <code>npm i sass-loader sass -D</code></li></ol><ul><li><code>sass-loader</code>：负责将 Sass 文件编译成 css 文件</li><li><code>sass</code>：<code>sass-loader</code> 依赖 <code>sass</code> 进行编译</li></ul><ol start="2"><li>配置，在 module rules 数组里添加如下对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.s[ac]ss$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;sass-loader&quot;</span>],<br>&#125;,<br></code></pre></td></tr></table></figure><ol start="3"><li>添加 Sass 资源，然后运行指令查看效果</li></ol><h3 id="处理-Styl-资源"><a href="#处理-Styl-资源" class="headerlink" title="处理 Styl 资源"></a>处理 Styl 资源</h3><ol><li>下载包 <code>npm i stylus-loader -D</code></li></ol><ul><li><code>stylus-loader</code>：负责将 Styl 文件编译成 Css 文件</li></ul><ol start="2"><li>配置，在 module rules 数组里添加如下对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.s[ac]ss$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;sass-loader&quot;</span>],<br>&#125;,<br></code></pre></td></tr></table></figure><ol start="3"><li>添加 Styl 资源，然后运行指令查看效果</li></ol><h3 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h3><p>Webpack4 是通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理的。 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，只需简单配置即可使用。</p><ol><li>配置</li></ol><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">&#123;<br>    test: /\.(png|<span class="hljs-type">jpe</span>?g|<span class="hljs-type">gif</span>|<span class="hljs-type">webp</span>)$/,<br>    type: <span class="hljs-string">&quot;asset&quot;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><ol start="2"><li>添加图片资源</li></ol><ul><li>src&#x2F;images&#x2F;1.jpeg</li><li>src&#x2F;images&#x2F;2.png</li><li>src&#x2F;images&#x2F;3.gif</li></ul><ol start="3"><li>使用图片资源</li></ol><ul><li>src&#x2F;less&#x2F;index.less</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../images/1.jpeg&quot;</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>src&#x2F;sass&#x2F;index.sass</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box3</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span><br>  height: <span class="hljs-number">100px</span><br>  background-image: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../images/2.png&quot;</span>)<br>  background-size: cover<br></code></pre></td></tr></table></figure><ul><li>src&#x2F;styl&#x2F;index.styl</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box5</span><br>  <span class="hljs-attribute">width</span> <span class="hljs-number">100px</span><br>  <span class="hljs-attribute">height</span> <span class="hljs-number">100px</span><br>  <span class="hljs-attribute">background-image</span> url(&quot;../images/<span class="hljs-number">3</span><span class="hljs-selector-class">.gif</span>&quot;)<br>  <span class="hljs-attribute">background-size</span> cover<br></code></pre></td></tr></table></figure><ol start="4"><li>运行指令后查看资源输出情况</li></ol><p>此时如果查看 dist 目录的话，会发现多了三张图片资源。因为 Webpack 会将所有打包好的资源输出到 dist 目录下。为什么样式资源没有呢？因为经过 <code>style-loader</code> 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来。</p><ol start="5"><li>对图片资源进行优化</li></ol><p>将小于某个大小的图片转化成 data URI 形式（Base64 格式）, 优点是减少请求数量，缺点是体积变得更大。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">      test:</span> /\.(png|jpe?g|gif|webp)$/,<br><span class="hljs-symbol">      type:</span> <span class="hljs-string">&quot;asset&quot;</span>,<br><span class="hljs-symbol">      parser:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">        dataUrlCondition:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">          maxSize:</span> <span class="hljs-number">10</span> * <span class="hljs-number">1024</span> <span class="hljs-comment">// 小于10kb的图片会被base64处理</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span>,<br></code></pre></td></tr></table></figure><p>此时输出的图片文件就只有两张，有一张图片以 data URI 形式内置到 js 中了<br>（注意：需要将上次打包生成的文件清空，再重新打包才有效果）</p><h3 id="修改输出资源的名称和路径"><a href="#修改输出资源的名称和路径" class="headerlink" title="修改输出资源的名称和路径"></a>修改输出资源的名称和路径</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">filename: <span class="hljs-string">&quot;static/js/main.js&quot;</span>, <span class="hljs-regexp">//</span> 将 js 文件输出到 static/js 目录中<br><br>&#123;<br>    test: <span class="hljs-regexp">/\.(png|jpe?g|gif|webp)$/</span>,<br>    type: <span class="hljs-string">&quot;asset&quot;</span>,<br>    parser: &#123;<br>        dataUrlCondition: &#123;<br>        maxSize: <span class="hljs-number">10</span> * <span class="hljs-number">1024</span>, <span class="hljs-regexp">//</span> 小于<span class="hljs-number">10</span>kb的图片会被base64处理<br>        &#125;,<br>    &#125;,<br>    generator: &#123;<br>        <span class="hljs-regexp">//</span> 将图片文件输出到 static/imgs 目录中<br>        <span class="hljs-regexp">//</span> 将图片文件命名 [hash:<span class="hljs-number">8</span>][ext][query]<br>        <span class="hljs-regexp">//</span> [hash:<span class="hljs-number">8</span>]: hash值取<span class="hljs-number">8</span>位<br>        <span class="hljs-regexp">//</span> [ext]: 使用之前的文件扩展名<br>        <span class="hljs-regexp">//</span> [query]: 添加之前的query参数<br>        filename: <span class="hljs-string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,<br>    &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="自动清空打包上次的资源"><a href="#自动清空打包上次的资源" class="headerlink" title="自动清空打包上次的资源"></a>自动清空打包上次的资源</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">output:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">   path:</span> path.resolve(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br><span class="hljs-symbol">   filename:</span> <span class="hljs-string">&quot;static/js/main.js&quot;</span>,<br><span class="hljs-symbol">   clean:</span> true, <span class="hljs-comment">// 自动将上次打包目录资源清空</span><br> <span class="hljs-punctuation">&#125;</span>,<br></code></pre></td></tr></table></figure><h3 id="处理字体图标资源"><a href="#处理字体图标资源" class="headerlink" title="处理字体图标资源"></a>处理字体图标资源</h3><ol><li>从<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>下载字体图标文件</li><li>添加字体图标资源</li></ol><ul><li><p>src&#x2F;fonts&#x2F;iconfont.ttf</p></li><li><p>src&#x2F;fonts&#x2F;iconfont.woff</p></li><li><p>src&#x2F;fonts&#x2F;iconfont.woff2</p></li><li><p>src&#x2F;css&#x2F;iconfont.css<br>注意修改字体文件的路径</p></li></ul><ol start="3"><li>在js中引入资源，在html中使用资源<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用字体图标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-arrow-down&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-ashbin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-browse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>配置然后执行指令</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    test:</span> /\.(ttf|woff2?)$/,<br><span class="hljs-symbol">    type:</span> <span class="hljs-string">&quot;asset/resource&quot;</span>,<br><span class="hljs-symbol">    generator:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">        filename:</span> <span class="hljs-string">&quot;static/media/[hash:8][ext][query]&quot;</span>,<br>    <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-punctuation">&#125;</span>,<br></code></pre></td></tr></table></figure><p><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别：</p><ol><li><code>type: &quot;asset/resource&quot;</code> 相当于<code>file-loader</code>, 将文件转化成 Webpack 能识别的资源，其他不做处理</li><li><code>type: &quot;asset&quot;</code> 相当于<code>url-loader</code>, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</li></ol><h3 id="处理其他音频视频资源"><a href="#处理其他音频视频资源" class="headerlink" title="处理其他音频视频资源"></a>处理其他音频视频资源</h3><p>配置：在上一步的规则匹配上修改 </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">&#123;<br>    test: /\.(ttf|<span class="hljs-type">woff2</span>?|<span class="hljs-type">map4</span>|<span class="hljs-type">map3</span>|<span class="hljs-type">avi</span>)$/,<br>    type: <span class="hljs-string">&quot;asset/resource&quot;</span>,<br>    generator: &#123;<br>        filename: <span class="hljs-string">&quot;static/media/[hash:8][ext][query]&quot;</span>,<br>    &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript，Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用css实现静态和动态彩虹</title>
    <link href="/2022/11/22/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%BD%A9%E8%99%B9/"/>
    <url>/2022/11/22/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%BD%A9%E8%99%B9/</url>
    
    <content type="html"><![CDATA[<p>如图：</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h8dtmhsyvgj30dc089gnk.jpg" alt="css简单彩虹效果"></p><p>代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>:auto auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FF0000</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">380px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">380px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FF7F00</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span>  &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">360px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">360px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#FFFF00</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span>  &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">340px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">340px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: greenyellow;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span>  &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">320px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">320px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: cyan;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span>  &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span>  &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">280px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rainbow</span> &gt; <span class="hljs-selector-tag">div</span> &gt;  <span class="hljs-selector-tag">div</span>  &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">260px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">260px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: white;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在掘金上看到别人实现的动态彩虹效果，觉得不错也实践了下：</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h8dtqd9ht5j30ck08vq4b.jpg" alt="css动态彩虹"></p><p>源代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>:<span class="hljs-number">40%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">320px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">2</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom-color</span>: transparent <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-left-color</span>: transparent <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>);</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: animate <span class="hljs-number">5s</span> infinite alternate;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#9400D3</span>;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.2s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: blue;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.4s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: cyan;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.6s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#00FF00</span>;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.8s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>:<span class="hljs-number">#FFFF00</span>;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">6</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">280px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#FF7F00</span>;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1.2s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">7</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">320px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">320px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>:<span class="hljs-number">#FF0000</span>;</span><br><span class="language-css">        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1.4s</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> animate &#123;</span><br><span class="language-css">    <span class="hljs-number">0%</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">45deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">315deg</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过设置li的border属性，渲染了一个20px的边框，然后设置border左侧和底部的颜色为透明色，并将border-radius的设置为50%形成一个半圆。</p><p>动画效果用的是CSS3中的animation动画属性，通过 @keyfroms 关键词定义相关动画，然后用 animation来执行。最后再给每个li单独添加一个延迟执行的animation-delay属性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 数组去重、扁平化实际应用</title>
    <link href="/2022/11/20/JavaScript%20%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E3%80%81%E6%89%81%E5%B9%B3%E5%8C%96%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
    <url>/2022/11/20/JavaScript%20%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E3%80%81%E6%89%81%E5%B9%B3%E5%8C%96%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h3><h4 id="利用set"><a href="#利用set" class="headerlink" title="利用set"></a>利用set</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">arr</span> = [...<span class="hljs-keyword">new</span> <span class="hljs-type">Set</span>(arr)]<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">arr</span>);<span class="hljs-comment">//[1, 2, 3, 9]</span><br></code></pre></td></tr></table></figure><h4 id="利用indexOf"><a href="#利用indexOf" class="headerlink" title="利用indexOf"></a>利用indexOf</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">var</span> newarr = []<br>    arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(newarr.<span class="hljs-built_in">indexOf</span>(item)==<span class="hljs-number">-1</span>)&#123;<br>            newarr.<span class="hljs-built_in">push</span>(item)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> newarr<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn(arr));<span class="hljs-comment">//[1, 2, 3, 9]</span><br></code></pre></td></tr></table></figure><h4 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">var</span> newarr=[]<br>    arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(!newarr.<span class="hljs-built_in">includes</span>(item))&#123;<br>            newarr.<span class="hljs-built_in">push</span>(item)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> newarr<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn(arr));<br></code></pre></td></tr></table></figure><h4 id="利用reduce"><a href="#利用reduce" class="headerlink" title="利用reduce"></a>利用reduce</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">var</span> newarr=[]<br>    arr.<span class="hljs-built_in">sort</span>().<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,value,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-comment">//比较pre中最后一个元素和当前的值是否相等，不相等加入新数组</span><br>         <span class="hljs-keyword">if</span> (pre[index<span class="hljs-number">-1</span>]!==value) &#123;<br>            newarr.<span class="hljs-built_in">push</span>(value)<br>         &#125;<br>         <span class="hljs-keyword">return</span> newarr<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> newarr<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn(arr));<br></code></pre></td></tr></table></figure><h3 id="2-数组扁平化"><a href="#2-数组扁平化" class="headerlink" title="2.数组扁平化"></a>2.数组扁平化</h3><h4 id="利用flat"><a href="#利用flat" class="headerlink" title="利用flat"></a>利用flat</h4><p>注意此api不传参数就只能深度到1，参数代表着深度，当不知道深度时可以传Infinity</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>]]]<br><span class="hljs-attribute">console</span>.log(arr.flat());//[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, Array(<span class="hljs-number">1</span>)]<br><span class="hljs-attribute">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>]]] <br><span class="hljs-attribute">console</span>.log(arr.flat(Infinity));//[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>flat函数会默认将原数组中的空值删除，演示效果如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">let <span class="hljs-keyword">a</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,,<span class="hljs-number">6</span>]<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>.flat());<span class="hljs-comment"> // [1, 2, 3, 4, 6]</span><br></code></pre></td></tr></table></figure><h4 id="利用reduce-1"><a href="#利用reduce-1" class="headerlink" title="利用reduce"></a>利用reduce</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>]]]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,value,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> pre.concat(<span class="hljs-built_in">Array</span>.isArray(value)?flat(value):value)<br>    &#125;,[])<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(flat(arr));<span class="hljs-comment">//[1, 2, 3, 2, 9, 2, 3, 1]</span><br></code></pre></td></tr></table></figure><h4 id="使用map递归"><a href="#使用map递归" class="headerlink" title="使用map递归"></a>使用map递归</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe">let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">78</span>]]]<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat_map</span></span>(arr4) &#123;<br>  let <span class="hljs-keyword">new</span><span class="hljs-type">arr</span> = []<br>    arr.map(item =&gt;&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">Array</span>.isArray(item))&#123;<br>            <span class="hljs-keyword">new</span><span class="hljs-type">arr</span> = <span class="hljs-keyword">new</span><span class="hljs-type">arr</span>.concat(flat_map(item))<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">new</span><span class="hljs-type">arr</span>.push(item)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">arr</span><br>&#125;<br><br>flat_map(arr)<br><br></code></pre></td></tr></table></figure><h4 id="将数组转为字符串，再转为数组"><a href="#将数组转为字符串，再转为数组" class="headerlink" title="将数组转为字符串，再转为数组"></a>将数组转为字符串，再转为数组</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>]],[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-comment">//数组转为字符串，再将字符串转为数组</span><br><span class="hljs-keyword">var</span> newarr = arr.join(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>).<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> parseInt(item)<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newarr);<span class="hljs-comment">//[1, 2, 3, 2, 9, 2, 3, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><p>备注: 这里的join改成toString，parseInt改成Number也是一种方法</p><h4 id="使用扩展运算符"><a href="#使用扩展运算符" class="headerlink" title="使用扩展运算符"></a>使用扩展运算符</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> arr = <span class="hljs-literal">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">78</span>]</span>]]<br><span class="hljs-keyword">function</span> flat<span class="hljs-constructor">_concat(<span class="hljs-params">arr6</span>)</span> &#123;<br>  <span class="hljs-keyword">while</span> (arr.some(item =&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>is<span class="hljs-constructor">Array(<span class="hljs-params">item</span>)</span>))&#123;<br>      arr = <span class="hljs-literal">[]</span>.concat(...arr4)<br>  &#125;<br>  return arr<br>&#125;<br>flat<span class="hljs-constructor">_concat(<span class="hljs-params">arr</span>)</span><br></code></pre></td></tr></table></figure><h3 id="数组应用"><a href="#数组应用" class="headerlink" title="数组应用"></a>数组应用</h3><h4 id="1-判断数组元素出现个数"><a href="#1-判断数组元素出现个数" class="headerlink" title="1.判断数组元素出现个数"></a>1.判断数组元素出现个数</h4><p>例如：var arr&#x3D;[‘name’,’age’,’hhh’,’hhh’]各出现多少次</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;hhh&#x27;</span>,<span class="hljs-string">&#x27;hhh&#x27;</span>]<br><span class="hljs-keyword">var</span> newarr = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span> (!pre[item]) &#123;<br>        pre[item]=<span class="hljs-number">1</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        pre[item]++<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre<br>&#125;,&#123;&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newarr);<br></code></pre></td></tr></table></figure><h4 id="2-判断数组中出现次数最多的元素"><a href="#2-判断数组中出现次数最多的元素" class="headerlink" title="2.判断数组中出现次数最多的元素"></a>2.判断数组中出现次数最多的元素</h4><p>在统计个元素出现个数的基础上</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;hhh&#x27;</span>,<span class="hljs-string">&#x27;hhh&#x27;</span>]<br><span class="hljs-keyword">var</span> newarr = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span> (!pre[item]) &#123;<br>        pre[item]=<span class="hljs-number">1</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        pre[item]++<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre<br>&#125;,&#123;&#125;)<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span>=<span class="hljs-number">0</span><span class="hljs-comment">//最多的数量</span><br><span class="hljs-keyword">var</span> attr<span class="hljs-comment">//最多的属性是什么</span><br><span class="hljs-keyword">for</span> (const key in newarr) &#123;<br>    <span class="hljs-comment">//key为属性</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newarr[key]);<br>    <span class="hljs-keyword">if</span> (newarr[key]&gt;<span class="hljs-built_in">max</span>) &#123;<br>        <span class="hljs-built_in">max</span>=newarr[key]<br>        attr=key<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">max</span>,attr);<br></code></pre></td></tr></table></figure><h4 id="3-统计数组中重复的元素"><a href="#3-统计数组中重复的元素" class="headerlink" title="3.统计数组中重复的元素"></a>3.统计数组中重复的元素</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">sort</span>());<br><span class="hljs-keyword">var</span> arr2=[]<br>arr.<span class="hljs-built_in">sort</span>().<span class="hljs-built_in">sort</span>(<span class="hljs-function">(<span class="hljs-params">e1,e2</span>)=&gt;</span>&#123;<br>    e1===e2?arr2.<span class="hljs-built_in">push</span>(e2):<span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr2);<br></code></pre></td></tr></table></figure><h3 id="4-在a不在b"><a href="#4-在a不在b" class="headerlink" title="4.在a不在b"></a>4.在a不在b</h3><p>现在两个数组，判断在a中的元素，不在b中<br>const a &#x3D; [1,2,3,5]<br>const b&#x3D;[1,3,5,6]</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br>const b=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>const newarr = a.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//将在a不在b中的筛选出来</span><br>   <span class="hljs-keyword">return</span> b.<span class="hljs-built_in">indexOf</span>(item)==<span class="hljs-number">-1</span><br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newarr);<br></code></pre></td></tr></table></figure><h3 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h3><p>公司前后招聘了10个员工(性别,年龄, 月薪各不相同),有以下需求<br>1). 列表显示所有员工的所有信息<br>2). 对员工进行年薪降序列表显示<br>3). 得到男员工的总月薪<br>4). 查找一个月薪只比12000高一点点的员工<br>5). 查找出所有月薪高于12000的员工</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">const</span> <span class="hljs-string">employees</span> <span class="hljs-string">=</span> [<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">21</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">10000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">25</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">12000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">24</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">13000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">24</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">12500</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">21</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">14000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">24</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">16000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">23</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">9000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">21</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">11000</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">23</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">13200</span>&#125;,<br>   &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-attr">sex:</span> <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">23</span>, <span class="hljs-attr">salary:</span> <span class="hljs-number">15000</span>&#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>)employees.forEach(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(item);<br>&#125;)<br><br><span class="hljs-number">2</span>)<span class="hljs-keyword">var</span> newArr= employees.<span class="hljs-built_in">sort</span>(<span class="hljs-function">(<span class="hljs-params">e1,e2</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> e2.salary-e1.salary<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr);<br><br><span class="hljs-number">3</span>)<span class="hljs-keyword">var</span> newArr= employees.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,item</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> pre = item.sex===<span class="hljs-string">&#x27;男&#x27;</span>?pre+item.salary:<span class="hljs-number">0</span><br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr);<br><br><span class="hljs-number">4</span>)<span class="hljs-keyword">var</span> newArr= employees.<span class="hljs-built_in">sort</span>(<span class="hljs-function">(<span class="hljs-params">e1,e2</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> e1.salary-e2.salary<br>&#125;).<span class="hljs-built_in">find</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> item.salary&gt;<span class="hljs-number">12000</span><br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr);<br><br><span class="hljs-number">5</span>)<span class="hljs-keyword">var</span> newArr = employees.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> item.salary&gt;<span class="hljs-number">12000</span><br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise 的两个封装实现</title>
    <link href="/2022/09/16/promise%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%81%E8%A3%85%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/09/16/promise%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%81%E8%A3%85%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="使用Promise封装异步图片加载"><a href="#使用Promise封装异步图片加载" class="headerlink" title="使用Promise封装异步图片加载"></a>使用Promise封装异步图片加载</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> load<span class="hljs-constructor">ImageAsync(<span class="hljs-params">url</span>)</span> &#123;<br>  return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Promise(<span class="hljs-params">function</span>(<span class="hljs-params">resolve</span>, <span class="hljs-params">reject</span>)</span> &#123;<br>    const image = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>;<br><br>    image.onload = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br>      resolve(image);<br>    &#125;;<br><br>    image.onerror = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br>      reject(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Error(&#x27;Could <span class="hljs-params">not</span> <span class="hljs-params">load</span> <span class="hljs-params">image</span> <span class="hljs-params">at</span> &#x27; + <span class="hljs-params">url</span>)</span>);<br>    &#125;;<br><br>    image.src = url;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用Promise对象实现AJAX操作"><a href="#使用Promise对象实现AJAX操作" class="headerlink" title="使用Promise对象实现AJAX操作"></a>使用Promise对象实现AJAX操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getJSON = <span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>));<br>      &#125;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    client.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url);<br>    client.<span class="hljs-property">onreadystatechange</span> = handler;<br>    client.<span class="hljs-property">responseType</span> = <span class="hljs-string">&quot;json&quot;</span>;<br>    client.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>    client.<span class="hljs-title function_">send</span>();<br><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> promise;<br>&#125;;<br><br><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/posts.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Contents: &#x27;</span> + json);<br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面代码中，getJSON是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个Promise对象。需要注意的是，在getJSON内部，resolve函数和reject函数调用时，都带有参数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 深入继承的六种方式和优缺点</title>
    <link href="/2022/09/10/JavaScript%20%E6%B7%B1%E5%85%A5%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <url>/2022/09/10/JavaScript%20%E6%B7%B1%E5%85%A5%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="作者按："><a href="#作者按：" class="headerlink" title="作者按："></a>作者按：</h2><p>关于JavaScript 继承的几种方式，网上有很多文章。但其实红宝书里已经讲解的非常透彻，思路清晰。本篇文章更像是学习笔记，第八章常读常新。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywzta6htj30rs0pp7db.jpg" alt="红宝书第八章继承-from 微信读书"></p><hr><h3 id="以下是正文："><a href="#以下是正文：" class="headerlink" title="以下是正文："></a>以下是正文：</h3><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (<span class="hljs-params"></span>) &#123;<br>    this.name = <span class="hljs-string">&#x27;yang&#x27;</span>;<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (<span class="hljs-params"></span>) &#123;<br><br>&#125;<br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.getName()) <span class="hljs-comment">// yang</span><br></code></pre></td></tr></table></figure><p>问题1：引用类型的属性被所有实例共享<br>问题2：在创建 Child实例时，不能像Parent传参</p><h3 id="2-constructor-stealing-（盗用构造函数）"><a href="#2-constructor-stealing-（盗用构造函数）" class="headerlink" title="2. constructor stealing （盗用构造函数）"></a>2. constructor stealing （盗用构造函数）</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (<span class="hljs-params"></span>) &#123;<br>    this.names = [<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;yao&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (<span class="hljs-params"></span>) &#123;<br>    Parent.call(this);<br>&#125;<br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br>child1.names.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;xuezhuo&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.names); <span class="hljs-comment">// [&quot;yang&quot;, &quot;yao&quot;, &quot;xuezhou&quot;]</span><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.names); <span class="hljs-comment">// [&quot;yang&quot;, yao&quot;]</span><br></code></pre></td></tr></table></figure><p>优点：<br>1.避免了引用类型的属性被所有实例共享<br>2.可以在 Child 中向 Parent 传参<br>缺点：<br>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p><h3 id="3-组合继承（经典继承）"><a href="#3-组合继承（经典继承）" class="headerlink" title="3. 组合继承（经典继承）"></a>3. 组合继承（经典继承）</h3><p>原型链继承和经典继承的双剑合璧，基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><p>弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (<span class="hljs-params">name</span>) &#123;<br>    this.name = name;<br>    this.colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br>Parent.prototype.getName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (<span class="hljs-params">name, age</span>) &#123;<br>    Parent.call(this, name);<br>    this.age = age;<br>&#125;<br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br>Child.prototype.constructor = Child;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br>child1.colors.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.name); <span class="hljs-comment">// yang</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.age); <span class="hljs-comment">// 18</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child1.colors); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;miemie&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.name); <span class="hljs-comment">// miemie</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.age); <span class="hljs-comment">// 20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(child2.colors); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> create<span class="hljs-constructor">Obj(<span class="hljs-params">o</span>)</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-constructor">F()</span>&#123;&#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">F</span>.</span></span>prototype = o;<br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">F()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数是 Douglas Crockford 给出的，适用于在一个对象的基础上在创造一个对象。<br>ECMAScript 5通过增加Object.create()方法将原型式继承的概念规范化了。<br>但是它的缺点还是跟原型链继承一样，属性中包含的引用值还是会在对象中共享。</p><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h3><p>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObj</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">clone</span> = Object.<span class="hljs-title function_ invoke__">create</span>(o);<br>    <span class="hljs-keyword">clone</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">clone</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是它还是有跟构造函数模式一样的缺点</p><h3 id="6-终极法器：寄生组合式继承"><a href="#6-终极法器：寄生组合式继承" class="headerlink" title="6. 终极法器：寄生组合式继承"></a>6. 终极法器：寄生组合式继承</h3><p>先来复习一下组合继承的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (name, age) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1)<br></code></pre></td></tr></table></figure><p>组合继承最大的缺点是会调用两次父构造函数。</p><p>一次是设置子类型实例的原型的时候：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Child</span>.proto<span class="hljs-keyword">type</span> = new <span class="hljs-type">Parent</span>();<br></code></pre></td></tr></table></figure><p>一次在创建子类型实例的时候：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Child</span>(<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br></code></pre></td></tr></table></figure><p>回想下 new 的模拟实现，其实在这句中，我们会执行：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Parent.<span class="hljs-keyword">call</span>(this, <span class="hljs-keyword">name</span>);<br></code></pre></td></tr></table></figure><p>在这里，我们又会调用了一次 Parent 构造函数。</p><p>所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为colors，属性值为[‘red’, ‘blue’, ‘green’]。</p><p>那么我们该如何精益求精，避免这一次重复调用呢？</p><p>如果我们不使用 Child.prototype &#x3D; new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？</p><p>看看如何实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span> (name, age) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-comment">// 关键的三步</span><br><span class="hljs-keyword">var</span> F = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br><br>F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br><br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;yang&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1);<br></code></pre></td></tr></table></figure><p>最后我们封装一下这个继承方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">prototype</span>(<span class="hljs-params">child, parent</span>) &#123;<br>    <span class="hljs-keyword">var</span> prototype = <span class="hljs-title function_">object</span>(parent.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    prototype.<span class="hljs-property">constructor</span> = child;<br>    child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype;<br>&#125;<br><br><span class="hljs-comment">// 当我们使用的时候：</span><br><span class="hljs-title function_">prototype</span>(<span class="hljs-title class_">Child</span>, <span class="hljs-title class_">Parent</span>);<br></code></pre></td></tr></table></figure><p>寄生式组合继承可以算是引用类型继承的最佳模式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 原型中的哲学思想</title>
    <link href="/2022/08/03/JavaScript%20%E5%8E%9F%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3/"/>
    <url>/2022/08/03/JavaScript%20%E5%8E%9F%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="作者按："><a href="#作者按：" class="headerlink" title="作者按："></a>作者按：</h2><p>学原型链的时候感觉颇有些哲学思想在里面，于是搜到这样一篇文章，觉得很有意思，记录下来。<br>文章说 Object 和 Function 犹如 JavaScript 世界中的亚当与夏娃，我倒觉得原型家族也是个母系氏族社会呢，Object 为母，Function 为父，比较像我国古代的女娲造人，因为 Function.prototype 也指向 Object.prototype</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yqysoxbmj33402c0b2b.jpg" alt="红宝书第八章原型学习笔记"></p><hr><h3 id="以下是正文："><a href="#以下是正文：" class="headerlink" title="以下是正文："></a>以下是正文：</h3><p>记得当年初试前端的时候，学习 JavaScript 过程中，原型问题一直让我疑惑许久，那时候捧着那本著名的红皮书，看到有关原型的讲解时，总是心存疑虑。<br>当在 JavaScript 世界中走过不少旅程之后，再次萌发起研究这部分知识的欲望，翻阅了不少书籍和资料，才搞懂__proto__ 和 prototype 的概念。<br>故以作此笔记，日后忘了可以回来看看。<br>如果你看的过程中觉得理解有些困难，把例子在代码中跑一跑，亲手试一试也许能解决不少疑惑。</p><h3 id="一切皆为对象"><a href="#一切皆为对象" class="headerlink" title="一切皆为对象"></a>一切皆为对象</h3><blockquote><p>殊不知，JavaScript的世界中的对象，追根溯源来自于一个 null</p></blockquote><p>「一切皆为对象」，这句着实是一手好营销，易记，易上口，印象深刻。<br>万物初生时，一个 null 对象，凭空而生，接着 Object、Function 学着 null 的模样塑造了自己，并且它们彼此之间喜结连理，提供了 prototype 和 constructor，一个给子孙提供了基因，一个则制造万千子子孙孙。<br>在 JavaScript 中，null 也是作为一个对象存在，基于它继承的子子孙孙，当属对象。<br>乍一看，null 像是上帝,而 Object 和 Function 犹如 JavaScript 世界中的<strong>亚当</strong>与<strong>夏娃</strong>。</p><h3 id="原型指针-proto"><a href="#原型指针-proto" class="headerlink" title="原型指针 proto"></a>原型指针 <strong>proto</strong></h3><p>在 JavaScript 中，每个对象都拥有一个原型对象，而指向该原型对象的内部指针则是__proto__,通过它可以从中继承原型对象的属性，原型是 JavaScript 中的基因链接，有了这个，才能知道这个对象的祖祖辈辈。从对象中的__proto__可以访问到他所继承的原型对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a = new Array();<br>a.__proto__ === Array.prototype // true<br></code></pre></td></tr></table></figure><p>上面代码中，创建了一个 Array 的实例 a，该实例的原型指向了 Array.prototype。<br>Array.prototype 本身也是一个对象，也有继承的原型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">a.__proto__.__proto__ === Object.prototype  // true<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 等同于 Array.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Object.prototype<br>这就说了明了，Array本身也是继承自Object的，那么Object的原型指向的是谁呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">a.__proto__.__proto__.__proto__ === null  // true<br>// 等同于 Object.prototype.__proto__ === null<br></code></pre></td></tr></table></figure><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/F155FDADCE01F99F7E10F5323F7CADEE.png" alt="原型链指向示意图1"></p><p>所以说，JavaScript 中的对象，追根溯源都是来自一个<strong>null</strong>对象。<strong>佛曰：万物皆空，善哉善哉</strong>。</p><p>除了使用.__proto__方式访问对象的原型，还可以通过 <strong>Object.getPrototypeOf</strong> 方法来获取对象的原型，以及通过 <strong>Object.setPrototypeOf</strong> 方法来重写对象的原型<br>。<br>值得注意的是，按照语言标准，__proto__属性只有浏览器才需要部署，其他环境可以没有这个属性，而且前后的两根下划线，表示它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用 Object.getPrototypeof 和 Object.setPrototypeOf ，进行原型对象的读写操作。<br>这里用__proto__属性来描述对象中的原型，是因为这样来得更加形象，且容易理解。</p><h3 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 prototype</h3><p>函数作为 JavaScript 中的一等公民，它既是函数又是对象，函数的原型指向的是Function.prototype</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var Foo = function() &#123;&#125;<br>Foo.__proto__ === Function.prototype // true<br></code></pre></td></tr></table></figure><p>函数实例除了拥有__proto__属性之外，还拥有 prototype 属性。<br>通过该函数构造的新的实例对象，其原型指针 <strong>proto</strong> 会指向该函数的 prototype 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">var a = new Foo();<br>a.__proto__ === Foo.prototype; // true<br></code></pre></td></tr></table></figure><p>而函数的 prototype 属性，本身是一个由 Object 构造的实例对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Foo.prototype.__proto__ === Object.prototype; // true<br></code></pre></td></tr></table></figure><p>prototype属性很特殊，它还有一个隐式的 constructor ，指向了构造函数本身。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">Foo.prototype.constructor === Foo; // true<br>a.constructor === Foo; // true<br>a.constructor === Foo.prototype.constructor; // true<br></code></pre></td></tr></table></figure><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/56AF39C33A5154A2178E9A82E53D2C11.png" alt="原型链指向示意图2"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>原型链作为实现继承的主要方法，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。<br>每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(<strong>proto</strong>)。<br>那么，假如我们让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。<br>如此层层递进，就构造了实例与原型的链条，这就是<strong>原型链</strong>的基本概念。</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>“原型链”的作用在于，当读取对象的某个属性时，JavaScript 引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。以此类推，如果直到最顶层的 Object.prototype 还是找不到，则返回 underfine</p><h3 id="亲子鉴定"><a href="#亲子鉴定" class="headerlink" title="亲子鉴定"></a>亲子鉴定</h3><p>在 JavaScript 中，也存在鉴定亲子之间DNA关系的方法：</p><p><strong>instanceof</strong><br>运算符返回一个布尔值，表示一个对象是否由某个构造函数创建。<br><strong>Object.isPrototypeOf()</strong><br>只要某个对象处在原型链上，isProtypeOf 都返回true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">var Bar = function() &#123;&#125;<br>var b = new Bar();<br>b instanceof Bar // true<br>Bar.prototype.isPrototypeOf(b) // true<br>Object.prototype.isPrototypeOf(Bar) // true<br></code></pre></td></tr></table></figure><p>要注意，实例b的原型是 Bar.prototype 而不是 Bar</p><h3 id="一张历史悠久的图"><a href="#一张历史悠久的图" class="headerlink" title="一张历史悠久的图"></a>一张历史悠久的图</h3><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/289FC3BDCB0425AA1C9F0DC5EBA1079F.jpg" alt="一张历史悠久的图"></p><p>这是一张描述了 Object、Function 以及一个函数实例 Foo 他们之间原型之间联系。如果理解了上面的概念，这张图是不难读懂。</p><p>从上图中，能看到一个有趣的地方。<br>Function.prototype.<strong>proto</strong> 指向了 Object.prototype，这说明 Function.prototype 是一个 Object实例，那么应当是先有的Object再有Function。<br>但是Object.prototype.constructor.<strong>proto</strong> 又指向了 Function.prototype。这样看来，没有Function，Object也不能创建实例。<br>这就产生了一种类「先有鸡还是先有蛋」的经典问题，到底是先有的Object还是先有的Function呢？<br>这么哲学向的问题，留给你思考了。<br>我只是感慨：<br>越往JavaScript的深处探索，越发觉得这一门语言很哲学。</p><h3 id="先有鸡还是先有蛋？"><a href="#先有鸡还是先有蛋？" class="headerlink" title="先有鸡还是先有蛋？"></a>先有鸡还是先有蛋？</h3><p>时隔半年，偶尔翻开这篇文章。<br>对于这个问题，又有了新的思考。<br>愿意跟能看到这里的你来分享一下。</p><p>我们可以先把 Object.prototype 和 Function.prototype 这两个拎出来看，因为他们本身就是一个实例对象。<br>为方便理解，我们改一下名字，避免和 Object 和 Function 的强关联，分别叫：Op 和 Fp</p><p>那么就有这样的原型链存在了</p><p><img src="https://huang-jerryc.com/image/blog/philosophy-though-of-javascript-proto/object-or-function-first.png" alt="鸡不过是一只蛋创造另一只蛋的工具"></p><p>我再描述一下上面的原型链，先有 null , 再有了 Op , 然后再有了 Fp ，然后以 Fp 为原型的两个构造函数 (Object, Function) 出现了。<br>而作为构造函数，需要有个 prototype 属性用来作为以该构造函数创造的实例的继承。<br>所以Object.prototype &#x3D; Op, Function.prototype &#x3D; Fp。</p><p>原文链接:<a href="https://huang-jerryc.com/2016/06/28/JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3/">JavaScript 原型中的哲学思想</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>细说数组常用遍历的方法</title>
    <link href="/2022/07/20/%E7%BB%86%E8%AF%B4%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2022/07/20/%E7%BB%86%E8%AF%B4%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="作者按："><a href="#作者按：" class="headerlink" title="作者按："></a>作者按：</h2><p>可以说 PHP 和 JavaScript 的学习都是从数组操作开始的，之前整理过<a href="https://fionayuliang.github.io/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/">《PHP内置排序函数对比》</a>,现在根据Github Blog 转载一篇数组常用遍历方法的文章，之后数组的使用也要时常归纳总结。</p><hr><p>本文主要介绍数组常见遍历方法：forEach、map、filter、find、every、some、reduce，它们有个共同点：不会改变原始数组。</p><h3 id="一、forEach：遍历数组"><a href="#一、forEach：遍历数组" class="headerlink" title="一、forEach：遍历数组"></a>一、forEach：遍历数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blue&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>];<br><span class="hljs-comment">// ES5遍历数组方法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; colors.<span class="hljs-built_in">length</span>; i++)&#123; <br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(colors[i]);<span class="hljs-comment">//red blue green</span><br>&#125;<br><span class="hljs-comment">// ES6 forEach</span><br>colors.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params">color</span>)&#123;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(color);<span class="hljs-comment">//red blue green</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>我们再来看个例子：遍历数组中的值,并计算总和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>numbers.forEach(<span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span><span class="hljs-built_in">sum</span>+=<span class="hljs-built_in">number</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>)<span class="hljs-comment">//15</span><br></code></pre></td></tr></table></figure><h3 id="二、map：将数组映射成另一个数组"><a href="#二、map：将数组映射成另一个数组" class="headerlink" title="二、map：将数组映射成另一个数组"></a>二、map：将数组映射成另一个数组</h3><p><strong>map通过指定函数处理数组的每个元素，并返回处理后新的数组，map 不会改变原始数组。</strong></p><p><strong>forEach和map的区别在于，forEach没有返回值。</strong><br><strong>map需要返回值，如果不给return，默认返回undefined</strong></p><p>使用场景1<br>假定有一个数值数组(A),将A数组中的值以双倍的形式放到B数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> doubledNumbers = [];<br><span class="hljs-comment">// es5写法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">length</span>; i++)&#123;<br> doubledNumbers.<span class="hljs-built_in">push</span>(numbers[i] * <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(doubledNumbers);<span class="hljs-comment">//[2,4,6]</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// es6 map方法</span><br><span class="hljs-keyword">var</span> doubled = numbers.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">number</span>)&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span> * <span class="hljs-number">2</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(doubled);<span class="hljs-comment">//[2,4,6]</span><br></code></pre></td></tr></table></figure><p>使用场景2 假定有一个对象数组(A),将A数中对象某个属性的值存储到B数组中</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> cars = [<br>  &#123;<span class="hljs-attr">model</span>:<span class="hljs-string">&quot;Buick&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&quot;CHEAP&quot;</span>&#125;,<br>  &#123;<span class="hljs-attr">model</span>:<span class="hljs-string">&quot;BMW&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&quot;expensive&quot;</span>&#125;<br>];<br><span class="hljs-keyword">var</span> prices = cars.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">car</span>)&#123;<br>    <span class="hljs-keyword">return</span> car.price;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(prices);<span class="hljs-comment">//[&quot;CHEAP&quot;, &quot;expensive&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="三、filter：从数组中找出所有符合指定条件的元素"><a href="#三、filter：从数组中找出所有符合指定条件的元素" class="headerlink" title="三、filter：从数组中找出所有符合指定条件的元素"></a>三、filter：从数组中找出所有符合指定条件的元素</h3><p><strong>filter() 检测数值元素，并返回符合条件所有元素的数组。 filter() 不会改变原始数组。</strong></p><p><strong>使用场景1：假定有一个对象数组(A),获取数组中指定类型的对象放到B数组中</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var porducts = [<br>  &#123;<span class="hljs-type">name</span>:&quot;cucumber&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;banana&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;celery&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;orange&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;&#125;<br>];<br>// es5写法<br>var filteredProducts = [];<br><span class="hljs-keyword">for</span>(var i = <span class="hljs-number">0</span>; i &lt; porducts.length; i++)&#123;<br>    <span class="hljs-keyword">if</span>(porducts[i].<span class="hljs-keyword">type</span> === &quot;vegetable&quot;)&#123;<br>      filteredProducts.push(porducts[i]);<br>    &#125;<br>&#125;<br>console.log(filteredProducts);//[&#123;<span class="hljs-type">name</span>: &quot;cucumber&quot;, <span class="hljs-keyword">type</span>: &quot;vegetable&quot;&#125;,<br>                                 &#123;<span class="hljs-type">name</span>: &quot;celery&quot;, <span class="hljs-keyword">type</span>: &quot;vegetable&quot;&#125;]<br>// es6 <span class="hljs-keyword">filter</span><br>var filtered2 = porducts.<span class="hljs-keyword">filter</span>(<span class="hljs-keyword">function</span>(product)&#123;<br>  <span class="hljs-keyword">return</span> product.<span class="hljs-keyword">type</span> === &quot;vegetable&quot;;<br>&#125;)<br>console.log(filtered2);<br></code></pre></td></tr></table></figure><p>使用场景2：假定有一个对象数组(A),过滤掉不满足以下条件的对象<br>条件: 蔬菜 数量大于0,价格小于10</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var products = [<br>  &#123;<span class="hljs-type">name</span>:&quot;cucumber&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;,quantity:<span class="hljs-number">0</span>,price:<span class="hljs-number">1</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;banana&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;,quantity:<span class="hljs-number">10</span>,price:<span class="hljs-number">16</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;celery&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;,quantity:<span class="hljs-number">30</span>,price:<span class="hljs-number">8</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;orange&quot;,<span class="hljs-keyword">type</span>:&quot;fruit&quot;,quantity:<span class="hljs-number">3</span>,price:<span class="hljs-number">6</span>&#125;<br>];<br>products = products.<span class="hljs-keyword">filter</span>(<span class="hljs-keyword">function</span>(product)&#123;<br>    <span class="hljs-keyword">return</span> product.<span class="hljs-keyword">type</span> === &quot;vegetable&quot; <br>    &amp;&amp; product.quantity &gt; <span class="hljs-number">0</span> <br>    &amp;&amp; product.price &lt; <span class="hljs-number">10</span><br>&#125;)<br>console.log(products);//[&#123;<span class="hljs-type">name</span>:&quot;celery&quot;,<span class="hljs-keyword">type</span>:&quot;vegetable&quot;,quantity:<span class="hljs-number">30</span>,price:<span class="hljs-number">8</span>&#125;]<br></code></pre></td></tr></table></figure><p>使用场景3：假定有两个数组(A,B),根据A中id值,过滤掉B数组不符合的数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> post = &#123;id:<span class="hljs-number">4</span>,<span class="hljs-built_in">title</span>:<span class="hljs-string">&quot;Javascript&quot;</span>&#125;;<br><span class="hljs-built_in">var</span> comments = [<br>   &#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Angular4&quot;</span>&#125;,<br>   &#123;postId:<span class="hljs-number">2</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Vue.js&quot;</span>&#125;,<br>   &#123;postId:<span class="hljs-number">3</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Node.js&quot;</span>&#125;,<br>   &#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;React.js&quot;</span>&#125;,<br>];<br>function commentsForPost(post,comments)&#123;<br>   <span class="hljs-built_in">return</span> comments.filter(function(comment)&#123;<br>     <span class="hljs-built_in">return</span> comment.postId === post.id;<br>   &#125;)<br>&#125;<br>console.<span class="hljs-built_in">log</span>(commentsForPost(post,comments));//[&#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;Angular4&quot;</span>&#125;,&#123;postId:<span class="hljs-number">4</span>,<span class="hljs-built_in">content</span>:<span class="hljs-string">&quot;React.js&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><h3 id="四、find：返回通过测试（函数内判断）的数组的第一个元素的值"><a href="#四、find：返回通过测试（函数内判断）的数组的第一个元素的值" class="headerlink" title="四、find：返回通过测试（函数内判断）的数组的第一个元素的值"></a>四、find：返回通过测试（函数内判断）的数组的第一个元素的值</h3><p><strong>它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</strong><br>使用场景1<br>假定有一个对象数组(A),找到符合条件的对象</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> var users = [<br>  &#123;<span class="hljs-type">name</span>:&quot;Jill&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;,id:<span class="hljs-number">2</span>&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;Bill&quot;&#125;,<br>  &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;&#125;<br> ];<br>// es5方法<br> var <span class="hljs-keyword">user</span>;<br> <span class="hljs-keyword">for</span>(var i = <span class="hljs-number">0</span>; i &lt; users.length; i++)&#123;<br>  <span class="hljs-keyword">if</span>(users[i].name === &quot;Alex&quot;)&#123;<br>    <span class="hljs-keyword">user</span> = users[i];<br>    break;//找到后就终止循环<br>  &#125;<br> &#125;<br> console.log(<span class="hljs-keyword">user</span>);// &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;,id:<span class="hljs-number">2</span>&#125;<br>// es6 find<br><span class="hljs-keyword">user</span> = users.find(<span class="hljs-keyword">function</span>(<span class="hljs-keyword">user</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>.name === &quot;Alex&quot;;<br>&#125;)<br>console.log(<span class="hljs-keyword">user</span>);// &#123;<span class="hljs-type">name</span>:&quot;Alex&quot;,id:<span class="hljs-number">2</span>&#125;找到后就终止循环<br></code></pre></td></tr></table></figure><p>使用场景2：假定有一个对象数组(A),根据指定对象的条件找到数组中符合条件的对象</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> posts = [<br> &#123;<span class="hljs-attribute">id:</span><span class="hljs-string">3,title</span>:<span class="hljs-string">&quot;Node.js&quot;</span>&#125;,<br> &#123;<span class="hljs-attribute">id:</span><span class="hljs-string">1,title</span>:<span class="hljs-string">&quot;React.js&quot;</span>&#125;<br>];<br><span class="hljs-keyword">var</span> comment = &#123;<span class="hljs-attribute">postId</span>:<span class="hljs-number">1</span>,<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Hello World!&quot;</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">postForComment</span>(<span class="hljs-params">posts,comment</span>)</span>&#123;<br> <span class="hljs-keyword">return</span> posts.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> post.id === comment.postId;<br> &#125;)<br>&#125;<br><span class="hljs-built_in">console</span>.log(postForComment(posts,comment));<span class="hljs-comment">//&#123;id: 1, title: &quot;React.js&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="五、every-amp-some"><a href="#五、every-amp-some" class="headerlink" title="五、every&amp;some"></a>五、every&amp;some</h3><p><strong>every：数组中是否每个元素都满足指定的条件</strong><br><strong>some:数组中是否有元素满足指定的条件</strong></p><p>使用场景1：计算对象数组中每个电脑操作系统是否可用，大于16位操作系统表示可用,否则不可用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//ES5方法</span><br><span class="hljs-keyword">var</span> computers = [<br> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Apple&quot;</span>,<span class="hljs-attr">ram</span>:<span class="hljs-number">16</span>&#125;,<br> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;IBM&quot;</span>,<span class="hljs-attr">ram</span>:<span class="hljs-number">4</span>&#125;,<br> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Acer&quot;</span>,<span class="hljs-attr">ram</span>:<span class="hljs-number">32</span>&#125;<br>];<br><span class="hljs-keyword">var</span> everyComputersCanRunProgram = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> someComputersCanRunProgram = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; computers.<span class="hljs-built_in">length</span>; i++)&#123;<br> <span class="hljs-keyword">var</span> computer = computers[i];<br> <span class="hljs-keyword">if</span>(computer.ram &lt; <span class="hljs-number">16</span>)&#123;<br>   everyComputersCanRunProgram = <span class="hljs-literal">false</span>;<br> &#125;<span class="hljs-keyword">else</span>&#123;<br>   someComputersCanRunProgram = <span class="hljs-literal">true</span>;<br> &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(everyComputersCanRunProgram);<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(someComputersCanRunProgram);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima">//ES6 <span class="hljs-built_in">some</span> <span class="hljs-built_in">every</span> <br><span class="hljs-built_in">var</span> <span class="hljs-built_in">every</span> = computers.<span class="hljs-built_in">every</span>(function(computer)&#123;<br>  <span class="hljs-built_in">return</span> computer.ram &gt; <span class="hljs-number">16</span>;<br>&#125;)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">every</span>);//<span class="hljs-literal">false</span><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">some</span> = computers.<span class="hljs-built_in">some</span>(function(computer)&#123;<br> <span class="hljs-built_in">return</span> computer.ram &gt; <span class="hljs-number">16</span>;<br>&#125;)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">some</span>);//<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>一言以蔽之：Some: 一真即真；Every: 一假即假</strong></p><p>使用场景2：假定有一个注册页面,判断所有input内容的长度是否大于0</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Field</span>(<span class="hljs-params">value</span>)&#123;<br>  this.value = value;<br>&#125;<br>Field.prototype.validate = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> this.value.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//ES5方法</span><br><span class="hljs-keyword">var</span> username = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;henrywu&quot;</span>);<br><span class="hljs-keyword">var</span> telephone = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;18888888888&quot;</span>);<br><span class="hljs-keyword">var</span> password = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;my_password&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(username.validate());<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(telephone.validate());<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(password.validate());<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//ES6 some every</span><br><span class="hljs-keyword">var</span> fields = [username,telephone,password];<br><span class="hljs-keyword">var</span> formIsValid = fields.every(<span class="hljs-keyword">function</span>(<span class="hljs-params">field</span>)&#123;<br> <span class="hljs-keyword">return</span> field.validate();<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(formIsValid);<span class="hljs-comment">//true</span><br><span class="hljs-keyword">if</span>(formIsValid)&#123;<br> <span class="hljs-comment">// 注册成功</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-comment">// 给用户一个友善的错误提醒</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、reduce：将数组合成一个值"><a href="#六、reduce：将数组合成一个值" class="headerlink" title="六、reduce：将数组合成一个值"></a>六、reduce：将数组合成一个值</h3><p><strong>reduce() 方法接收一个方法作为累加器，数组中的每个值(从左至右) 开始合并，最终为一个值。</strong></p><p>使用场景1： 计算数组中所有值的总和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>];<br> <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//es5 方法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">length</span>; i++)&#123;<br>  <span class="hljs-built_in">sum</span> += numbers[i];<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br><span class="hljs-comment">// es6 reduce</span><br><span class="hljs-keyword">var</span> sumValue = numbers.<span class="hljs-built_in">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">sum2,number2</span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sum2);<span class="hljs-comment">//0 10 30 60</span><br>  <span class="hljs-keyword">return</span> sum2 + number2;<br>&#125;,<span class="hljs-number">0</span>);<span class="hljs-comment">//sum2初始值为0</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sumValue);<br></code></pre></td></tr></table></figure><p>使用场景2：</p><p>将数组中对象的某个属性抽离到另外一个数组中</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> primaryColors = [<br>  &#123;<span class="hljs-built_in">color</span>:<span class="hljs-string">&quot;red&quot;</span>&#125;,<br>  &#123;<span class="hljs-built_in">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>&#125;,<br>  &#123;<span class="hljs-built_in">color</span>:<span class="hljs-string">&quot;blue&quot;</span>&#125;<br>];<br><span class="hljs-built_in">var</span> colors = primaryColors.reduce(function(previous,primaryColor)&#123;<br>   previous.<span class="hljs-built_in">push</span>(primaryColor.<span class="hljs-built_in">color</span>);<br>   <span class="hljs-built_in">return</span> previous;<br>&#125;,[]);<br>console.<span class="hljs-built_in">log</span>(colors);//[<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>]<br></code></pre></td></tr></table></figure><p>使用场景3：判断字符串中括号是否对称</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> balancedParens<span class="hljs-built_in">(string</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">!string</span>.split(<span class="hljs-string">&quot;&quot;</span>).reduce(<span class="hljs-keyword">function</span>(<span class="hljs-keyword">previous</span>,char)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">previous</span> &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">previous</span>;&#125;<br>    <span class="hljs-keyword">if</span>(char == <span class="hljs-string">&quot;(&quot;</span>)&#123; <span class="hljs-keyword">return</span> ++<span class="hljs-keyword">previous</span>;&#125;<br>    <span class="hljs-keyword">if</span>(char == <span class="hljs-string">&quot;)&quot;</span>)&#123; <span class="hljs-keyword">return</span> --<span class="hljs-keyword">previous</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">previous</span>;<br>  &#125;,<span class="hljs-number">0</span>);<br>&#125;<br>console.log(balancedParens(<span class="hljs-string">&quot;((())))&quot;</span>));<br></code></pre></td></tr></table></figure><p>原文链接:<a href="https://github.com/ljianshu/Blog/issues/31">细说数组常用遍历的方法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年英文阅读年终总结</title>
    <link href="/2022/02/01/2021%E5%B9%B4%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/02/01/2021%E5%B9%B4%E8%8B%B1%E6%96%87%E9%98%85%E8%AF%BB%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这是因为疫情无法回老家过年的第二个春节。借此辞旧迎新之际，盘点一下2021年英文阅读的突破和收获。</p><p>7月-10月份，读完了2部短篇小说《了不起的盖茨比》《月亮与六便士》，以及2部长篇小说，《傲慢与偏见》《简爱》。</p><h3 id="The-Great-Gatsby"><a href="#The-Great-Gatsby" class="headerlink" title="The Great Gatsby"></a>The Great Gatsby</h3><p>《了不起的盖茨比》，由于它的名气和主题，一直以为是个俗套华丽的爱情故事，阅读之前好奇，是否原作和电影一样华而不实，但当我开始为一段又一段句子暗暗激动时，心想，应该是从此以后喜欢读英文小说了，终于get到了英文小说的美妙之处。在菲茨杰拉德笔下，哪怕微风轻轻吹动黛西衣领上的绒毛，都描写得那么让人心动。</p><blockquote><p>It was James Gatz who had been loafing along the beach that afternoon in a torn green jersey and a pair of canvas pants, but it was already Jay Gatsby who borrowed a row-boat, pulled out to the Tuolomee and informed Cody that a wind might catch him and break him up in half an hour.</p></blockquote><blockquote><p>But his heart was in a constant, turbulent riot.The most grotesque and fantastic conceits haunted him in his bed at night. A universe of ineffable gaudiness spun itself out in his brain while the clock ticked on the wash-stand and the moon soaked with wet light his tangled clothes upon the floor. Each night he added to the pattern of his fancies until drowsiness closed down upon some vivid scene with an oblivious embrace. For a while these reveries provided an outlet  for his imagination; they were a satisfactory hint of the unreality of reality, a promise that the rock of the world was founded securely on a fairy’s wing.</p></blockquote><p>阅读建议：全书5万字，若不在意剧透，可以先通过电影熟悉基本情节，再读小说，这样可以对整体剧情有个简单地把握，再去细细体会其中描写。</p><h3 id="The-Moon-and-Sixpence"><a href="#The-Moon-and-Sixpence" class="headerlink" title="The Moon and Sixpence"></a>The Moon and Sixpence</h3><p>《月亮与六便士》，追逐梦想就是追逐厄运。<br>这段话初次读到便被击中，现在终于了解它的来源。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv4dwubxj30pn2bqn7j.jpg" alt="月亮与六便士选段"></p><p>阅读建议：Chapter1 和 Chapter2 带有强烈的艺术评论性质，是全书最难读的地方，其余部分是叙事小说文体，共5万字。如果觉得前两章读不下去，可以先看叙事部分，再看毛姆本人是如何评论这个故事的。</p><h3 id="Pride-and-Prejudice"><a href="#Pride-and-Prejudice" class="headerlink" title="Pride and Prejudice"></a>Pride and Prejudice</h3><p>《傲慢与偏见》，工作不忙的时候，每晚大概有一个小时的阅读，周末的时候每天读两三个小时。沉浸其中迫不及待想要知晓接下来的情节，全部读完花了18天。文学作品提供了大量丰富的细节，伊丽莎白对达西的小心思，姑妈家对简和伊丽莎白两人命运的影响，班内特先生辛辣的幽默，还有姐妹两人之间互相打趣的俏皮话，都是只有原著才能提供的。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv50oatbj30u013znc5.jpg" alt="傲慢与偏见选段"></p><h3 id="Jane-Eyre"><a href="#Jane-Eyre" class="headerlink" title="Jane Eyre"></a>Jane Eyre</h3><p>《傲慢与偏见》12万多字，《简爱》18万多字，无论字数还是故事风格，都很适合作为衔接。所以趁热打铁开启了《简爱》的阅读。不同于前者英式乡村田园风情，简爱带有明显阴郁的哥特的色彩，和基督教文化色彩也更浓一些。</p><p>感到幸运（或者不幸）的一点是，这两本书的中文版我没有看过，所以小说情节对我来说是完全崭新的，小时候在书店翻过几页《简爱》，孤儿院互相取暖的伙伴不幸去世，简爱遭受的种种让幼小的我喘不过气来。再拿起这本书，已经是十几年后了。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv58u34ej30u013zduu.jpg" alt="简爱选段"></p><p>少女时期的我对外国名著完全不感冒，佶屈聱牙的翻译，冗长枯燥的人名，动辄大段毫无共鸣的环境描写，都把我拦在了大门外。而今我如饥似渴读完两本原版名著，陶醉其中的同时也深感幼年启蒙的重要性，英美文学这扇门，终于推开了一条小缝。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv78emhyj30pt0h54ce.jpg" alt="电影选择的是2011年版本"></p><h3 id="TOFEL-Reading"><a href="#TOFEL-Reading" class="headerlink" title="TOFEL Reading"></a>TOFEL Reading</h3><p>夏天业务忙碌的碎片事件做点托福阅读，打印网上整理好的分类文章，生物、艺术、生态、心理等，其中生物篇做的最多。15分钟一篇的练手，如同炎热天气中一口气吃下半个冰镇西瓜。</p><p>喜欢非虚构阅读，记录下文章提及学科专有名词，词根衍生的常见其他名词，笔尖在纸张上行走，像一只勤奋的小蚂蚁。很多学科名词大概在托福阅读以外的地方不会再用，但天然喜欢它们，仿佛带着某种既定的安宁和秩序。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7yv7de461j30u0140ap5.jpg" alt="随便读读"></p>]]></content>
    
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组内置排序函数对比</title>
    <link href="/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/"/>
    <url>/2021/03/16/%E6%95%B0%E7%BB%84%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>PHP 手册专门列出了数组内置排序函数的属性一览表, 不过仔细看就会发现, 这个表格比较乱, 缺乏条理性</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7sc3ccty4j310s0hg10u.jpg" alt="图片"></p><p>因此我对这些排序函数做了简单的归类和对比, 这样看起来一目了然, 也仍容易记忆使用了.</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h86324fmjhj31hc0sg1k2.jpg" alt="图片"></p><p>首先带有 sort 的分为 3 组 6 对, 每对之间是正序&#x2F;倒序的相反关系,其他属性相同.</p><p>sort 和 asort 的区别是:是否在排序时保持键值关联</p><p>只有 sort&#x2F;rsort&#x2F;shuffle 排序不需要考虑键的问题,可随意使用</p><p>用户可自定义排序函数 :usort&#x2F;uasort&#x2F;uksort</p><p>natsort&#x2F;natcasesort 后者的 case 指的是忽略大小写</p><p>array_multisort 的基本排序方式是: arrayA 按照键值大小排序,然后其他 array 都按照 arrayA 的调整策略跟着调整</p><p>参考:<a href="https://www.php.net/manual/zh/array.sorting.php">https://www.php.net/manual/zh/array.sorting.php</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github-hexo 两小时快速搭建个人博客网站</title>
    <link href="/2021/03/15/github-hexo%20%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2021/03/15/github-hexo%20%E4%B8%A4%E5%B0%8F%E6%97%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>今天用 2 个小时的时间完成了 Hexo 个人博客的最基本搭建，因此博客的第一篇文章就是与此有关。</p><p>此博客的搭建使用的是 CSDN 上看到的一篇教程：</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304&#x2F;article&#x2F;details&#x2F;82729029</a></p><p>该教程名副其实，或许可以称得上“史上最全”，分为三个部分：</p><p>第一部分：hexo 的初级搭建还有部署到 github page 上，以及个人域名的绑定。</p><p>第二部分：hexo 的基本配置，更换主题，实现多终端工作，以及在 coding page 部署实现国内外分流</p><p>第三部分：hexo 添加各种功能，包括搜索的 SEO，阅读量统计，访问量统计和评论系统等。</p><p>此博客部署完成后，如你所见，使用的 github 给定域名，暂未设置个人域名。然后对网站的语言、标题、风格主题等进行了设置。其他扩展功能暂未上线，可以满足最基本的需要。</p><p>以下是 Hexo 搭建步骤，点击教程做起来吧，你也可以轻松拥有自己的网站。</p><ol><li>安装 Git</li><li>安装 Node.js</li><li>安装 Hexo</li><li>GitHub 创建个人仓库</li><li>生成 SSH 添加到 GitHub</li><li>将 hexo 部署到 GitHub</li><li>设置个人域名</li><li>发布文章</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>github, Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《心流：最优体验心理学》：一本提高幸福感和效率的行动指南</title>
    <link href="/2021/02/15/%E5%BF%83%E6%B5%81%EF%BC%9A%E6%9C%80%E4%BC%98%E4%BD%93%E9%AA%8C%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <url>/2021/02/15/%E5%BF%83%E6%B5%81%EF%BC%9A%E6%9C%80%E4%BC%98%E4%BD%93%E9%AA%8C%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywlj8d8lj30u00mfjuy.jpg" alt="《心流》中英文版本"></p><p>“心流”是指我们在做某件事时，那种全神贯注、投入忘我的状态——这种状态下，你甚至感受不到时间的存在，在这件事情完成之后我们会有一种充满能量并且非常满足的额感受，其实很多时候我们在做自己非常喜欢，有挑战并且擅长的事情的时候，就很容易体验到心流，比如阅读、演奏乐器、瑜伽、跑步、游泳，还有工作的时候。</p><p>关于“心流”概念的流行，记得2015年知乎上已存在大批相关引用。前面这段话基本上就是很多人对心流的理解，但心流不只包括这些。</p><p>两千三百多年前，亚里士多德就提出，人们无一例外地在追求幸福，然而，几个世纪过去了，工业和科技的发达，金钱、物质、权利……种种，真的让人们幸福了吗？人类不满的根源在哪里，米哈利认为最重要的原因是自我内在的失序（disorder）。<strong>著名心理学家、积极心理学奠基人米哈里·契克森米哈赖（Mihaly Csikszentmihalyi）</strong> 用这本书系统阐述了心流的理论，进入心流的条件，从日常生活、休闲娱乐、工作、人际关系等各方面，分析如何获得最优体验。</p><p>英文版初读于2017年，是我读的一本英文书，当时受限知识经验、有许多没有读懂的地方。这次花一下午读完重点篇章，兴之所至双语对照，饶有趣味。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywuc3ka8j30u00mi7aa.jpg" alt="对照阅读"></p><p>下面介绍这本书给我最有启发的三个部分：</p><h3 id="一个核心概念：构成心流体验的8要素"><a href="#一个核心概念：构成心流体验的8要素" class="headerlink" title="一个核心概念：构成心流体验的8要素"></a>一个核心概念：构成心流体验的8要素</h3><p>（第3章第2节）</p><p><span style="border-bottom:2px dash red;">The Elements of Enjoyment <span>是心流理论的核心之一，分为下面8个方面：</p><h4 id="a-challenging-activity-that-requires-skills-具备挑战性的活动"><a href="#a-challenging-activity-that-requires-skills-具备挑战性的活动" class="headerlink" title="a challenging activity that requires skills 具备挑战性的活动"></a>a challenging activity that requires skills 具备挑战性的活动</h4><p>每个人都有一套填补生活中的无聊空隙，或在焦虑来袭时保持平衡的特定方法，目的无非是通过有规律的活行动，把意识规范地更加有秩序。这些活动是一种“小型心流”，可以帮助我们度过日常生活中的低潮。</p><h4 id="the-merging-of-action-and-awareness-知行合一"><a href="#the-merging-of-action-and-awareness-知行合一" class="headerlink" title="the merging of action and awareness 知行合一"></a>the merging of action and awareness 知行合一</h4><h4 id="clear-goals-and-feedback-明确目标与即时反馈"><a href="#clear-goals-and-feedback-明确目标与即时反馈" class="headerlink" title="clear goals and feedback 明确目标与即时反馈"></a>clear goals and feedback 明确目标与即时反馈</h4><h4 id="concentration-on-the-task-at-hand-全神贯注于手头的任务"><a href="#concentration-on-the-task-at-hand-全神贯注于手头的任务" class="headerlink" title="concentration on the task at hand 全神贯注于手头的任务"></a>concentration on the task at hand 全神贯注于手头的任务</h4><h4 id="the-paradox-of-control-掌控自如"><a href="#the-paradox-of-control-掌控自如" class="headerlink" title="the paradox of control 掌控自如"></a>the paradox of control 掌控自如</h4><p>冒险专家的乐趣并非来自危险本身，而是来自他们使危险降至最低的能力。真正令他们乐此不疲的，不是追逐危险的病态悚栗，而是一种有办法控制潜在危险的感觉。</p><h4 id="the-loss-of-self-consciousness-浑然忘我"><a href="#the-loss-of-self-consciousness-浑然忘我" class="headerlink" title="the loss of self-consciousness 浑然忘我"></a>the loss of self-consciousness 浑然忘我</h4><p>becoming one flesh ，翻译成了“合一”<br>自我意识消失，并不代表自我随之消失，甚至意识依然存在，只不过它不再感觉到自我而已。实际的情况是：我们用以代表自己的资讯，也就是自我的观念，隐遁到知觉之外。暂时忘我，似乎是件很愉快的事情，不在一心一意地想着自己，才有机会扩充对自我的概念。消除自我意识可以带来自我超越，产生一种自我疆界向外扩展的感觉。</p><h4 id="the-transformantion-of-time-时间感的异常"><a href="#the-transformantion-of-time-时间感的异常" class="headerlink" title="the transformantion of time 时间感的异常"></a>the transformantion of time 时间感的异常</h4><h3 id="一个高频词语：autotelic"><a href="#一个高频词语：autotelic" class="headerlink" title="一个高频词语：autotelic"></a>一个高频词语：autotelic</h3><p>这个单词来源于希腊，auto 意思是 self，telos 意思是 goals，网络词典解释为<br><span style="border-bottom:2px dash red;">autotelic ：(of an activity or a creative work) having an end or purpose in itself.</span></p><p>也就是那种做一件事不追求未来的报酬，做这件事本身就是最大的回馈<span style="border-bottom:2px dash red;">It refers to a self-contain activity, one that is done not with the expectation of some future benefit, but simply because the doing itself is the reward.</span></p><p>原书中涉及到 autotelic 的有三种情况：</p><ul><li>the autotelic experience</li><li>the autotelic personality</li><li>the autotelic family context</li></ul><h4 id="the-autotelic-experience-目标不假外求（第3章第3节）"><a href="#the-autotelic-experience-目标不假外求（第3章第3节）" class="headerlink" title="the autotelic experience 目标不假外求（第3章第3节）"></a>the autotelic experience 目标不假外求（第3章第3节）</h4><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywm96w58j30u0146qb5.jpg" alt="目标不假外求"></p><p>自成目标是最优体验的一大特色，如果一个活动含有一定比例的自成目标，就更有可能进入心流状态。</p><p>“这两种情形不分轩轾”的用英语怎么说呢：what transpires in the two situations is ostensibly identical</p><h4 id="autotelic-personality-自得其乐的性格（第4章第3节）"><a href="#autotelic-personality-自得其乐的性格（第4章第3节）" class="headerlink" title="autotelic personality 自得其乐的性格（第4章第3节）"></a>autotelic personality 自得其乐的性格（第4章第3节）</h4><p>自得其乐的性格指的是能轻易控制意识，比较容易体验心流。米哈利由此分析了阻碍享受这种快乐的两种心理障碍：</p><p><strong>注意力失调（attentional disorder）与过度包摄刺激（stimulus overinclusion）：精神能量飘忽不定，阻碍心流产生</strong></p><p><strong>VS</strong></p><p><strong>过分的自我意识（excessive self-conscious）与以自我为中心：注意力狭隘，缺乏弹性</strong></p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywnp56xcj30u00mfdli.jpg" alt="自得其乐的性格1"></p><p><strong>接下来引入了社会病理学（social pathology）中的“失范”（anomie）与“疏离”（alienation）</strong>。失范指的是社会的行为规范被扰乱，当什么可以做什么、什么不可以做互相混淆时，靠社会规则建立意识秩序的人就会感到焦虑，行为反复无常没有意义。疏离，个人觉得就是哲学上的“异化”，人们被社会体制逼迫而不得不做一些跟自己目标相悖的事情。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywnyhgicj30u00mf43r.jpg" alt="自得其乐的性格2"></p><p>社会处于失范状态时，一件事是否值得投注精神能量就变得不清楚，很难产生心流；为疏离、异化所苦时，个人没办法把精神能量投注于自己真正想要追求的目标上。</p><p>仔细想想，这两种阻碍心流产生的社会因素，与上面说的两种个人心理障碍互相呼应。失范对应着精神能量无法聚焦，注意力涣散；疏离或异化，则是丧失目的感与自我价值感。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywo3to3aj30u00mf79y.jpg" alt="自得其乐的性格3"></p><h4 id="autotelic-family-context-自成目标的家庭环境（第4章第3节）"><a href="#autotelic-family-context-自成目标的家庭环境（第4章第3节）" class="headerlink" title="autotelic family context 自成目标的家庭环境（第4章第3节）"></a>autotelic family context 自成目标的家庭环境（第4章第3节）</h4><p>the effects of the family on the autotelic personality这一小节探讨了 前面所说 自得其乐的性格是如何在家庭环境中培养起来的。</p><p>芝加哥大学的实验发现，具备以下5个特点的家庭环境非常有助于产生最优体验：</p><ul><li>清晰：青少年知道父母对自己的期望，在家人互动中，目标和反馈都很清晰</li><li>重视：孩子觉得父母读他们目前所做的事情、他们具体的感受与体验都很有兴趣</li><li>选择：孩子觉得自己有很多选择，包括不听父母的话，只是他们得准备好自己承担后果</li><li>投入：孩子有足够的信心，全心全意去做他感兴趣的事情</li><li>挑战：父母为孩子安排复杂渐进的行动机会</li></ul><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywq4wtipj30u00mftdy.jpg" alt="自成目标的家庭环境1"></p><p>可以看出，这5大特点与构成心流的8个要素有诸多共通之处。用一句话概括就是——家庭生活充满了秩序。如果孩子在秩序不佳的环境里，大部分能量浪费在了争吵、压抑和对峙中，努力保护脆弱的自我不被吞噬，精神能量被极大的耗尽，哪里分的出来照顾自己内心的成长呢。</p><p>如何培养自己自得其乐的性格呢？哲学家罗素这么说：</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywqp6uzyj30u00t879c.jpg" alt="自成目标的家庭环境2"></p><p>一般分析进入心流的条件时，会提到掌握的技能和完成任务的复杂度，这固然是一个方面。不过 the autotelic experience 和 the autotelic personality 为问题提供了一个全新的角度，那就是内在动机与自身可能存在的心理障碍。</p><p>心流体验8要素属于理论层面，autotelic 三观点更具实践和指导意义。本书我精读前4章，泛读剩余章节，全书有不少闪耀着智慧光芒的句子，摘录如下。</p><h3 id="有启发性的全书金句记录："><a href="#有启发性的全书金句记录：" class="headerlink" title="有启发性的全书金句记录："></a>有启发性的全书金句记录：</h3><ul><li><p>有些人学会了有效运用注意力这笔无价的资源，也有人弃置不用。控制意识最明显的指标就是能随心所欲的集中注意力，不因任何事情而分心。若能做到这一点，就能在日常生活中找到乐趣。</p></li><li><p>我们用以描述人格特征的字眼——诸如内外向、成就不凡、偏执狂，其实指的都是一个人建构注意力的模式。注意力是种“精神能量”，受我们控制、随我们使用，也是改善体验品质的最重要的工具。</p></li><li><p>自我的内在秩序收到打扰时，与个人目标相冲突的资讯侵入意识后，视目标的重要性和威胁的而大小而定，某些程度的注意力必须腾出来消除危机，用于处理其他事务的注意力就相对减少了。</p></li></ul><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywqvipbmj30u018xk5g.jpg" alt="原版"></p><ul><li><p>其实战斗中对抗的不是自己，而是使意识失序的精神熵。</p></li><li><p>享乐与乐趣的区别：享乐是高水准生活的一环，属于恢复“均衡”的体验，在肉体需求引起精神熵以后，重整意识的秩序。但是不能带动心灵的成长，也无法增加自我的复杂性，享乐有助于维持意识的秩序，却无法在意识中创造新秩序。</p></li><li><p>开始时靠目标证明努力的必要，到后来却变成靠努力证明目标的重要。</p></li><li><p>“我在人生旅程的中途，发现自己置身于幽暗的森林，完全不认识路。”但丁《神曲》</p></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果你是心理学爱好者，这本书是理解积极心理学领域不可或缺的素材，如果你是大众读者，它更是一本提升幸福感和效率的行动指南。</p><p>最后附上本书目录，供君一览。有人吐槽360页的书，序言占据了60页，不过郑也夫的序言《自造内心秩序之途》，非常值得一看噢。</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywwce3cnj30rb0rvtb1.jpg" alt="目录1"><br><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywr7itrmj30u00mfad4.jpg" alt="目录2"><br><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h7ywrdkusnj30u00mfju2.jpg" alt="目录3"></p>]]></content>
    
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：抓取B站高分番剧、视频弹幕图云</title>
    <link href="/2020/08/02/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96B%E7%AB%99%E9%AB%98%E5%88%86%E7%95%AA%E5%89%A7%E3%80%81%E8%A7%86%E9%A2%91%E5%BC%B9%E5%B9%95%E5%9B%BE%E4%BA%91/"/>
    <url>/2020/08/02/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96B%E7%AB%99%E9%AB%98%E5%88%86%E7%95%AA%E5%89%A7%E3%80%81%E8%A7%86%E9%A2%91%E5%BC%B9%E5%B9%95%E5%9B%BE%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<h1 id="1-抓取高分番剧"><a href="#1-抓取高分番剧" class="headerlink" title="1.抓取高分番剧"></a>1.抓取高分番剧</h1><h2 id="原始网页"><a href="#原始网页" class="headerlink" title="原始网页"></a>原始网页</h2><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862sninsaj31650ibk9b.jpg" alt="番剧列表页"></p><p><a href="https://www.bilibili.com/anime/index/#season_version=-1&area=-1&is_finish=-1&copyright=-1&season_status=-1&season_month=-1&year=-1&style_id=-1&order=4&st=1&sort=0&page=1">https://www.bilibili.com/anime/index/#season_version&#x3D;-1&amp;area&#x3D;-1&amp;is_finish&#x3D;-1&amp;copyright&#x3D;-1&amp;season_status&#x3D;-1&amp;season_month&#x3D;-1&amp;year&#x3D;-1&amp;style_id&#x3D;-1&amp;order&#x3D;4&amp;st&#x3D;1&amp;sort&#x3D;0&amp;page&#x3D;1</a></p><h2 id="python-爬虫代码（储存到数据库）"><a href="#python-爬虫代码（储存到数据库）" class="headerlink" title="python 爬虫代码（储存到数据库）"></a>python 爬虫代码（储存到数据库）</h2><h3 id="主文件-lt-niche-gems-py-gt"><a href="#主文件-lt-niche-gems-py-gt" class="headerlink" title="主文件 &lt;niche_gems.py&gt;"></a>主文件 &lt;niche_gems.py&gt;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>from bs4 import BeautifulSoup<br>import json<br>import time<br>def getReviewTimes(media_link):<br>    res = requests.get(media_link)<br>    soup = BeautifulSoup(res.text, &#x27;html.parser&#x27;)<br>    review_times = soup.find_all(&#x27;div&#x27;, class_=&#x27;media-info-review-times&#x27;)<br>    for i in review_times:<br>        review_time = i.text<br>    return review_time<br>def getAnime(url):<br>    res = requests.get(url)<br>    graded_data = json.loads(res.text)<br>    animes_list = graded_data[&#x27;data&#x27;][&#x27;list&#x27;]<br>    media_ids = []<br>    media_links = []<br>    m_orders = []<br>    titles = []<br>    review_times = []<br>    for each in animes_list:<br>        media_id = each[&#x27;media_id&#x27;]<br>        media_ids.append(media_id)<br>        media_link = f&#x27;https://www.bilibili.com/bangumi/media/md&#123;media_id&#125;&#x27;<br>        review_time = getReviewTimes(media_link)<br>        review_times.append(review_time)<br>        media_links.append(media_link)<br>        m_order = each[&#x27;order&#x27;].strip()<br>        m_orders.append(m_order)<br>        titles.append(each[&#x27;title&#x27;])<br>    animes_matrix = [media_ids, m_orders, titles, review_times, media_links]<br>    animes_result = list(zip(*animes_matrix))<br>    return animes_result<br></code></pre></td></tr></table></figure><h3 id="按照评分-by-score"><a href="#按照评分-by-score" class="headerlink" title="按照评分 by score"></a>按照评分 by score</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>import niche_gems<br>import sqlite3<br>import csv<br>import time<br>conn = sqlite3.connect(&#x27;anime.db&#x27;)<br>c = conn.cursor()<br>def createTable():<br>    c.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS animeByScore(<br>        media_id INTEGER PRIMARY KEY,<br>        m_order REAL,<br>        title TEXT,<br>        review_time INTEGER,<br>        media_link TEXT)&quot;&quot;&quot;)<br>def main():<br>    createTable()<br>    for i in range(1, 90):<br>        print(f&#x27;page &#123;i&#125; scraping...&#x27;)<br>        url_score = f&#x27;https://api.bilibili.com/pgc/season/index/result?season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;order=4&amp;st=1&amp;sort=0&amp;page=&#123;i&#125;&amp;season_type=1&amp;pagesize=20&amp;type=1&#x27;<br>        time.sleep(1)<br>        animes_results_by_score = []<br>        animes_result_by_score = niche_gems.getAnime(url_score)<br>        animes_results_by_score.extend(animes_result_by_score)<br>        c.executemany(&#x27;INSERT OR IGNORE INTO animeByScore VALUES(?,?,?,?,?)&#x27;,<br>                      animes_results_by_score)<br>        conn.commit()<br>        print(f&#x27;page &#123;i&#125; animeByScore insert successfully...&#x27;)<br>        print(f&#x27;page &#123;i&#125; done...&#x27;)<br>    c.close()<br>    conn.close()<br>    print(&#x27;执行完毕，数据库已关闭！&#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="按照播放量-by-play-count"><a href="#按照播放量-by-play-count" class="headerlink" title="按照播放量 by play count"></a>按照播放量 by play count</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plain">import niche_gems<br>import sqlite3<br>conn = sqlite3.connect(&#x27;anime.db&#x27;)<br>c = conn.cursor()<br>def createTable():<br>    c.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS animeByPlaycount(<br>        media_id int primary key，<br>        order int,<br>        title text,<br>        review_time int,<br>        media_link text<br>    )&quot;&quot;&quot;)<br>def query_and_output():<br>    c.execute(&#x27;SELECT * from animeByPlaycount SORT BY order&#x27;)<br>    data = c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#x27;/Users/yao/www/python//bilibili/anime/animeByPlaycount.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for row in data:<br>            file.write()<br>def main():<br>    url_play_count = &#x27;https://api.bilibili.com/pgc/season/index/result?season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;year=-1&amp;style_id=-1&amp;order=2&amp;st=1&amp;sort=0&amp;page=1&amp;season_type=1&amp;pagesize=20&amp;type=1&#x27;<br>    animes_result_by_playcount = niche_gems.getAnime(url_play_count)<br>    createTable()<br>    c.executemany(&#x27;INSERT OR IGNORE INTO animeByPlaycount&#x27;)<br>    conn.commit()<br>    print(&#x27;animeByPlaycount insert successfully...&#x27;)<br>    query_and_output()<br>    print(&#x27;animeByPlaycount file saved successfully...&#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h2><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862ua26ylj315b0gstrp.jpg" alt="animate.db/animateByScore"></p><h2 id="从数据库中取出并展示在-html-中"><a href="#从数据库中取出并展示在-html-中" class="headerlink" title="从数据库中取出并展示在 html 中"></a>从数据库中取出并展示在 html 中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs plain">import sqlite3<br>import csv<br>import pandas as pd<br>from prettytable import PrettyTable<br>conn = sqlite3.connect(&#x27;anime.db&#x27;)<br>c = conn.cursor()<br>c.execute(&#x27;SELECT * from animeByScore WHERE m_order &gt; 9.7&#x27;)<br>data = c.fetchall()<br>c.close()<br>conn.close()<br># file_path = &#x27;/Users/yao/www/python/bilibili/anime/animeByScore.csv&#x27;<br># with open(file_path, &#x27;w&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8&#x27;) as f:<br>#     fieldnames = [&#x27;anime_id&#x27;, &#x27;m_order&#x27;, &#x27;title&#x27;, &#x27;review_time&#x27;, &#x27;anime_link&#x27;]<br>#     f_csv = csv.DictWriter(f, fieldnames=fieldnames)<br>#     f_csv.writeheader()<br>#     for row in data:<br>#         f_csv.writerow(<br>#             &#123;<br>#                 &#x27;anime_id&#x27;: row[0],<br>#                 &#x27;m_order&#x27;: row[1],<br>#                 &#x27;title&#x27;: row[2],<br>#                 &#x27;review_time&#x27;: row[3],<br>#                 &#x27;anime_link&#x27;: row[4]<br>#             &#125;<br>#         )<br>html_uri = &#x27;/Users/yao/www/python/bilibili/anime/animeByScore.html&#x27;<br>record_list = data<br>title = &quot;评分列表&quot;<br>tbody_content = &quot;&quot;<br>for record in record_list:<br>    tbody_content = tbody_content + f&quot;&quot;&quot;<br>     &lt;tr&gt;<br>        &lt;td&gt;&#123;record[0]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[1]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[2]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[3]&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;record[4]&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &quot;&quot;&quot;<br>content = f&quot;&quot;&quot;<br>&lt;table&gt;<br>&lt;thead&gt;<br>    &lt;th&gt;anime_id&lt;/th&gt;<br>    &lt;th&gt;m_order&lt;/th&gt;<br>    &lt;th&gt;title&lt;/th&gt;<br>    &lt;th&gt;review_time&lt;/th&gt;<br>    &lt;th&gt;anime_link&lt;/th&gt;<br>&lt;/thead&gt;<br>&lt;tbody&gt;<br>    &#123;tbody_content&#125;<br>&lt;/tbody&gt;<br>&lt;/table&gt;<br>&quot;&quot;&quot;<br>html = f&quot;&quot;&quot;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;zh-CN&quot;&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;&#123;title&#125;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&#123;content&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&quot;&quot;&quot;<br>with open(html_uri, &#x27;w&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8&#x27;) as f:<br>    f.write(html)<br>print(&#x27;csv file saved (＾－＾)V&#x27;)<br></code></pre></td></tr></table></figure><h2 id="html-展示效果"><a href="#html-展示效果" class="headerlink" title="html 展示效果"></a>html 展示效果</h2><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862up9tlyj31260mz7wh.jpg" alt="生成的html"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="小技巧：如何把-CSV-转换成-HTML"><a href="#小技巧：如何把-CSV-转换成-HTML" class="headerlink" title="小技巧：如何把 CSV 转换成 HTML"></a>小技巧：如何把 CSV 转换成 HTML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">from prettytable import PrettyTable<br>file_path = &#x27;/Users/yao/www/python/bilibili/anime/animeByScore.csv&#x27;<br>csv_file = open(file_path, &#x27;r&#x27;)<br>csv_file = csv_file.readlines()<br>tb = PrettyTable(csv_file[0].split(&#x27;,&#x27;))<br># 这一句也可以这么写<br># table = PrettyTable()<br># table.field_names=csv_file[0].split(&#x27;,&#x27;)<br>for row in range(1, 100):<br>    csv_file[row] = csv_file[row].split(&#x27;,&#x27;)<br>    tb.add_row(csv_file[row])<br>html_path = &#x27;/Users/yao/www/python/bilibili/anime/html_file.html&#x27;<br>html_file = open(html_path, &#x27;w&#x27;)<br>html_code = tb.get_html_string()<br>html_file = html_file.write(html_code)<br></code></pre></td></tr></table></figure><h1 id="2-抓取视频弹幕并制作图云"><a href="#2-抓取视频弹幕并制作图云" class="headerlink" title="2.抓取视频弹幕并制作图云"></a>2.抓取视频弹幕并制作图云</h1><h2 id="python-爬虫弹幕"><a href="#python-爬虫弹幕" class="headerlink" title="python 爬虫弹幕"></a>python 爬虫弹幕</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>import json<br>import re<br><br>def get_cid(url):<br>    bvid = url.split(&#x27;/&#x27;)[4].split(&#x27;?&#x27;)[0]<br>    danmu_page_link = f&#x27;https://api.bilibili.com/x/player/pagelist?bvid=&#123;bvid&#125;&amp;jsonp=jsonp&#x27;<br>    res = requests.get(danmu_page_link)<br>    cid_page = json.loads(res.text)<br>    cid = cid_page[&#x27;data&#x27;][0][&#x27;cid&#x27;]<br>    # 获取cid时要注意视频是不是多p,自己做小工具时用其中1p就可以<br>    # cids = res_dict[&#x27;data&#x27;][&#x27;cid&#x27;]<br>    # part_names = res_dict[&#x27;data&#x27;][&#x27;part&#x27;]<br>    return cid<br>def get_danmu(cid):<br>    danmu_url = f&#x27;https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;cid&#125;&#x27;<br>    res = requests.get(danmu_url)<br>    res_xml = res.content.decode(&#x27;utf-8&#x27;)<br>    pattern = re.compile(&#x27;&lt;d.*?&gt;(.*?)&lt;/d&gt;&#x27;)<br>    danmu_list = pattern.findall(res_xml)<br>    return danmu_list<br>def save_file(danmu_list):<br>    file_path = &#x27;/Users/yao/www/python/bilibili/video/danmu_file.txt&#x27;<br>    with open(file_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for item in danmu_list:<br>            file.write(item)<br>            file.write(&#x27;\n&#x27;)<br>def main():<br>    source = &#x27;https://www.bilibili.com/video/BV1xs411Q799?p=1&#x27;<br>    cid = get_cid(source)<br>    danmu_list = get_danmu(cid)<br>    save_file(danmu_list)<br>    print(&#x27;file saved successfully...&#x27;)<br>if __name__ == &#x27;__main__&#x27;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="得到的弹幕文本"><a href="#得到的弹幕文本" class="headerlink" title="得到的弹幕文本"></a>得到的弹幕文本</h2><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862v5w4uwj30x30n2tfb.jpg" alt="弹幕文本"></p><h3 id="弹幕文本图云分析"><a href="#弹幕文本图云分析" class="headerlink" title="弹幕文本图云分析"></a>弹幕文本图云分析</h3><h3 id="分词代码"><a href="#分词代码" class="headerlink" title="分词代码"></a>分词代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">import jieba<br>from wordcloud import WordCloud<br>file_path = &#x27;/Users/yao/www/python/bilibili/video/danmu_file.txt&#x27;<br>with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>    text_str = file.read()<br>seg_list = jieba.cut(text_str)<br>word_str = &quot; &quot;.join(seg_list)<br>font_path = &quot;/System/Library/Fonts/PingFang.ttc&quot;<br>wc_settintg = &#123;<br>    &#x27;font_path&#x27;: &#x27;/System/Library/Fonts/PingFang.ttc&#x27;,<br>    &#x27;background_color&#x27;: &#x27;white&#x27;,<br>    &#x27;width&#x27;: 1000,<br>    &#x27;height&#x27;: 860,<br>    &#x27;margin&#x27;: 2,<br>&#125;<br>wc = WordCloud(**wc_settintg).generate(word_str)<br>wc.to_file(&#x27;/Users/yao/www/python/bilibili/video/xiaojiayu_python_p1.png&#x27;)<br>print(&#x27;wordcloud done&#x27;)<br></code></pre></td></tr></table></figure><p>参考视频：<a href="https://www.bilibili.com/video/BV1g7411e7m4">https://www.bilibili.com/video/BV1g7411e7m4</a></p><h3 id="得到的图云"><a href="#得到的图云" class="headerlink" title="得到的图云"></a>得到的图云</h3><p>（B 站的好多弹幕真是越来越不能看了……）</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862vlyb7zj30rs0nwhb0.jpg" alt="图片"></p><h3 id="遇到的问题：生成的图片-中文乱码"><a href="#遇到的问题：生成的图片-中文乱码" class="headerlink" title="遇到的问题：生成的图片 中文乱码"></a>遇到的问题：生成的图片 中文乱码</h3><p>查了一下这是因为中文字体包不适配，然后发现我们用 mac 自带的苹方字体就能非常简单的搞定。做词云的时候用的 Mac，所以 Windows 的解决方法没有尝试。</p><p>本地路径是：</p><p>font_path &#x3D; “&#x2F;System&#x2F;Library&#x2F;Fonts&#x2F;PingFang.ttc”</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h8633ekz39j310n0m4wob.jpg" alt="本地路径"></p><p>在电脑中查看：</p><ol><li>启动台——其他——打开字体册</li></ol><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862w3tpsqj310n0l4qai.jpg" alt="Mac的字体册"></p><ol start="2"><li>如果你之前没有改过系统字体的话，默认选中苹方简体，右键选择在 Finder 中显示</li></ol><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862wi06aqj310o0pjdpz.jpg" alt="选择字体"></p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862wyj4x2j310o0fpk0a.jpg" alt="需要的字体包"></p><p>这就是我们需要的字体包。</p><p>如果不需要其他参数的话，字体路径直接传入 WordCloud()参数就可以了。</p><p>wc &#x3D; WordCloud(font_path).generate(word_str)</p><p>词云官方文档地址：<a href="https://github.com/amueller/word_cloud">https://github.com/amueller/word_cloud</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：某用户所有微博的简单备份</title>
    <link href="/2020/07/20/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%9F%90%E7%94%A8%E6%88%B7%E6%89%80%E6%9C%89%E5%BE%AE%E5%8D%9A%E7%9A%84%E7%AE%80%E5%8D%95%E5%A4%87%E4%BB%BD/"/>
    <url>/2020/07/20/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%9F%90%E7%94%A8%E6%88%B7%E6%89%80%E6%9C%89%E5%BE%AE%E5%8D%9A%E7%9A%84%E7%AE%80%E5%8D%95%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="python-爬虫代码"><a href="#python-爬虫代码" class="headerlink" title="python 爬虫代码"></a>python 爬虫代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br># 目的：编写简易微博备份工具, 将指定微博备份为txt文本<br># 1.  学习python使用<br># 2.  学习使用python获取web页面(学习http调用/了解简单网络请求方式/使用外部库)<br># 3.  使用python抓取微博接口(了解浏览器抓包方法, http基础规范)<br># 4.  将抓取接口存入数据库中(掌握本地数据库构建存取/sql的增删改查写法)<br># 5.  从数据库中读取接口, 输出txt文本<br>import requests<br>import json<br>import time<br>import sqlite3<br>from bs4 import BeautifulSoup<br>def get_page(url):<br>    headers = &#123;<br>        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&#x27;,<br>        &#x27;referer&#x27;: &#x27;https://m.weibo.cn/u/6587600437&#x27;<br>    &#125;<br>    # target_url = &#x27;https://m.weibo.cn/u/1768825052?uid=1768825052&amp;luicode=10000011&amp;lfid=1076031768825052&#x27;<br>    res = requests.get(url, headers=headers)<br>    return res<br>def get_since_id(res):<br>    weibo_json = json.loads(res.text)<br>    since_id = int(weibo_json[&#x27;data&#x27;][&#x27;cardlistInfo&#x27;][&#x27;since_id&#x27;])<br>    return since_id<br>def get_weibo(res):<br>    weibo_json = json.loads(res.text)<br>    weibo_cards = weibo_json[&quot;data&quot;][&quot;cards&quot;]<br>    weibo_id = []<br>    weibo_time = []<br>    weibo_text = []<br>    reposts_count = []<br>    comments_count = []<br>    attitudes_count = []<br>    for each in weibo_cards:<br>        weibo_id.append(each[&quot;mblog&quot;][&quot;id&quot;])<br>        weibo_text.append(each[&quot;mblog&quot;][&quot;text&quot;])<br>        weibo_time.append(each[&#x27;mblog&#x27;][&#x27;created_at&#x27;])<br>        reposts_count.append(each[&#x27;mblog&#x27;][&#x27;reposts_count&#x27;])<br>        comments_count.append(each[&#x27;mblog&#x27;][&#x27;comments_count&#x27;])<br>        attitudes_count.append(each[&#x27;mblog&#x27;][&#x27;attitudes_count&#x27;])<br>    weibo_matrix = [weibo_id, weibo_time, weibo_text,<br>                    reposts_count, comments_count, attitudes_count]<br>    result = list(zip(*weibo_matrix))<br>    return result<br>conn = sqlite3.connect(&#x27;weibo.db&#x27;)<br>c = conn.cursor()<br>def create_table():<br>    c.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS weibo_person(<br>        weibo_id int,<br>        created_at text,<br>        weibo_text text,<br>        reposts_count int,<br>        comments_count int,<br>        attitudes_count int<br>        )&quot;&quot;&quot;)<br>def query_and_output():<br>    c.execute(&#x27;SELECT * FROM weibo_person&#x27;)<br>    data = c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#x27;/Users/yao/www/python/微博/leftchenn.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for item in data:<br>            string = f&#x27;发布时间：&#123;item[1]&#125; \n 微博内容：&#123;item[2]&#125; \n 转发数：&#123;item[3]&#125; 评论数：&#123;item[4]&#125; 转发数：&#123;item[5]&#125; \n\n\n &#x27;<br>            file.write(string)<br>def main():<br>    host = &quot;https://m.weibo.cn/u/1768825052&quot;<br>    target_url = &#x27;https://m.weibo.cn/api/container/getIndex?uid=1768825052&amp;luicode=10000011&amp;lfid=1076031768825052&amp;type=uid&amp;value=1768825052&amp;containerid=1076031768825052&#x27;<br>    res = get_page(target_url)<br>    result = get_weibo(res)<br>    since_id = get_since_id(res)<br>    for i in range(10):<br>        print(&#x27;page &#123;&#125; scraping...&#x27;.format(i))<br>        new_url = f&#x27;https://m.weibo.cn/api/container/getIndex?uid=1768825052&amp;luicode=10000011&amp;lfid=1076031768825052&amp;type=uid&amp;value=1768825052&amp;containerid=1076031768825052&amp;since_id=&#123;since_id&#125;&#x27;<br>        time.sleep(1)<br>        res = get_page(new_url)<br>        result.extend(get_weibo(res))<br>        since_id = get_since_id(res)<br>        print(&#x27;page &#123;&#125; scrap done...&#x27;.format(i))<br>    create_table()<br>    c.executemany(&#x27;INSERT INTO weibo_person VALUES(?,?,?,?,?,?)&#x27;, result)<br>    conn.commit()<br>    print(&#x27;insert successfully...&#x27;)<br>    query_and_output()<br>    print(&#x27;output successfully...&#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h3><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h8630dmegyj315n0lf4pb.jpg" alt="weibo.db/weibo_person"></p><h3 id="得到的文本"><a href="#得到的文本" class="headerlink" title="得到的文本"></a>得到的文本</h3><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h8630t7jrgj30x30n27hd.jpg" alt="微博文本"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：抓取网易云音乐某首歌曲的热门评论</title>
    <link href="/2020/07/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%9F%90%E9%A6%96%E6%AD%8C%E6%9B%B2%E7%9A%84%E7%83%AD%E9%97%A8%E8%AF%84%E8%AE%BA/"/>
    <url>/2020/07/16/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%9F%90%E9%A6%96%E6%AD%8C%E6%9B%B2%E7%9A%84%E7%83%AD%E9%97%A8%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="首先，以这首歌为例："><a href="#首先，以这首歌为例：" class="headerlink" title="首先，以这首歌为例："></a>首先，以这首歌为例：</h3><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862y28j2jj30ui0mxn5v.jpg" alt="图片"></p><h3 id="python-代码如下："><a href="#python-代码如下：" class="headerlink" title="python 代码如下："></a>python 代码如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>import json<br># import BeautifulSoup from bs4<br>def get_hotComments(res):<br>    comments_json = json.loads(res.text)<br>    hot_comments = comments_json[&#x27;hotComments&#x27;]<br>    with open(&#x27;/Users/yao/www/python/evol-love.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for each in hot_comments:<br>            file.write(each[&#x27;user&#x27;][&#x27;nickname&#x27;] + &#x27;: \n\n&#x27;)<br>            file.write(each[&#x27;content&#x27;] + &#x27;\n&#x27;)<br>            # file.write(each[&#x27;likedCount&#x27;] + &#x27;\n&#x27;)<br>            # file.write(each[&#x27;time&#x27;] + &#x27;\n&#x27;)<br>            file.write(&#x27;--❤-----------❤--\n&#x27;)<br>def get_comments(url):<br>    song_id = url.split(&#x27;=&#x27;)[1]<br>    headers = &#123;<br>        &#x27;user-agent&#x27;: &#x27;curl https://bootstrap.pypa.io/get-pip.py | python3&#x27;,<br>        &#x27;referer&#x27;: &#x27;https://music.163.com/song?id=1381290746&#x27;&#125;<br>    params = &#x27;15S1vG2hDWPcsAeXpjYIcwuRpK7nwElk3Cdy6c/3aJdbH5aBub7nWrYPxZQaMzKrhFSUo1n4nGHkCbaZAl77WSFPMYjjv6sU5Qipnqnn4QjXRH6eN1w/PcauCCUo4NDgaw/Uudad5J/zpgDY2005gC3UF+s2s/ND5tjXTU0SeDkiBg47A6b6VqhK/7E/hS9++nlvAC7QkkzCbsXZMp/jyBl5+KroeMcGAfFumxZ5pME=&#x27;<br>    encSecKey = &#x27;3f5dbdd0ec1f0a1501b88f6e04ce30ecf88192b4e3a92bd2dc1216f2ccc90898211e6347a2ab36d07f93793352ff6559fb927b7cbd337f5887d2af7b442e2dfb0b4abd83e85c6c3bb20fe2beef050db4c169531411f4e23caaa201f62609fcda4de694c8e9e759443fea2f7febf044bd9c4bcb2697519ca96dca676730059156&#x27;<br>    data = &#123;<br>        &#x27;params&#x27;: params,<br>        &#x27;encSecKey&#x27;: encSecKey<br>    &#125;<br>    target_url = &#x27;https://music.163.com/weapi/v1/resource/comments/R_SO_4_&#123;&#125;?csrf_token=55a6b8514346a9f676c8485978093b9f&#x27;.format(song_id)<br>    res = requests.post(target_url, headers=headers, data=data)<br>    # rawHTML =  &#x27;&#x27;<br>    # soup = BeautifulSoup(rawHTML)<br>    # file_name_obj = soup.select_one(&#x27;.f-ff2&#x27;)<br>    # file_name = file_name_obj.text<br>    return res<br>def main():<br>    url = input(&#x27;please input song url:&#x27;)<br>    res = get_comments(url)<br>    # title = get_title(url)<br>    get_hotComments(res)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><p>得到的txt文件如下（如有需要可进一步分析）：</p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862yhqxhzj30x30n2wq5.jpg" alt="图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫之：抓取豆瓣电影TOP250</title>
    <link href="/2020/07/13/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/"/>
    <url>/2020/07/13/python%E7%88%AC%E8%99%AB%E4%B9%8B%EF%BC%9A%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/</url>
    
    <content type="html"><![CDATA[<p>豆瓣用户每天都在对“看过”的电影进行“很差”到“力荐”的评价，豆瓣根据每部影片看过的人数以及该影片所得的评价等综合数据，通过算法分析产生豆瓣电影 Top 250。</p><h3 id="原始网页："><a href="#原始网页：" class="headerlink" title="原始网页："></a>原始网页：</h3><p><a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862z87o1hj31hc0p3nex.jpg" alt="图片"></p><h3 id="python-爬虫代码"><a href="#python-爬虫代码" class="headerlink" title="python 爬虫代码"></a>python 爬虫代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>from bs4 import BeautifulSoup<br>import sqlite3<br>import time<br>def open_url(url):<br>    headers = &#123;<br>        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&#x27;,<br>        &quot;Cookie&quot;: &#x27;bid=U5nCZ8p0dQU; gr_user_id=cb5f0143-dc7b-4558-8ca8-645601af3a4c; _vwo_uuid_v2=D8FFB9019ECC277DA812225E3B2109D06|9ff6373ff5de826c9b373e0499c2fd95; __gads=ID=fca53c413c37e6b3:T=1583725810:S=ALNI_Ma0O2oj2sLthssNt4FqeaZYp7EL_Q; ll=&quot;108288&quot;; douban-fav-remind=1; __yadk_uid=UtObTTkrwA7qukDAgdd2INMv9LH52PEA; viewed=&quot;26829016_26264642_26277694_4315606_1955110_1400498_4065258_1094802_26939853_12411215&quot;; __utmc=30149280; __utmc=223695111; dbcl2=&quot;33304907:UiHXJr1eiGI&quot;; ck=PYWO; _pk_ref.100001.4cf6=%5B%22%22%2C%22%22%2C1591627160%2C%22https%3A%2F%2Faccounts.douban.com%2Fpassport%2Flogin%3Fredir%3Dhttps%253A%252F%252Fmovie.douban.com%252Ftop250%22%5D; _pk_ses.100001.4cf6=*; __utma=30149280.542734861.1583725808.1591614666.1591627161.51; __utmb=30149280.0.10.1591627161; __utmz=30149280.1591627161.51.46.utmcsr=accounts.douban.com|utmccn=(referral)|utmcmd=referral|utmcct=/passport/login; __utma=223695111.1397865339.1583730183.1591614666.1591627161.10; __utmb=223695111.0.10.1591627161; __utmz=223695111.1591627161.10.8.utmcsr=accounts.douban.com|utmccn=(referral)|utmcmd=referral|utmcct=/passport/login; push_noty_num=0; push_doumail_num=0; _pk_id.100001.4cf6=6441328ab4c5f495.1583730182.10.1591627294.1591614962.&#x27;,<br>        &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;<br>    &#125;<br>    res = requests.get(url, headers=headers)<br>    return res<br>def find_moives(res):<br>    soup = BeautifulSoup(res.text, &#x27;html.parser&#x27;)<br>    # 电影名<br>    movies = []<br>    targets = soup.find_all(&#x27;div&#x27;, class_=&#x27;hd&#x27;)<br>    for each in targets:<br>        movies.append(each.a.span.text)<br>    # 评分<br>    ranks = []<br>    targets = soup.find_all(&#x27;em&#x27;)<br>    for each in targets:<br>        index = int(each.text)<br>        ranks.append(index)<br>    # 资料<br>    profiles = []<br>    targets = soup.find_all(&#x27;div&#x27;, class_=&#x27;bd&#x27;)<br>    for each in targets:<br>        try:<br>            profiles.append(each.p.text.split(&#x27;\n&#x27;)[<br>                1].strip() + each.p.text.split(&#x27;\n&#x27;)[2].strip())<br>        except:<br>            continue<br>    data_matrix = [ranks, movies, profiles]<br>    result = list(zip(*data_matrix))<br>    return result<br>def find_depth(res):<br>    soup = BeautifulSoup(res.text, &#x27;html.parser&#x27;)<br>    depth = soup.find(<br>        &#x27;span&#x27;, class_=&#x27;next&#x27;).previous_sibling.previous_sibling.text<br>    return int(depth)<br>conn = sqlite3.connect(&quot;douban_movies.db&quot;)<br>c = conn.cursor()<br>def create_table():<br>    c.execute(<br>        &quot;CREATE TABLE IF NOT EXISTS douban_movies250(item_id INT,rank INT, movie TEXT, profile TEXT)&quot;)<br>def query_and_output():<br>    c.execute(&#x27;SELECT * FROM douban_movies250&#x27;)<br>    data = c.fetchall()<br>    c.close()<br>    conn.close()<br>    with open(&#x27;/Users/yao/www/python/douban_movies250.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:<br>        for row in data:<br>            string = f&#x27;Top &#123;row[1]&#125; : 《&#123;row[2]&#125;》，\n 简介： &#123;row[3]&#125;\n&#x27;<br>            file.write(string)<br>def main():<br>    host = &#x27;https://movie.douban.com/top250&#x27;<br>    res = open_url(host)<br>    depth = find_depth(res)<br>    result = []<br>    for i in range(depth):<br>        url = host + &#x27;/?start=&#x27; + str(25 * i)<br>        time.sleep(1)<br>        res = open_url(url)<br>        result.extend(find_moives(res))<br>    # item_id = [i for i in range(250)]<br>    # result_matrix = [item_id, result]<br>    # result = list(zip(*result_matrix))<br>    create_table()<br>    c.executemany(&#x27;INSERT INTO douban_movies250 VALUES(?,?,?,?)&#x27;, result)<br>    conn.commit()<br>    print(&#x27;insert database successfully&#x27;)<br>    query_and_output()<br>    print(&#x27;output successfully &#x27;)<br>if __name__ == &quot;__main__&quot;:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="得到的文本"><a href="#得到的文本" class="headerlink" title="得到的文本"></a>得到的文本</h3><p><img src="http://tva1.sinaimg.cn/large/006hVAtMly1h862znrp9tj30x30n24kv.jpg" alt="图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
